Перем Команда_ОтправитьСМС Экспорт;

/////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ ИНТЕРФЕЙСОВ

// Интерфейс для регистрации обработки.
// Вызывается при добавлении обработки в справочник "ВнешниеОбработки"
//
// Возвращаемое значение:
// Структура:
// Вид - строка - возможные значения:	"ДополнительнаяОбработка"
//										"ДополнительныйОтчет"
//										"ЗаполнениеОбъекта"
//										"Отчет"
//										"ПечатнаяФорма"
//										"СозданиеСвязанныхОбъектов"
//
// Назначение - массив строк имен объектов метаданных в формате:
//			<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]
//			Например, "Документ.СчетЗаказ" или "Справочник.*"
//			Прим. параметр имеет смысл только для назначаемых обработок
//
// Наименование - строка - наименование обработки, которым будет заполнено
//						наименование справочника по умолчанию - краткая строка для
//						идентификации обработки администратором
//
// Версия - строка - версия обработки в формате <старший номер>.<младший номер>
//					используется при загрузке обработок в информационную базу
// БезопасныйРежим – Булево – Если истина, обработка будет запущена в безопасном режиме.
//							Более подбробная информация в справке.
//
// Информация - Строка- краткая информация по обработке, описание обработки
//
// Команды - ТаблицаЗначений - команды, поставляемые обработкой, одная строка таблицы соотвествует
//							одной команде
//				колонки: 
//				 - Представление - строка - представление команды конечному пользователю
//				 - Идентификатор - строка - идентефикатор команды. В случае печатных форм
//											перечисление через запятую списка макетов
//				 - Использование - строка - варианты запуска обработки:
//						"ОткрытиеФормы" - открыть форму обработки
//						"ВызовКлиентскогоМетода" - вызов клиентского экспортного метода из формы обработки
//						"ВызовСерверногоМетода" - вызов серверного экспортного метода из модуля объекта обработки
//				 - ПоказыватьОповещение – Булево – если Истина, требуется оказывать оповещение при начале
//								и при окончании запуска обработки. Прим. Имеет смысл только
//								при запуске обработки без открытия формы.
//				 - Модификатор – строка - для печатных форм MXL, которые требуется
//										отображать в форме ПечатьДокументов подсистемы Печать
//										требуется установить как "ПечатьMXL"
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = Новый Структура;
	
	ПараметрыРегистрации.Вставить("Вид"				, "ДополнительнаяОбработка");
	ПараметрыРегистрации.Вставить("Назначение"		, Новый Структура);
	ПараметрыРегистрации.Вставить("Наименование"	, НСтр("ru = 'Мульти рассылка сообщий СМС'"));
	ПараметрыРегистрации.Вставить("Версия"			, "1.0.0.51");
	ПараметрыРегистрации.Вставить("БезопасныйРежим"	, Ложь);
	
	ПараметрыРегистрации.Вставить("Информация"		,
		НСтр("ru = 'Рассылка СМС-сообщений по телефонам контрагентов, партнеров и контактных лиц используя сервисы:
			|	• sms.ru
			|	• smsc.ru
			|	• p1sms.ru
			|	• smsgorod.ru
			|	• terasms.ru
			|	• sms-prosto.ru
			|Поддерживаемые конфигурации:
			|НА УПРАВЛЯЕМЫХ ФОРМАХ:
			|	+ Управление торговлей 11.4
			|	+ Бухгалтерия предприятия 3.0
			|	+ Зарплата и управление персоналом 3.1
			|	+ Управление нашей фирмой 1.6 (Управление небольшой фирмой 1.6)
			|	+ Комплексная автоматизация 2.0
			|	+ Документооборот ПРОФ/КОРП 2.0
			|	+ 1С:Фитнес клуб 3
			|	+ Розница 2.1 и производные конфигурации от нее (Ювелирный магазин, Аптека, Магазин одежды и обуви и т.д.)
			|	+ Автосервис
			|	+ Другие конфигурации на управляемых формах (8.2, 8.3)
			|НА ОБЫЧНЫХ ФОРМАХ:
			|	+ Управление торговлей 10.3
			|	+ Бухгалтерия предприятия 2.0
			|	+ Другие конфигурации на обычных формах (8.2, 8.3)
			|'"));
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	
	ДобавитьКоманду(ТаблицаКоманд,
					НСтр("ru = 'Рассылка СМС'"),
					Команда_ОтправитьСМС,
					"ОткрытиеФормы");
	
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	ПараметрыРегистрации.Вставить("НастройкиХранилища", ПолучитьНастройкиФормы());
		
	мПараметры = ПараметрыРегистрации.НастройкиХранилища;
		
	Если мПараметры <> Неопределено Тогда
		мПараметрыСервиса = ЗаполнитьСайтСервиса(мПараметры.SMS_Сервис);
		ЗаполнитьПараметрРегистрации(ПараметрыРегистрации, "СсылкаНаСайт", 
			мПараметрыСервиса, "СсылкаНаСайт");
		ЗаполнитьПараметрРегистрации(ПараметрыРегистрации, "СсылкаНаСайтПредставление", 
			мПараметрыСервиса, "СсылкаНаСайтПредставление");
			
		ЗаполнитьПараметрРегистрации(ПараметрыРегистрации, "Пользователь", 
			мПараметрыСервиса, "SMS_Логин");
		ЗаполнитьПараметрРегистрации(ПараметрыРегистрации, "Логин", 
			мПараметрыСервиса, "SMS_Логин");
		ЗаполнитьПараметрРегистрации(ПараметрыРегистрации, "Пароль", 
			мПараметрыСервиса, "SMS_Пароль");
		ЗаполнитьПараметрРегистрации(ПараметрыРегистрации, "Отправитель", 
			мПараметрыСервиса, "SMS_ИмяОтправителя");
		ЗаполнитьПараметрРегистрации(ПараметрыРегистрации, "КлючAPI", 
			мПараметрыСервиса, "SMS_КлючAPI");
	Иначе 
		ПараметрыРегистрации.Вставить("СсылкаНаСайт", "https://sys1c.sms.ru/?panel=register");
		ПараметрыРегистрации.Вставить("СсылкаНаСайтПредставление",	"sms.ru"); 		
	КонецЕсли;	
	
	ПараметрыСеансаОбработки = ОбработкаПолучитьПараметрыСеанса(Неопределено);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ЗаполнитьПараметрРегистрации(ПараметрыРегистрации, Имя, СохраненныеПараметры, ИмяСохраненныеПараметры)
	
	Если СохраненныеПараметры.Свойство(ИмяСохраненныеПараметры) Тогда
		ПараметрыРегистрации.Вставить(Имя, СохраненныеПараметры[ИмяСохраненныеПараметры]);
	КонецЕсли;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, 
	ПоказыватьОповещение = Ложь, Модификатор = "")
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры

// Интерфейс для запуска логики обработки
//
// Параметры
// ОбъектыНазначения - массив -  ссылоки на объекты информационной базы, для которых требуется
//					вызвать обработку
//
Процедура ВыполнитьКоманду(ИдентификаторКоманды) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
		
КонецПроцедуры

Функция ЭтоКлиентСервер() Экспорт
	
	Возврат НЕ ИнформационнаяБазаФайловая();
	
КонецФункции

// Функция ИнформационнаяБазаФайловая определяет режим эксплуатации
// информационной базы файловый (Истина) или Серверный (Ложь).
//  При проверке используется СтрокаСоединенияИнформационнойБазы, которую
// можно указать явно.
//
// Параметры:
//  СтрокаСоединенияИнформационнойБазы - Строка - параметр используется, если
//                 нужно проверить строку соединения не текущей информационной базы.
//
// Возвращаемое значение:
//  Булево.
//
Функция ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "") Экспорт
			
	Если ПустаяСтрока(СтрокаСоединенияИнформационнойБазы) Тогда
		СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;
	Возврат Найти(Врег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
	
КонецФункции

Функция ЗначениеЗащищенногоСоединения() Экспорт
	Попытка
		Возврат Новый ЗащищенноеСоединениеOpenSSL(,Новый СертификатыУдостоверяющихЦентровОС);
	Исключение                     
	    https = Истина;
	КонецПопытки;
	
	Возврат https;
КонецФункции

Функция ФайлСуществуетИДоступен(ПолноеИмяФайла) Экспорт
	Перем Файл;
	
	Файл = Новый Файл(ПолноеИмяФайла);
	Если НЕ Файл.Существует() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка: Занят ли файл другим процессом?
	Если НЕ ВРег(Файл.Расширение) = ".DBF" Тогда
		Попытка
			ПереместитьФайл(Файл.ПолноеИмя,Файл.ПолноеИмя);
		Исключение
			Сообщить("Файл не доступен: 
			|" + Файл.ПолноеИмя);
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОбработкаПолучитьТонкийТолстый()

    ТонкийТолстый = "";
	
	МассивСоединений = ПолучитьСоединенияИнформационнойБазы();
	Для Каждого ТекСоединение ИЗ МассивСоединений Цикл
		Если ТекСоединение.Пользователь.Имя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя Тогда
			Если ((ТекСоединение.ИмяПриложения = "1CV8") 
				ИЛИ (ТекСоединение.ИмяПриложения = "1CV8C")) Тогда		
				// Режим 1С:Предприятие ТолстыйКлиент или ТонкийКлиент.
				// ~ "ТонкийКлиент"	 = ПредставлениеПриложения("1CV8C")
				// ~ "ТолстыйКлиент" = ПредставлениеПриложения("1CV8")
				ТонкийТолстый = ПредставлениеПриложения(ТекСоединение.ИмяПриложения);
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат ТонкийТолстый;

КонецФункции

Функция ОбработкаПолучитьИмяФормы(ИмяФормы) Экспорт
	Перем ПолноеИмяФормы;
	
	ПолноеИмяФормы = Неопределено;
	
	Попытка
		Обраб = Обработки["МультиРассылкаСМС"];
		ПолноеИмяФормы = "Обработка.МультиРассылкаСМС.Форма." + ИмяФормы;		
	Исключение
		ПолноеИмяФормы = "ВнешняяОбработка.МультиРассылкаСМС.Форма." + ИмяФормы;
	КонецПопытки;
	
	Возврат ПолноеИмяФормы;
	
КонецФункции

Функция ОбработкаПолучитьПараметрыСеанса(Форма) Экспорт

	Перем ИспользуемоеИмяФайла;
	
	ИспользуемоеИмяФайла = Неопределено;
	Попытка
		ИспользуемоеИмяФайла = ЭтотОбъект.ИспользуемоеИмяФайла;
	Исключение
		ИспользуемоеИмяФайла = "Обработка конфигурации";
	КонецПопытки;
	
	ПараметрыСеансаОбработки = Новый Структура;
	Попытка
		ПараметрыСеансаОбработки.Вставить("РежимИспользованияМодальности"	, Строка(МетаДанные.РежимИспользованияМодальности));	// Строка - Для возможности передачи между Сервером и Клиентом.
	Исключение
		ПараметрыСеансаОбработки.Вставить("РежимИспользованияМодальности"	, "Использовать");	// Платформа 8.2 - использовать.
	КонецПопытки;
	ПараметрыСеансаОбработки.Вставить("ТонкийТолстый"			, ОбработкаПолучитьТонкийТолстый());
	ПараметрыСеансаОбработки.Вставить("ПривилегированныйРежим"	, ПривилегированныйРежим());
	ПараметрыСеансаОбработки.Вставить("СтрокаСоединенияИнформационнойБазы"	, СтрокаСоединенияИнформационнойБазы());
	ПараметрыСеансаОбработки.Вставить("ИмяФайлаОбработки"		, ИспользуемоеИмяФайла);
	ПараметрыСеансаОбработки.Вставить("ВерсияБСП"				, ПолучитьВерсиюБСП());
	ПараметрыСеансаОбработки.Вставить("ТекущийРежимЗапуска"		, ТекущийРежимЗапуска());
	
	ПараметрыСеансаОбработки.Вставить("ИмяФормаЗагрузкиИзExcel"	, ОбработкаПолучитьИмяФормы("ФормаЗагрузкиИзExcelУФ"));
	ПараметрыСеансаОбработки.Вставить("ИмяФормаОбновление"		, ОбработкаПолучитьИмяФормы("ФормаОбновления"));
	ПараметрыСеансаОбработки.Вставить("ИмяФормаИнструкция"		, ОбработкаПолучитьИмяФормы("ФормаИнструкция"));
	ПараметрыСеансаОбработки.Вставить("ИмяФормаОтбор"			, ОбработкаПолучитьИмяФормы("ФормаОтбора"));
	
	Возврат ПараметрыСеансаОбработки;
	
КонецФункции

// Версия БСП.
Функция ПолучитьВерсиюБСП() Экспорт
	Перем ВерсияБСП;
	
	Попытка
		Выполнить("ВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки()");
	Исключение
		ВерсияБСП = "Х.Х.Х";
	КонецПопытки;
	
	Возврат ВерсияБСП;
	
КонецФункции

Функция ПреобразоватьвСистему(Число10, система)
	
	Если система > 36 или система < 2 тогда
		Сообщить("Выбранная система исчисления не поддерживается");
		Возврат -1;
	КонецЕсли;
	
	СтрокаЗначений = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	СтрокаСистема = "";
	Пока Число10 > 0 цикл
		РезДеления = Число10/система;
		ЧислоСистема = цел(РезДеления);
		остатокОтДеления = Число10 - система*(ЧислоСистема);
		СтрокаСистема = сред(СтрокаЗначений,остатокОтДеления+1,1)+ СтрокаСистема;
		Число10 = ?(ЧислоСистема=0,0,РезДеления); 
	КонецЦикла;
	
	//!!!!!!!!
	//[
	Нечётное = стрДлина(СтрокаСистема) - цел(стрДлина(СтрокаСистема)/2)*2;
	Если Нечётное тогда
		СтрокаСистема = "0"+СтрокаСистема;
	КонецЕсли;
	//]
	Возврат СтрокаСистема;
КонецФункции

Функция URLEncode(Стр) Экспорт
	
	Итог = "";
	Попытка
		Итог = Вычислить("КодироватьСтроку(Стр, СпособКодированияСтроки.КодировкаURL)");
		Возврат Итог;
	Исключение
	КонецПопытки;
	
	Длина = СтрДлина(Стр);	
	Для Н=1 По Длина Цикл
		Знак=Сред(Стр,Н,1);
		Код=КодСимвола(Знак);
		
		Если ((Знак>="a") И (Знак<="z")) ИЛИ
			 ((Знак>="A") И (Знак<="Z")) ИЛИ
			 ((Знак>="0") И (Знак<="9")) Тогда
			Итог=Итог + Знак;
		Иначе
			Если (Код>=КодСимвола("А"))И(Код<=КодСимвола("п")) Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(208,16)+"%"+ПреобразоватьвСистему(144+Код-КодСимвола("А"),16);
			ИначеЕсли (Код>=КодСимвола("р"))И(Код<=КодСимвола("я")) Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(209,16)+"%"+ПреобразоватьвСистему(128+Код-КодСимвола("р"),16);
			ИначеЕсли (Знак="ё") Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(209,16)+"%"+ПреобразоватьвСистему(145,16);
			ИначеЕсли (Знак="Ё") Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(208,16)+"%"+ПреобразоватьвСистему(129,16);
			Иначе
				Итог=Итог+"%"+ПреобразоватьвСистему(Код,16);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Итог;
	
КонецФункции

функция Hex(КС)
	
	_Hex = Новый Массив(16);
	_Hex[0]="0";
	_Hex[1]="1";
	_Hex[2]="2";
	_Hex[3]="3";
	_Hex[4]="4";
	_Hex[5]="5";
	_Hex[6]="6";
	_Hex[7]="7";
	_Hex[8]="8";
	_Hex[9]="9";
	_Hex[10]="A";
	_Hex[11]="B";
	_Hex[12]="C";
	_Hex[13]="D";
	_Hex[14]="E";
	_Hex[15]="F";	
	
	возврат(_Hex[Цел(КС / 16)] + _Hex[Цел(КС % 16)]);
	
конецфункции

Функция URLEncode2(Стр1) Экспорт
	
	Рез = ""; 
	Стр= СокрЛП(Стр1);
	Для Сч = 1 По СтрДлина(Стр) Цикл
 
		Символ = Сред(Стр, Сч, 1);
		КС = КодСимвола(Символ);
		
		Рез = Рез + "%" + Hex(Цел(КС / 256)) + "%"+ Hex(КС % 256);
		
	КонецЦикла;
 
	Возврат Рез;	
 
	Возврат Рез;
КонецФункции // URLEncode() 

Функция СформироватьСтрокуJSONИзМассива(Объект)
	СтрокаJSON = "[";
	
	Для каждого Элемент Из Объект Цикл
		Если ТипЗнч(Элемент) = Тип("Строка") Тогда
			СтрокаJSON = СтрокаJSON + """" + Элемент + """";
		ИначеЕсли ТипЗнч(Элемент) = Тип("Число") Тогда
			СтрокаJSON = СтрокаJSON + СтрЗаменить(Строка(Элемент), Символы.НПП, "");
		ИначеЕсли ТипЗнч(Элемент) = Тип("Булево") Тогда
			СтрокаJSON = СтрокаJSON + Формат(Элемент, "БЛ=false; БИ=true");
		ИначеЕсли ТипЗнч(Элемент) = Тип("Дата") Тогда
			СтрокаJSON = СтрокаJSON + Формат(Элемент - Дата(1970,1,1,1,0,0), "ЧГ=0");
		ИначеЕсли ТипЗнч(Элемент) = Тип("Массив") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент);
		ИначеЕсли ТипЗнч(Элемент) = Тип("Структура") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаЗначений") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент);
		Иначе
			СтрокаJSON = СтрокаJSON + """" + URLEncode(Строка(Элемент)) + """";
		КонецЕсли;
		
		СтрокаJSON = СтрокаJSON + ",";
	КонецЦикла;
	
	Если Прав(СтрокаJSON, 1) = "," Тогда
		СтрокаJSON = Лев(СтрокаJSON, СтрДлина(СтрокаJSON)-1);
	КонецЕсли;
	
	Возврат СтрокаJSON + "]";
КонецФункции

Функция СформироватьСтрокуJSONИзСтруктуры(Объект)
	СтрокаJSON = "{";
	
	Для Каждого Элемент Из Объект Цикл
		Если Элемент.Значение = "" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаJSON = СтрокаJSON + """" + Элемент.Ключ + """" + ":";
		
		Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
			СтрокаJSON = СтрокаJSON + """" + Элемент.Значение + """";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Число") Тогда
			СтрокаJSON = СтрокаJSON + СтрЗаменить(Строка(Элемент.Значение), Символы.НПП, "");
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Булево") Тогда
			СтрокаJSON = СтрокаJSON + Формат(Элемент.Значение, "БЛ=false; БИ=true");
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Дата") Тогда
			СтрокаJSON = СтрокаJSON + Формат(Элемент.Значение - Дата(1970,1,1,1,0,0), "ЧГ=0");
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент.Значение);
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент.Значение);
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ТаблицаЗначений") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент.Значение);
		Иначе
			СтрокаJSON = СтрокаJSON + """" + URLEncode(Строка(Элемент.Значение)) + """";
		КонецЕсли;
		
		СтрокаJSON = СтрокаJSON + ",";
	КонецЦикла;
	
	Если Прав(СтрокаJSON, 1) = "," Тогда
		СтрокаJSON = Лев(СтрокаJSON, СтрДлина(СтрокаJSON)-1);
	КонецЕсли;
	
	Возврат СтрокаJSON + "}";
КонецФункции

Функция СформироватьСтрокуJSON(Объект) Экспорт
	СтрокаJSON = "";
	
	Если ТипЗнч(Объект) = Тип("Массив") Тогда
		СтрокаJSON = СформироватьСтрокуJSONИзМассива(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("Структура") Тогда
		СтрокаJSON = СформироватьСтрокуJSONИзСтруктуры(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("ТаблицаЗначений") Тогда
		СоставСтруктуры = "";
		Для каждого Колонка Из Объект.Колонки Цикл
			СоставСтруктуры = СоставСтруктуры + ?(ЗначениеЗаполнено(СоставСтруктуры), ",", "") + Колонка.Имя;
		КонецЦикла;
		
		МассивСтрок = Новый Массив;
		Для каждого Строка Из Объект Цикл
			СтруктураКолонок = Новый Структура(СоставСтруктуры);
			ЗаполнитьЗначенияСвойств(СтруктураКолонок, Строка);
			МассивСтрок.Добавить(СтруктураКолонок);
		КонецЦикла;
		
		СтрокаJSON = СформироватьСтрокуJSONИзМассива(МассивСтрок);
	КонецЕсли;
	
	Возврат СтрокаJSON;
КонецФункции

Процедура ЗаполнитьДанныеИзОтветаJSON(Результат, ТекстJSON, ТипДанных)
	ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));	
	НомерЗначения = 0;
	
	Пока ТекстJSON <> "" Цикл
		ПервыйСимвол = Лев(ТекстJSON, 1);
		Если ПервыйСимвол = "{" Тогда
			Значение = Новый Структура;
			ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Структура");
			
			Если ТипДанных = "Структура" Тогда
				Результат.Вставить("Значение" + ?(НомерЗначения = 0, "", НомерЗначения), Значение);
				НомерЗначения = НомерЗначения + 1;
			ИначеЕсли ТипДанных = "Массив" Тогда
				Результат.Добавить(Значение);
			КонецЕсли;
		ИначеЕсли ПервыйСимвол = "[" Тогда
			Значение = Новый Массив;
			ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Массив");
			
			Если ТипДанных = "Структура" Тогда
				Результат.Вставить("Значение" + ?(НомерЗначения = 0, "", НомерЗначения), Значение);
				НомерЗначения = НомерЗначения + 1;
			Иначе
				Результат.Добавить(Значение);
			КонецЕсли;
		ИначеЕсли ПервыйСимвол = "}" И ТипДанных = "Структура" Тогда
			ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			Если Лев(ТекстJSON, 1) = "," Тогда
				ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			КонецЕсли;
			
			Возврат;
		ИначеЕсли ПервыйСимвол = "]" И ТипДанных = "Массив" Тогда
			ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			Если Лев(ТекстJSON, 1) = "," Тогда
				ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			КонецЕсли;
			
			Возврат;
		ИначеЕсли ПервыйСимвол = "}" И ТипДанных = "Массив" Тогда
			ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			Если Лев(ТекстJSON, 1) = "," Тогда
				ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			КонецЕсли;
			
			Возврат;
		Иначе
			Если ТипДанных = "Структура" Тогда
				
				Поз = Найти(ТекстJSON, ":");
				Если Поз = 0 Тогда
					Прервать;
				КонецЕсли;
				
				ИмяЗначения = СокрЛП(Лев(ТекстJSON, Поз-1));
				
				ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз+1));
				
				Если Лев(ТекстJSON, 1) = "{" Тогда
					Значение = Новый Структура;
					ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Структура");
				ИначеЕсли Лев(ТекстJSON, 1) = "[" Тогда
					Значение = Новый Массив;
					ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Массив");
				Иначе
					Поз = 0;
					Для Сч = 1 По СтрДлина(ТекстJSON) Цикл
						Символ = Сред(ТекстJSON, Сч, 1);
						Если Символ = "," ИЛИ Символ = "]" ИЛИ Символ = "}" Тогда
							Поз = Сч;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если Поз = 0 Тогда
						Значение = ТекстJSON;
						ТекстJSON = "";
					Иначе
						Значение = Лев(ТекстJSON, Поз-1);
						ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз + ?(Сред(ТекстJSON, Поз, 1) = ",", 1, 0)));
					КонецЕсли;
					
					Значение = СокрЛП(Значение);
				КонецЕсли;
				
				Результат.Вставить(ИмяЗначения, Значение);
			ИначеЕсли ТипДанных = "Массив" Тогда
				Поз = 0;
				Для Сч = 1 По СтрДлина(ТекстJSON) Цикл
					Символ = Сред(ТекстJSON, Сч, 1);
					Если Символ = "," ИЛИ Символ = "]" ИЛИ Символ = "}" Тогда
						Поз = Сч;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Поз = 0 Тогда
					Значение = ТекстJSON;
					ТекстJSON = "";
				Иначе
					Значение = Лев(ТекстJSON, Поз-1);
					ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз + ?(Сред(ТекстJSON, Поз, 1) = ",", 1, 0)));
				КонецЕсли;
				
				Значение = СокрЛП(Значение);
				
				Результат.Добавить(Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ЗаполнитьСтруктуруИзОтветаJSON(Знач ТекстJSON) Экспорт
	Результат = Новый Структура;
	
	ТекстJSON = СтрЗаменить(ТекстJSON, "\""", """");
	ТекстJSON = СтрЗаменить(ТекстJSON, """", "");	
	Если Лев(ТекстJSON, 1) = "{" Тогда
		ЗаполнитьДанныеИзОтветаJSON(Результат, ТекстJSON, "Структура");
	ИначеЕсли Лев(ТекстJSON, 1) = "[" Тогда
		МассивДанных = Новый Массив;
		ЗаполнитьДанныеИзОтветаJSON(МассивДанных, ТекстJSON, "Массив");
		
		Результат.Вставить("Значение", МассивДанных);
	КонецЕсли;
		
	Возврат Результат;
КонецФункции

// Переводит Unicode в UTF8.
Функция ПреобразоватьЮникод(Строка)

    МасКир = Новый Массив(66);
    МасКод = Новый Массив(66);
   
	МасКир[0]="А";    МасКод[0]="0410";
	МасКир[1]="а";    МасКод[1]="0430";
	МасКир[2]="Б";    МасКод[2]="0411";
	МасКир[3]="б";    МасКод[3]="0431";
	МасКир[4]="В";    МасКод[4]="0412";
	МасКир[5]="в";    МасКод[5]="0432";
	МасКир[6]="Г";    МасКод[6]="0413";
	МасКир[7]="г";    МасКод[7]="0433";
	МасКир[8]="Д";    МасКод[8]="0414";
	МасКир[9]="д";    МасКод[9]="0434";
	МасКир[10]="Е";    МасКод[10]="0415";
	МасКир[11]="е";    МасКод[11]="0435";
	МасКир[12]="Ё";    МасКод[12]="0401";
	МасКир[13]="ё";    МасКод[13]="0451";
	МасКир[14]="Ж";    МасКод[14]="0416";
	МасКир[15]="ж";    МасКод[15]="0436";
	МасКир[16]="З";    МасКод[16]="0417";
	МасКир[17]="з";    МасКод[17]="0437";
	МасКир[18]="И";    МасКод[18]="0418";
	МасКир[19]="и";    МасКод[19]="0438";
	МасКир[20]="Й";    МасКод[20]="0419";
	МасКир[21]="й";    МасКод[21]="0439";
	МасКир[22]="К";    МасКод[22]="041a";
	МасКир[23]="к";    МасКод[23]="043a";
	МасКир[24]="Л";    МасКод[24]="041b";
	МасКир[25]="л";    МасКод[25]="043b";
	МасКир[26]="М";    МасКод[26]="041c";
	МасКир[27]="м";    МасКод[27]="043c";
	МасКир[28]="Н";    МасКод[28]="041d";
	МасКир[29]="н";    МасКод[29]="043d";
	МасКир[30]="О";    МасКод[30]="041e";
	МасКир[31]="о";    МасКод[31]="043e";
	МасКир[32]="П";    МасКод[32]="041f";
	МасКир[33]="п";    МасКод[33]="043f";
	МасКир[34]="Р";    МасКод[34]="0420";
	МасКир[35]="р";    МасКод[35]="0440";
	МасКир[36]="С";    МасКод[36]="0421";
	МасКир[37]="с";    МасКод[37]="0441";
	МасКир[38]="Т";    МасКод[38]="0422";
	МасКир[39]="т";    МасКод[39]="0442";
	МасКир[40]="У";    МасКод[40]="0423";
	МасКир[41]="у";    МасКод[41]="0443";
	МасКир[42]="Ф";    МасКод[42]="0424";
	МасКир[43]="ф";    МасКод[43]="0444";
	МасКир[44]="Х";    МасКод[44]="0425";
	МасКир[45]="х";    МасКод[45]="0445";
	МасКир[46]="Ц";    МасКод[46]="0426";
	МасКир[47]="ц";    МасКод[47]="0446";
	МасКир[48]="Ч";    МасКод[48]="0427";
	МасКир[49]="ч";    МасКод[49]="0447";
	МасКир[50]="Ш";    МасКод[50]="0428";
	МасКир[51]="ш";    МасКод[51]="0448";
	МасКир[52]="Щ";    МасКод[52]="0429";
	МасКир[53]="щ";    МасКод[53]="0449";
	МасКир[54]="Ъ";    МасКод[54]="042a";
	МасКир[55]="ъ";    МасКод[55]="044a";
	МасКир[56]="Ы";    МасКод[56]="042b";
	МасКир[57]="ы";    МасКод[57]="044b";
	МасКир[58]="Ь";    МасКод[58]="042c";
	МасКир[59]="ь";    МасКод[59]="044c";
	МасКир[60]="Э";    МасКод[60]="042d";
	МасКир[61]="э";    МасКод[61]="044d";
	МасКир[62]="Ю";    МасКод[62]="042e";
	МасКир[63]="ю";    МасКод[63]="044e";
	МасКир[64]="Я";    МасКод[64]="042f";
	МасКир[65]="я";    МасКод[65]="044f";

    ParsedString = Строка;
    Flag = 1;
    
    Пока (Flag = 1) Цикл
        
    PositionOfUnicodeStart = Найти(ParsedString, "\u");
        
    
        Если PositionOfUnicodeStart > 0 тогда
        UnicodeSymbol = Сред(ParsedString, PositionOfUnicodeStart +2, 4);    
        
        FullUnicodeSymbol = "\u" + UnicodeSymbol;
        
        Index = МасКод.Найти(UnicodeSymbol);
            Если Index = Неопределено тогда
            ParsedString = СтрЗаменить(ParsedString, FullUnicodeSymbol, "?UNICODE?");
            Сообщить("Найден неизвестный символ - " + FullUnicodeSymbol); 
            Иначе
            ParsedString = СтрЗаменить(ParsedString, FullUnicodeSymbol, МасКир[Index]);
            КонецЕсли;
                
        Иначе 
        Flag = 0;
        
        КонецЕсли;
                    
    КонецЦикла;
    
    Возврат ParsedString;    
КонецФункции

/////////////////////////////////////////////////////////////////////////////
// ВЫЧИСЛЕНИЕ MD5 для 8.2 и 8.3 универсально

// Возвращает хеш по алгоритму MD5 для произвольной строки.
//
// Параметры:
//  Строка - Строка - произвольная строка любой длины
//
// Возвращаемое значение:
//  Строка - хеш, вычисленный из строки
Функция ВычислитьХешСтрокиПоАлгоритмуMD5(Знач Строка) Экспорт
	
	a = ЧислоВБинарныйМассив(1732584193); // 01 23 45 67; (шестнадцатеричное представление, сначала младший байт)
	b = ЧислоВБинарныйМассив(4023233417); // 89 AB CD EF;
	c = ЧислоВБинарныйМассив(2562383102); // FE DC BA 98;
	d = ЧислоВБинарныйМассив(271733878);  // 76 54 32 10;
	
	X = Новый Массив(16); // X - блок данных размером 512 бит, массив из 32-битных слов
	
	// разбиваем строку на блоки по 512 бит
	МассивБлоковИзСтроки = ПолучитьМассивБлоковБайтовИзСтроки(Строка);
	
	// для каждого блока производим расчет
	Для НомерБлока = 0 По МассивБлоковИзСтроки.Количество() - 1 Цикл 
		Блок = МассивБлоковИзСтроки[НомерБлока];
		Для НомерСлова = 0 по 15 Цикл
			Слово = 0;
			Для НомерБайта = 1 По 4 Цикл
				Слово = Слово + Блок[НомерСлова * 4 + НомерБайта - 1] * Pow(256, НомерБайта - 1);
			КонецЦикла;
			X[НомерСлова] = Слово; 
		КонецЦикла;
		
		// в последний блок дописываем длину строки в битах
		Если НомерБлока = МассивБлоковИзСтроки.Количество() - 1 Тогда
			РазмерСтрокиВБитах = СтрДлина(Строка) * 8;
			X[14] = РазмерСтрокиВБитах % Pow(2,32); // сначала младшие 4 байта
			X[15] = Цел(РазмерСтрокиВБитах / Pow(2,32)) % Pow(2,64); // если длина превосходит (2^64 − 1) бит, то старшие биты откидываем
		КонецЕсли;
		РассчитатьБлок(a, b, c, d, X);
	КонецЦикла;
	
	Результат = ЧислоВШестнадцатеричномПредставлении(БинарныйМассивВЧисло(a))
			  + ЧислоВШестнадцатеричномПредставлении(БинарныйМассивВЧисло(b))
			  + ЧислоВШестнадцатеричномПредставлении(БинарныйМассивВЧисло(c))
			  + ЧислоВШестнадцатеричномПредставлении(БинарныйМассивВЧисло(d));
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМассивБлоковБайтовИзСтроки(Знач Строка)
	Результат = Новый Массив;
	Строка = Строка + Символ(128); // единичный бит + выравнивание нолями до байта
	Пока СтрДлина(Строка) > 0 Цикл
		БлокБайтов = ПолучитьБлокБайтовИзСтроки(Лев(Строка, 64));
		Результат.Добавить(БлокБайтов);
		
		// если последние 8 байт получились не нулевые, то добавляем ещё один нулевой блок
		Если СтрДлина(Строка) > 56 и СтрДлина(Строка) < 64 Тогда
			Результат.Добавить(ПолучитьБлокБайтовИзСтроки(""));
		КонецЕсли;
		
		Строка = Сред(Строка, 65);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПолучитьБлокБайтовИзСтроки(Знач Строка)
	Результат = Новый Массив;
	Для Позиция = 1 По СтрДлина(Строка) Цикл
		Результат.Добавить(КодСимвола(Сред(Строка, Позиция, 1)));
	КонецЦикла;
	
	// дополняем блок нолями
	Для Индекс = Позиция По 64 Цикл
		Результат.Добавить(0);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Процедура РассчитатьБлок(a, b, c, d, X)
	aa = СкопироватьМассив(a);
	bb = СкопироватьМассив(b);
	cc = СкопироватьМассив(c);
	dd = СкопироватьМассив(d);
	
	// раунд 1
	ВыполнитьОперациюСФункциейF(a,b,c,d, X[ 0],  7, 3614090360); // 0xd76aa478 /* 1 */
	ВыполнитьОперациюСФункциейF(d,a,b,c, X[ 1], 12, 3905402710); // 0xe8c7b756 /* 2 */
	ВыполнитьОперациюСФункциейF(c,d,a,b, X[ 2], 17,  606105819); // 0x242070db /* 3 */
	ВыполнитьОперациюСФункциейF(b,c,d,a, X[ 3], 22, 3250441966); // 0xc1bdceee /* 4 */
	ВыполнитьОперациюСФункциейF(a,b,c,d, X[ 4],  7, 4118548399); // 0xf57c0faf /* 5 */
	ВыполнитьОперациюСФункциейF(d,a,b,c, X[ 5], 12, 1200080426); // 0x4787c62a /* 6 */
	ВыполнитьОперациюСФункциейF(c,d,a,b, X[ 6], 17, 2821735955); // 0xa8304613 /* 7 */
	ВыполнитьОперациюСФункциейF(b,c,d,a, X[ 7], 22, 4249261313); // 0xfd469501 /* 8 */
	ВыполнитьОперациюСФункциейF(a,b,c,d, X[ 8],  7, 1770035416); // 0x698098d8 /* 9 */
	ВыполнитьОперациюСФункциейF(d,a,b,c, X[ 9], 12, 2336552879); // 0x8b44f7af /* 10 */
	ВыполнитьОперациюСФункциейF(c,d,a,b, X[10], 17, 4294925233); // 0xffff5bb1 /* 11 */
	ВыполнитьОперациюСФункциейF(b,c,d,a, X[11], 22, 2304563134); // 0x895cd7be /* 12 */
	ВыполнитьОперациюСФункциейF(a,b,c,d, X[12],  7, 1804603682); // 0x6b901122 /* 13 */
	ВыполнитьОперациюСФункциейF(d,a,b,c, X[13], 12, 4254626195); // 0xfd987193 /* 14 */
	ВыполнитьОперациюСФункциейF(c,d,a,b, X[14], 17, 2792965006); // 0xa679438e /* 15 */
	ВыполнитьОперациюСФункциейF(b,c,d,a, X[15], 22, 1236535329); // 0x49b40821 /* 16 */
	
	// раунд 2
	ВыполнитьОперациюСФункциейG(a,b,c,d, X[ 1],  5, 4129170786); // 0xf61e2562 /* 17 */
	ВыполнитьОперациюСФункциейG(d,a,b,c, X[ 6],  9, 3225465664); // 0xc040b340 /* 18 */
	ВыполнитьОперациюСФункциейG(c,d,a,b, X[11], 14,  643717713); // 0x265e5a51 /* 19 */
	ВыполнитьОперациюСФункциейG(b,c,d,a, X[ 0], 20, 3921069994); // 0xe9b6c7aa /* 20 */
	ВыполнитьОперациюСФункциейG(a,b,c,d, X[ 5],  5, 3593408605); // 0xd62f105d /* 21 */
	ВыполнитьОперациюСФункциейG(d,a,b,c, X[10],  9,   38016083); //  0x2441453 /* 22 */
	ВыполнитьОперациюСФункциейG(c,d,a,b, X[15], 14, 3634488961); // 0xd8a1e681 /* 23 */
	ВыполнитьОперациюСФункциейG(b,c,d,a, X[ 4], 20, 3889429448); // 0xe7d3fbc8 /* 24 */
	ВыполнитьОперациюСФункциейG(a,b,c,d, X[ 9],  5,  568446438); // 0x21e1cde6 /* 25 */
	ВыполнитьОперациюСФункциейG(d,a,b,c, X[14],  9, 3275163606); // 0xc33707d6 /* 26 */
	ВыполнитьОперациюСФункциейG(c,d,a,b, X[ 3], 14, 4107603335); // 0xf4d50d87 /* 27 */
	ВыполнитьОперациюСФункциейG(b,c,d,a, X[ 8], 20, 1163531501); // 0x455a14ed /* 28 */
	ВыполнитьОперациюСФункциейG(a,b,c,d, X[13],  5, 2850285829); // 0xa9e3e905 /* 29 */
	ВыполнитьОперациюСФункциейG(d,a,b,c, X[ 2],  9, 4243563512); // 0xfcefa3f8 /* 30 */
	ВыполнитьОперациюСФункциейG(c,d,a,b, X[ 7], 14, 1735328473); // 0x676f02d9 /* 31 */
	ВыполнитьОперациюСФункциейG(b,c,d,a, X[12], 20, 2368359562); // 0x8d2a4c8a /* 32 */
	
	// раунд 3
	ВыполнитьОперациюСФункциейH(a,b,c,d, X[ 5],  4, 4294588738); // 0xfffa3942 /* 33 */
	ВыполнитьОперациюСФункциейH(d,a,b,c, X[ 8], 11, 2272392833); // 0x8771f681 /* 34 */
	ВыполнитьОперациюСФункциейH(c,d,a,b, X[11], 16, 1839030562); // 0x6d9d6122 /* 35 */
	ВыполнитьОперациюСФункциейH(b,c,d,a, X[14], 23, 4259657740); // 0xfde5380c /* 36 */
	ВыполнитьОперациюСФункциейH(a,b,c,d, X[ 1],  4, 2763975236); // 0xa4beea44 /* 37 */
	ВыполнитьОперациюСФункциейH(d,a,b,c, X[ 4], 11, 1272893353); // 0x4bdecfa9 /* 38 */
	ВыполнитьОперациюСФункциейH(c,d,a,b, X[ 7], 16, 4139469664); // 0xf6bb4b60 /* 39 */
	ВыполнитьОперациюСФункциейH(b,c,d,a, X[10], 23, 3200236656); // 0xbebfbc70 /* 40 */
	ВыполнитьОперациюСФункциейH(a,b,c,d, X[13],  4,  681279174); // 0x289b7ec6 /* 41 */
	ВыполнитьОперациюСФункциейH(d,a,b,c, X[ 0], 11, 3936430074); // 0xeaa127fa /* 42 */
	ВыполнитьОперациюСФункциейH(c,d,a,b, X[ 3], 16, 3572445317); // 0xd4ef3085 /* 43 */
	ВыполнитьОперациюСФункциейH(b,c,d,a, X[ 6], 23,   76029189); //  0x4881d05 /* 44 */
	ВыполнитьОперациюСФункциейH(a,b,c,d, X[ 9],  4, 3654602809); // 0xd9d4d039 /* 45 */
	ВыполнитьОперациюСФункциейH(d,a,b,c, X[12], 11, 3873151461); // 0xe6db99e5 /* 46 */
	ВыполнитьОперациюСФункциейH(c,d,a,b, X[15], 16,  530742520); // 0x1fa27cf8 /* 47 */
	ВыполнитьОперациюСФункциейH(b,c,d,a, X[ 2], 23, 3299628645); // 0xc4ac5665 /* 48 */
	
	// раунд 4
	ВыполнитьОперациюСФункциейI(a,b,c,d, X[ 0],  6, 4096336452); // 0xf4292244 /* 49 */
	ВыполнитьОперациюСФункциейI(d,a,b,c, X[ 7], 10, 1126891415); // 0x432aff97 /* 50 */
	ВыполнитьОперациюСФункциейI(c,d,a,b, X[14], 15, 2878612391); // 0xab9423a7 /* 51 */
	ВыполнитьОперациюСФункциейI(b,c,d,a, X[ 5], 21, 4237533241); // 0xfc93a039 /* 52 */
	ВыполнитьОперациюСФункциейI(a,b,c,d, X[12],  6, 1700485571); // 0x655b59c3 /* 53 */
	ВыполнитьОперациюСФункциейI(d,a,b,c, X[ 3], 10, 2399980690); // 0x8f0ccc92 /* 54 */
	ВыполнитьОперациюСФункциейI(c,d,a,b, X[10], 15, 4293915773); // 0xffeff47d /* 55 */
	ВыполнитьОперациюСФункциейI(b,c,d,a, X[ 1], 21, 2240044497); // 0x85845dd1 /* 56 */
	ВыполнитьОперациюСФункциейI(a,b,c,d, X[ 8],  6, 1873313359); // 0x6fa87e4f /* 57 */
	ВыполнитьОперациюСФункциейI(d,a,b,c, X[15], 10, 4264355552); // 0xfe2ce6e0 /* 58 */
	ВыполнитьОперациюСФункциейI(c,d,a,b, X[ 6], 15, 2734768916); // 0xa3014314 /* 59 */
	ВыполнитьОперациюСФункциейI(b,c,d,a, X[13], 21, 1309151649); // 0x4e0811a1 /* 60 */
	ВыполнитьОперациюСФункциейI(a,b,c,d, X[ 4],  6, 4149444226); // 0xf7537e82 /* 61 */
	ВыполнитьОперациюСФункциейI(d,a,b,c, X[11], 10, 3174756917); // 0xbd3af235 /* 62 */
	ВыполнитьОперациюСФункциейI(c,d,a,b, X[ 2], 15,  718787259); // 0x2ad7d2bb /* 63 */
	ВыполнитьОперациюСФункциейI(b,c,d,a, X[ 9], 21, 3951481745); // 0xeb86d391 /* 64 */
	
	a = _БинарнаяСумма(a, aa);
	b = _БинарнаяСумма(b, bb);
	c = _БинарнаяСумма(c, cc);
	d = _БинарнаяСумма(d, dd);
КонецПроцедуры

Процедура ВыполнитьОперациюСФункциейF(a, b, c, d, X, s, t)
	ВыполнитьОперацию(_ПобитовоеИли(_ПобитовоеИ(b, c), _ПобитовоеИ(_ПобитовоеНе(b), d)), a, b, X, s, t);
КонецПроцедуры

Процедура ВыполнитьОперациюСФункциейG(a, b, c, d, X, s, t)
	ВыполнитьОперацию(_ПобитовоеИли(_ПобитовоеИ(b, d), _ПобитовоеИ(_ПобитовоеНе(d), c)), a, b, X, s, t);
КонецПроцедуры

Процедура ВыполнитьОперациюСФункциейH(a, b, c, d, X, s, t)
	ВыполнитьОперацию(_ПобитовоеИсключающееИли(_ПобитовоеИсключающееИли(b, c), d), a, b, X, s, t);
КонецПроцедуры

Процедура ВыполнитьОперациюСФункциейI(a, b, c, d, X, s, t)
	ВыполнитьОперацию(_ПобитовоеИсключающееИли(_ПобитовоеИли(_ПобитовоеНе(d), b), c), a, b, X, s, t);
КонецПроцедуры

Процедура ВыполнитьОперацию(q, a, b, X, s, t)
	a = _БинарнаяСумма(_ЦиклическийСдвигВлево(_БинарнаяСумма(_БинарнаяСумма(a, q), ЧислоВБинарныйМассив((X + t) % Pow(2,32))), s), b);
КонецПроцедуры

Функция ЧислоВБинарныйМассив(Знач Число, Знач ВсегоРазрядов = 32)
	Результат = Новый Массив;
	ТекущийРазряд = 0;
	Пока ТекущийРазряд < ВсегоРазрядов Цикл
		ТекущийРазряд = ТекущийРазряд + 1;
		Результат.Добавить(Булево(Число % 2));
		Число = Цел(Число / 2);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция БинарныйМассивВЧисло(Массив)
	Результат = 0;
	Для НомерРазряда = -(Массив.Количество()-1) По 0 Цикл
		Результат = Результат * 2 + Число(Массив[-НомерРазряда]);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ЧислоВШестнадцатеричномПредставлении(Знач Число, Знач КоличествоБайт = 4)
	Результат = "";
	СтрокаСимволов = "0123456789ABCDEF";
	Для НомерБайта = 1 По КоличествоБайт Цикл
		ПредставлениеБайта = "";
		Для Счетчик = 1 По 2 Цикл
			ПредставлениеБайта = Сред(СтрокаСимволов, Число % 16 + 1, 1) + ПредставлениеБайта;
			Число = Цел(Число / 16);
		КонецЦикла;
		
		// порядок байтов: начиная с младшего
		Результат = Результат + ПредставлениеБайта;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция _ПобитовоеИ(БинарныйМассив1, БинарныйМассив2)
	Результат = Новый Массив;
	Для Индекс = 0 По БинарныйМассив1.Количество()-1 Цикл
		Результат.Добавить(БинарныйМассив1[Индекс] И БинарныйМассив2[Индекс]);
	КонецЦикла;	
	Возврат Результат;
КонецФункции

Функция _ПобитовоеИли(БинарныйМассив1, БинарныйМассив2)
	Результат = Новый Массив;
	Для Индекс = 0 По БинарныйМассив1.Количество()-1 Цикл
		Результат.Добавить(БинарныйМассив1[Индекс] Или БинарныйМассив2[Индекс]);
	КонецЦикла;	
	Возврат Результат;
КонецФункции

Функция _ПобитовоеИсключающееИли(БинарныйМассив1, БинарныйМассив2)
	Результат = Новый Массив;
	Для Индекс = 0 По БинарныйМассив1.Количество()-1 Цикл
		Результат.Добавить(БинарныйМассив1[Индекс] <> БинарныйМассив2[Индекс]);
	КонецЦикла;	
	Возврат Результат;
КонецФункции

Функция _ПобитовоеНе(БинарныйМассив)
	Результат = Новый Массив;
	Для Каждого Элемент Из БинарныйМассив Цикл
		Результат.Добавить(Не Элемент);
	КонецЦикла;	
	Возврат Результат;
КонецФункции

Функция _ЦиклическийСдвигВлево(БинарныйМассив, КоличествоРазрядов)
	Результат = Новый Массив(БинарныйМассив.Количество());
	Для Разряд = 0 По БинарныйМассив.Количество()-1 Цикл
		Результат[(Разряд + КоличествоРазрядов) % БинарныйМассив.Количество()] = БинарныйМассив[Разряд];
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция _БинарнаяСумма(БинарныйМассив1, БинарныйМассив2)
	Результат = Новый Массив;
	ДобавитьКРазряду = Ложь;
	Для Индекс = 0 По БинарныйМассив1.Количество()-1 Цикл
		Результат.Добавить(БинарныйМассив1[Индекс] <> БинарныйМассив2[Индекс] <> ДобавитьКРазряду);
		ДобавитьКРазряду = (0 + БинарныйМассив1[Индекс] + БинарныйМассив2[Индекс] + ДобавитьКРазряду) > 1;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция СкопироватьМассив(Массив)
	Результат = Новый Массив;
	Для Каждого Элемент Из Массив Цикл
		Результат.Добавить(Элемент);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция UnixTime2Дата(Знач ДатаИВремя)
	
	Возврат Формат(ДатаИВремя - Дата(1970,1,1,1,0,0), "ЧГ=0");
	
КонецФункции

Функция Дата2UnixTime(Знач UnixTime)
	
	Возврат Дата(1970,1,1,1,0,0) + UnixTime;
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////
// ПРЕОБРАЗОВАНИЯ И ИНТЕРНЕТ

// Перевод строки unicode в UTF-8
Функция СтрокаВUTF_8(Знач Значение) Экспорт
	
	КолСимволов = СтрДлина(Значение);
	Результат	= "";
	
	Для Индекс = 1 По КолСимволов Цикл
		ЗначениеКода = КодСимвола(Значение, Индекс);
		
		Массив = Новый Массив;
		
		Если ЗначениеКода < 128 Тогда
			Массив.Добавить(ЗначениеКода);
		ИначеЕсли ЗначениеКода >= 128 И ЗначениеКода <= 2047 Тогда
			Массив.Добавить(192 + Цел(ЗначениеКода / 64));
			Массив.Добавить(128 + ЗначениеКода % 64);
		ИначеЕсли ЗначениеКода >= 2048 И ЗначениеКода <= 65535 Тогда
			Массив.Добавить(224 + Цел(ЗначениеКода / 64 / 64));
			Массив.Добавить(128 + Цел(ЗначениеКода / 64) % 64);
			Массив.Добавить(128 + ЗначениеКода % 64);
		ИначеЕсли ЗначениеКода >= 65536 И ЗначениеКода <= 2097151 Тогда
			Массив.Добавить(240 + Цел(ЗначениеКода / 64 / 64 / 64));
			Массив.Добавить(128 + Цел(ЗначениеКода / 64 / 64) % 64);
			Массив.Добавить(128 + Цел(ЗначениеКода / 64) % 64);
			Массив.Добавить(128 + ЗначениеКода % 64);
		ИначеЕсли ЗначениеКода >= 2097152 И ЗначениеКода <= 67108863 Тогда
			Массив.Добавить(248 + Цел(ЗначениеКода / 64 / 64 / 64 / 64));
			Массив.Добавить(128 + Цел(ЗначениеКода / 64 / 64 / 64) % 64);
			Массив.Добавить(128 + Цел(ЗначениеКода / 64 / 64) % 64);
			Массив.Добавить(128 + Цел(ЗначениеКода / 64) % 64);
			Массив.Добавить(128 + ЗначениеКода % 64);
		ИначеЕсли ЗначениеКода >= 67108864 И ЗначениеКода <= 2147483647 Тогда
			Массив.Добавить(252 + Цел(ЗначениеКода / 64 / 64 / 64 / 64 / 64));
			Массив.Добавить(128 + Цел(ЗначениеКода / 64 / 64 / 64 / 64) % 64);
			Массив.Добавить(128 + Цел(ЗначениеКода / 64 / 64 / 64) % 64);
			Массив.Добавить(128 + Цел(ЗначениеКода / 64 / 64) % 64);
			Массив.Добавить(128 + Цел(ЗначениеКода / 64) % 64);
			Массив.Добавить(128 + ЗначениеКода % 64);
		КонецЕсли;
		
		Для Каждого ЗначениеКода Из Массив Цикл
			Результат = Результат + Символ(ЗначениеКода);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Перевод строки UTF-8 в unicode
Функция UTF_8ВСтроку(знач Значение) Экспорт
	
	КолСимволов = СтрДлина(Значение);
	Результат	= "";
	
	Для Индекс = 1 По КолСимволов Цикл
		а = КодСимвола(Значение, Индекс);
		б = КодСимвола(Значение, Индекс + 1);
		в = КодСимвола(Значение, Индекс + 2);
		г = КодСимвола(Значение, Индекс + 3);
		д = КодСимвола(Значение, Индекс + 4);
		е = КодСимвола(Значение, Индекс + 5);
		
		Если а >= 0 И а <= 127 Тогда
			ЗначениеКода = а;
		ИначеЕсли а >= 192 И а <= 223 Тогда
			Индекс			= Индекс + 1;
			ЗначениеКода	= (а - 192) * 64
							+ (б - 128);
		ИначеЕсли а >= 224 И а <= 239 Тогда
			Индекс			= Индекс + 2;
			ЗначениеКода	= (а - 224) * 64 * 64
							+ (б - 128) * 64
							+ (в - 128);
		ИначеЕсли а >= 240 И а <= 247 Тогда
			Индекс			= Индекс + 3;
			ЗначениеКода	= (а - 240) * 64 * 64 * 64
							+ (б - 128) * 64 * 64
							+ (в - 128) * 64
							+ (г - 128);
		ИначеЕсли а >= 248 И а <= 251 Тогда
			Индекс			= Индекс + 4;
			ЗначениеКода	= (а - 248) * 64 * 64 * 64 * 64
							+ (б - 128) * 64 * 64 * 64
							+ (в - 128) * 64 * 64
							+ (г - 128) * 64
							+ (д - 128);
		ИначеЕсли а >= 252 И а <= 253 Тогда
			Индекс			= Индекс + 5;
			ЗначениеКода	= (а - 252) * 64 * 64 * 64 * 64 * 64
							+ (б - 128) * 64 * 64 * 64 * 64
							+ (в - 128) * 64 * 64 * 64
							+ (г - 128) * 64 * 64
							+ (д - 128) * 64
							+ (е - 128);
		КонецЕсли;
		
		Результат = Результат + Символ(ЗначениеКода);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

//***************************************************************************************
// Функция преобразования строки вида х,у в список значений
//
Функция Строка2Список(Стр)       
	
	Перем Рез;
	    
	Рез = Новый СписокЗначений;
	Сч = 1;
	
	Для Сч = 1 По 4 Цикл
	    
		Поз = Найти(Стр, ","); 
		
		Если Поз = 0 Тогда
		    Рез.Добавить(Стр);
		    Прервать;                 
		Иначе	
			Рез.Добавить(Лев(Стр,Поз-1));
		КонецЕсли;	 
		
		Стр = Сред(Стр, Поз+1, СтрДлина(Стр)-Поз);
		
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции // Строка2Список()

// Функция выполняет транслитерацию переданного текста и возвращает результат
//этого преобразования.Для транслитерации используется последовательность GSM3.38.
// 
// Параметры:
//  Сообщение (строка) - Содержит текст для транслитерации
//
// Возвращаемое значение (строка):
//  Преобразованный в транслит текст.
Функция ТранслитерацияТекста(Текст) Экспорт
	
	// Заполняем список соответствий
	СписокСоответствийТранслитерации = Новый СписокЗначений;
	СписокСоответствийТранслитерации.Добавить("а", "a");
	СписокСоответствийТранслитерации.Добавить("б", "b");
	СписокСоответствийТранслитерации.Добавить("в", "v");
	СписокСоответствийТранслитерации.Добавить("г", "g");
	СписокСоответствийТранслитерации.Добавить("д", "d");
	СписокСоответствийТранслитерации.Добавить("е", "e");
	СписокСоответствийТранслитерации.Добавить("ё", "yo");
	СписокСоответствийТранслитерации.Добавить("ж", "zh");
	СписокСоответствийТранслитерации.Добавить("з", "z");
	СписокСоответствийТранслитерации.Добавить("и", "i");
	СписокСоответствийТранслитерации.Добавить("й", "j");
	СписокСоответствийТранслитерации.Добавить("к", "k");
	СписокСоответствийТранслитерации.Добавить("л", "l");
	СписокСоответствийТранслитерации.Добавить("м", "m");
	СписокСоответствийТранслитерации.Добавить("н", "n");
	СписокСоответствийТранслитерации.Добавить("о", "o");
	СписокСоответствийТранслитерации.Добавить("п", "p");
	СписокСоответствийТранслитерации.Добавить("р", "r");
	СписокСоответствийТранслитерации.Добавить("с", "s");
	СписокСоответствийТранслитерации.Добавить("т", "t");
	СписокСоответствийТранслитерации.Добавить("у", "u");
	СписокСоответствийТранслитерации.Добавить("ф", "f");
	СписокСоответствийТранслитерации.Добавить("х", "x"); 
	СписокСоответствийТранслитерации.Добавить("ц", "c"); 
	СписокСоответствийТранслитерации.Добавить("ч", "ch");
	СписокСоответствийТранслитерации.Добавить("ш", "sh");
	СписокСоответствийТранслитерации.Добавить("щ", "shh"); 
	СписокСоответствийТранслитерации.Добавить("ъ", "''");
	СписокСоответствийТранслитерации.Добавить("Ъ", "''");
	СписокСоответствийТранслитерации.Добавить("ы", "y");
	СписокСоответствийТранслитерации.Добавить("Ы", "Y");
	СписокСоответствийТранслитерации.Добавить("ь", "'");
	СписокСоответствийТранслитерации.Добавить("Ь", "'");
	СписокСоответствийТранслитерации.Добавить("э", "e");
	СписокСоответствийТранслитерации.Добавить("ю", "yu");
	СписокСоответствийТранслитерации.Добавить("я", "ya");
	СписокСоответствийТранслитерации.Добавить("А", "A");
	СписокСоответствийТранслитерации.Добавить("Б", "B");
	СписокСоответствийТранслитерации.Добавить("В", "V");
	СписокСоответствийТранслитерации.Добавить("Г", "G");
	СписокСоответствийТранслитерации.Добавить("Д", "D");
	СписокСоответствийТранслитерации.Добавить("Е", "E");
	СписокСоответствийТранслитерации.Добавить("Ё", "Yo");
	СписокСоответствийТранслитерации.Добавить("Ж", "Zh");
	СписокСоответствийТранслитерации.Добавить("З", "Z");
	СписокСоответствийТранслитерации.Добавить("И", "I");
	СписокСоответствийТранслитерации.Добавить("Й", "J");
	СписокСоответствийТранслитерации.Добавить("К", "K");
	СписокСоответствийТранслитерации.Добавить("Л", "L");
	СписокСоответствийТранслитерации.Добавить("М", "M");
	СписокСоответствийТранслитерации.Добавить("Н", "N");
	СписокСоответствийТранслитерации.Добавить("О", "O");
	СписокСоответствийТранслитерации.Добавить("П", "P");
	СписокСоответствийТранслитерации.Добавить("Р", "R");
	СписокСоответствийТранслитерации.Добавить("С", "S");
	СписокСоответствийТранслитерации.Добавить("Т", "T");
	СписокСоответствийТранслитерации.Добавить("У", "U");
	СписокСоответствийТранслитерации.Добавить("Ф", "F");
	СписокСоответствийТранслитерации.Добавить("Х", "X");
	СписокСоответствийТранслитерации.Добавить("Ц", "C");
	СписокСоответствийТранслитерации.Добавить("Ч", "Ch");
	СписокСоответствийТранслитерации.Добавить("Ш", "Sh");
	СписокСоответствийТранслитерации.Добавить("Щ", "Shh");
	СписокСоответствийТранслитерации.Добавить("Э", "E");
	СписокСоответствийТранслитерации.Добавить("Ю", "Yu");
	СписокСоответствийТранслитерации.Добавить("Я", "Ya");
	СписокСоответствийТранслитерации.Добавить("«", "<");
	СписокСоответствийТранслитерации.Добавить("»", ">");
	СписокСоответствийТранслитерации.Добавить("№", "N");
	СписокСоответствийТранслитерации.Добавить("{", "(");
	СписокСоответствийТранслитерации.Добавить("[", "(");
	СписокСоответствийТранслитерации.Добавить("}", ")");
	СписокСоответствийТранслитерации.Добавить("]", ")");
	СписокСоответствийТранслитерации.Добавить("\", "/");
	СписокСоответствийТранслитерации.Добавить("|", "I");
	СписокСоответствийТранслитерации.Добавить("^", "'");
	СписокСоответствийТранслитерации.Добавить("_", "-");
	СписокСоответствийТранслитерации.Добавить("~", "-");
	СписокСоответствийТранслитерации.Добавить("`", "'");
	СписокСоответствийТранслитерации.Добавить(Символы.НПП, " ");
	
	СписокСоответствийСимовлы = Новый СписокЗначений;
	СписокСоответствийСимовлы.Добавить(91,"(");
	СписокСоответствийСимовлы.Добавить(92,"/");
	СписокСоответствийСимовлы.Добавить(93,")");
	СписокСоответствийСимовлы.Добавить(94,"'");
	СписокСоответствийСимовлы.Добавить(95,"-");
	СписокСоответствийСимовлы.Добавить(96,"'");
	СписокСоответствийСимовлы.Добавить(123,"(");
	СписокСоответствийСимовлы.Добавить(124,"!");
	СписокСоответствийСимовлы.Добавить(125,")");
	СписокСоответствийСимовлы.Добавить(126,"-");
	СписокСоответствийСимовлы.Добавить(127," ");
	СписокСоответствийСимовлы.Добавить(130,",");
	СписокСоответствийСимовлы.Добавить(132,"""");
	СписокСоответствийСимовлы.Добавить(133,"...");
	СписокСоответствийСимовлы.Добавить(136,"'");
	СписокСоответствийСимовлы.Добавить(137,"%");
	СписокСоответствийСимовлы.Добавить(139,"<");
	СписокСоответствийСимовлы.Добавить(145,"'");
	СписокСоответствийСимовлы.Добавить(146,"'");
	СписокСоответствийСимовлы.Добавить(147,"""");
	СписокСоответствийСимовлы.Добавить(148,"""");
	СписокСоответствийСимовлы.Добавить(149,"-");
	СписокСоответствийСимовлы.Добавить(150,"-");
	СписокСоответствийСимовлы.Добавить(151,"-");
	СписокСоответствийСимовлы.Добавить(152,"-");
	СписокСоответствийСимовлы.Добавить(155,">");
	СписокСоответствийСимовлы.Добавить(160," ");
	СписокСоответствийСимовлы.Добавить(161,"!");
	СписокСоответствийСимовлы.Добавить(166,"!");
	СписокСоответствийСимовлы.Добавить(168,"""");
	СписокСоответствийСимовлы.Добавить(169,"(C)");
	СписокСоответствийСимовлы.Добавить(171,"<");
	СписокСоответствийСимовлы.Добавить(172,"");
	СписокСоответствийСимовлы.Добавить(173,"-");
	СписокСоответствийСимовлы.Добавить(174,"(R)");
	СписокСоответствийСимовлы.Добавить(175,"-");
	СписокСоответствийСимовлы.Добавить(176,"'");
	СписокСоответствийСимовлы.Добавить(180,"'");
	СписокСоответствийСимовлы.Добавить(183,"-");
	СписокСоответствийСимовлы.Добавить(185,"N");
	СписокСоответствийСимовлы.Добавить(187,">");
	СписокСоответствийСимовлы.Добавить(8218,",");
	СписокСоответствийСимовлы.Добавить(8222,"""");
	СписокСоответствийСимовлы.Добавить(8230,"...");
	СписокСоответствийСимовлы.Добавить(8265,"'");
	СписокСоответствийСимовлы.Добавить(8240,"%");
	СписокСоответствийСимовлы.Добавить(8249,"<");
	СписокСоответствийСимовлы.Добавить(8216,"'");
	СписокСоответствийСимовлы.Добавить(8217,"'");
	СписокСоответствийСимовлы.Добавить(8220,"""");
	СписокСоответствийСимовлы.Добавить(8221,"""");
	СписокСоответствийСимовлы.Добавить(8208,"-");
	СписокСоответствийСимовлы.Добавить(8209,"-");
	СписокСоответствийСимовлы.Добавить(8210,"-");
	СписокСоответствийСимовлы.Добавить(8211,"-");
	СписокСоответствийСимовлы.Добавить(8212,"-");
	СписокСоответствийСимовлы.Добавить(8213,"-");
	СписокСоответствийСимовлы.Добавить(732,"-");
	СписокСоответствийСимовлы.Добавить(8250,">");
	СписокСоответствийСимовлы.Добавить(8232," ");
	СписокСоответствийСимовлы.Добавить(8254,"-");
	СписокСоответствийСимовлы.Добавить(8226,"-");
	СписокСоответствийСимовлы.Добавить(8470,"N");
	СписокСоответствийСимовлы.Добавить(8219,"'");
	СписокСоответствийСимовлы.Добавить(8223,"""");
	СписокСоответствийСимовлы.Добавить(8228,".");
	СписокСоответствийСимовлы.Добавить(8231,"-");
	СписокСоответствийСимовлы.Добавить(8263,"-");
	СписокСоответствийСимовлы.Добавить(8259,"-");
	СписокСоответствийСимовлы.Добавить(8260,"/");
	СписокСоответствийСимовлы.Добавить(8962," ");
	

	РезультирующийТекст = "";
	// Общая длина текста
	ДлинаТекста = СтрДлина(Текст);
	// Транслитирируем
	Для Сч = 1 По ДлинаТекста Цикл
		// Получаем код текущего символа
		КодСимвола = КодСимвола(Текст, Сч);
		// Проверяем что текущий символ заглавная буква
		РусскаяЗаглавная = Ложь;
		Если (КодСимвола > 1039 И КодСимвола < 1072) ИЛИ (КодСимвола = 1025) Тогда
			РусскаяЗаглавная = Истина;
		КонецЕсли;
		Символ = Сред(Текст, Сч, 1);
		// Ищем в таблице соответствие
		Соответствие = СписокСоответствийТранслитерации.НайтиПоЗначению(Символ);
		// Если нашли
		Если НЕ (Соответствие = Неопределено) Тогда
			// Меняем символ
			Символ = Соответствие.Представление;
			Если РусскаяЗаглавная Тогда
				ПервыйСимвол = Сред(Символ, 1, 1);
				Символ = СтрЗаменить(Символ, ПервыйСимвол, ВРег(ПервыйСимвол));
			КонецЕсли;
		Иначе
			Соответствие = СписокСоответствийСимовлы.НайтиПоЗначению(КодСимвола);
			
			Если НЕ Соответствие = Неопределено Тогда
				Символ = Соответствие.Представление;
			Иначе
				// Остальные симоволы остаются без изменений 
				Если НЕ Найти(" !@#$%&'""()*+,-./0123456789:;<=>?ABCDEFGIKLMNJOPQRSTUVWXYZHabcdefgiklmnjopqrstuvwxyzh"
					+ Символы.ПС + Символы.Таб + Символы.ВК, Символ) Тогда
					Символ = "?"; // Меняем неизвестный символ на "?"
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		// Результат транслитерации
		РезультирующийТекст = РезультирующийТекст + Символ;
		
	КонецЦикла;
	
	Возврат РезультирующийТекст;
	
КонецФункции // ТранслитерацияТекста()	

// Удаляем не печатные символы
Функция УдалитьНеПечатныеСимволы(Знач Стр) Экспорт
	
	Результат = СтрЗаменить(Стр, Символы.НПП, " ");
	Результат = СтрЗаменить(Результат, Символы.ВТаб, " ");
	Результат = СтрЗаменить(Результат, Символы.Таб, " ");
	
	Возврат Результат;
	
КонецФункции

// Вставляет параметры в строку, учитывая, что в параметрах могут использоваться подстановочные слова %1, %2 и т.д.
Функция ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = Найти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл 
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = "";
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр =  Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр =  Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр =  Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр =  Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр =  Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр =  Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр =  Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр =  Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр =  Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = "" Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = Найти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  – Строка – шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   – текстовая строка с подставленными параметрами.
//
// Пример:
//  ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
//
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ИспользоватьАльтернативныйАлгоритм = 
		Найти(Параметр1, "%")
		Или Найти(Параметр2, "%")
		Или Найти(Параметр3, "%")
		Или Найти(Параметр4, "%")
		Или Найти(Параметр5, "%")
		Или Найти(Параметр6, "%")
		Или Найти(Параметр7, "%")
		Или Найти(Параметр8, "%")
		Или Найти(Параметр9, "%");
		
	Если ИспользоватьАльтернативныйАлгоритм Тогда
		СтрокаПодстановки = ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(СтрокаПодстановки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	Иначе
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	КонецЕсли;
	
	Возврат СтрокаПодстановки;
КонецФункции

// Функция для получения файла из сети Интернет.
//
// Параметры:
// URL - строка - url файла в формате: [Протокол://]<Сервер>/<Путь к файлу на сервере>
//
// НастройкаСоединения - Соответствие -
//		ЗащищенноеСоединение* - булево - соединение защищенное
//		ПассивноеСоединение*  - булево - соединение защищенное
//		Пользователь - строка - пользователь от имени которого установлено соединение
//		Пароль       - строка - пароль пользователя от которого установлено соединение
//		Порт         - число  - порт сервера с которым установлено соединение
//		* - взаимоисключающие ключи
//
// НастройкиПрокси - Соответствие:
//		ИспользоватьПрокси - использовать ли прокси-сервер
//		НеИспользоватьПроксиДляЛокальныхАдресов - использовать ли прокси-сервер для локальных адресов
//		ИспользоватьСистемныеНастройки - использовать ли системные настройки прокси-сервера
//		Сервер       - адрес прокси-сервера
//		Порт         - порт прокси-сервера
//		Пользователь - имя пользователя для авторизации на прокси-сервере
//		Пароль       - пароль пользователя
//
// НастройкаСохранения - соответствие - содержит параметры для сохранения скачанного файла
//		МестоХранения - строка - может содержать 
//			"Клиент" - клиент,
//			"Сервер" - сервер,
//			"ВременноеХранилище" - временное хранилище
//		Путь - строка (необязательный параметр) - путь к каталогу на клиенте либо на сервере, 
//			либо адрес во временном хранилище,  если не задано будет сгенерировано автоматически
//
// Возвращаемое значение:
// структура
// успех  - булево - успех или неудача операции
// строка - строка - в случае успеха либо строка-путь сохранения файла
//                   либо адрес во временном хранилище
//                   в случае неуспеха сообщение об ошибке
//
Функция ПолучитьФайлИзИнтернет(Знач URL, Знач НастройкаСохранения, Знач НастройкаСоединения = Неопределено,
	Знач НастройкиПрокси = Неопределено, Перенаправления = Неопределено)
	
	// Объявление переменных перед первым использованием в качестве
	// параметра метода Свойство, при анализе параметров получения файлов
	// из ПараметрыПолучения. Содержат значения переданных параметров получения файла
	Перем ИмяСервера, ИмяПользователя, Пароль, Порт,
	      ЗащищенноеСоединение,ПассивноеСоединение,
	      ПутьКФайлуНаСервере, Протокол;
	
	URLРазделенный = РазделитьURL(URL);
	
	ИмяСервера           = URLРазделенный.ИмяСервера;
	ПутьКФайлуНаСервере  = URLРазделенный.ПутьКФайлуНаСервере;
	Протокол             = URLРазделенный.Протокол;
	
	ЗащищенноеСоединение = Протокол = "https";
	ПассивноеСоединение  = НастройкаСоединения.Получить("ПассивноеСоединение");
	
	ИмяПользователя      = НастройкаСоединения.Получить("Пользователь");
	ПарольПользователя   = НастройкаСоединения.Получить("Пароль");
	Порт                 = НастройкаСоединения.Получить("Порт");
	Таймаут              = НастройкаСоединения.Получить("Таймаут");
	
	Если Протокол = "https" Тогда
		ЗащищенноеСоединение = Истина;
	КонецЕсли;
	
	Если Порт = Неопределено Тогда
		ПолнаяСтруктураURL = СтруктураURI(URL);
		
		Если НЕ ПустаяСтрока(ПолнаяСтруктураURL.Порт) Тогда
			ИмяСервера = ПолнаяСтруктураURL.Хост;
			Порт = ПолнаяСтруктураURL.Порт;
		КонецЕсли;
	КонецЕсли;
	
	НастройкиПрокси = ?(НастройкиПрокси = Неопределено, ПолучитьПустыеНастройкиПроксиСервера(), НастройкиПрокси);
	Прокси = СформироватьПрокси(НастройкиПрокси, Протокол);
	
	ПараметрыСоединения = Новый Массив;
	ПараметрыСоединения.Добавить(ИмяСервера);
	ПараметрыСоединения.Добавить(Порт);
	ПараметрыСоединения.Добавить(ИмяПользователя);
	ПараметрыСоединения.Добавить(ПарольПользователя);
	ПараметрыСоединения.Добавить(Прокси);
	
	Если Протокол = "ftp" Тогда
		
		ПараметрыСоединения.Добавить(ПассивноеСоединение);
		
		ПараметрыСоединения.Добавить(Таймаут);
		
		Попытка
			Соединение = Новый(Тип("FTPСоединение"), ПараметрыСоединения);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			СообщениеОбОшибке = НСтр("ru = 'Ошибка при создании FTP-соединения с сервером %1:'") + Символы.ПС + "%2";
			
			ЗаписатьОшибкуВЖурналРегистрации(ПодставитьПараметрыВСтроку(
				СообщениеОбОшибке, ИмяСервера, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
			СообщениеОбОшибке = ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ИмяСервера,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
			Возврат СформироватьРезультат(Ложь, СообщениеОбОшибке);
		КонецПопытки;
	Иначе
		
		ПараметрыСоединения.Добавить(Таймаут);
		
		Если ЗащищенноеСоединение = Истина Тогда
			ЗащищенноеСоединение = ЗначениеЗащищенногоСоединения();
		Иначе
			ЗащищенноеСоединение = Неопределено;
		КонецЕсли;
		ПараметрыСоединения.Добавить(ЗащищенноеСоединение);
		
		Попытка
			Соединение = Новый HTTPСоединение(ИмяСервера, Порт, ИмяПользователя, ПарольПользователя, Прокси, Таймаут, ЗащищенноеСоединение, Ложь);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			СообщениеОбОшибке = НСтр("ru = 'Ошибка при создании HTTP-соединения с сервером %1:'") + Символы.ПС + "%2";
			ЗаписатьОшибкуВЖурналРегистрации(
				ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ИмяСервера, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
			СообщениеОбОшибке = ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ИмяСервера, 
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
			Возврат СформироватьРезультат(Ложь, СообщениеОбОшибке);
		КонецПопытки;
	КонецЕсли;
	
	Если НастройкаСохранения["Путь"] <> Неопределено Тогда
		ПутьДляСохранения = НастройкаСохранения["Путь"];
	Иначе
		#Если НЕ ВебКлиент Тогда
			ПутьДляСохранения = ПолучитьИмяВременногоФайла();
		#КонецЕсли
	КонецЕсли;
	
	Попытка
		ОтветHTTP = Соединение.Получить(ПутьКФайлуНаСервере, ПутьДляСохранения);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		СообщениеОбОшибке = НСтр("ru = 'Ошибка при получении файла с сервера %1:'") + Символы.ПС + "%2";
		ЗаписатьОшибкуВЖурналРегистрации(
			ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ИмяСервера, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
		СообщениеОбОшибке = ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ИмяСервера, 
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		Возврат СформироватьРезультат(Ложь, СообщениеОбОшибке);
	КонецПопытки;
	
	Попытка
		Если ОтветHTTP.КодСостояния = 301 // 301 Moved Permanently
			Или ОтветHTTP.КодСостояния = 302 // 302 Found, 302 Moved Temporarily
			Или ОтветHTTP.КодСостояния = 303 // 303 See Other by GET
			Или ОтветHTTP.КодСостояния = 307 // 307 Temporary Redirect
			Или ОтветHTTP.КодСостояния = 308 Тогда // 308 Permanent Redirect

				Если Перенаправления.Количество() > 7 Тогда
					ВызватьИсключение "Превышено количество перенаправлений.";
				Иначе 
					
					НовыйURL = ОтветHTTP.Заголовки["Location"];
					
					Если НовыйURL = Неопределено Тогда 
						ВызватьИсключение "Некорректное перенаправление, отсутствует HTTP-заголовок ответа ""Location""";
					КонецЕсли;
					
					НовыйURL = СокрЛП(НовыйURL);
					
					Если ПустаяСтрока(НовыйURL) Тогда
						ВызватьИсключение "Некорректное перенаправление, пустой HTTP-заголовок ответа ""Location""";
					КонецЕсли;
					
					Если Перенаправления.Найти(НовыйURL) <> Неопределено Тогда
						ВызватьИсключение "Циклическое перенаправление. Попытка перейти на " + НовыйURL + " уже выполнялась ранее.";
					КонецЕсли;
					
					Перенаправления.Добавить(URL);
					
					Если Не _СтрНачинаетсяС(НовыйURL, "http") Тогда
						// <схема>://<хост>:<порт>/<путь>
						НовыйURL = 	Протокол + "://" + ИмяСервера + ":" + Формат(Порт, "ЧГ=") + "/" + НовыйURL;
					КонецЕсли;
					
					Возврат ПолучитьФайлИзИнтернет(НовыйURL, НастройкаСохранения, НастройкаСоединения,
						НастройкиПрокси, Перенаправления);
					
				КонецЕсли;
					
			КонецЕсли;
			
	Исключение
	    //ОписаниеОшибки()
	КонецПопытки;
	
	// Если сохраняем файл в соответствии с настройкой 
	Если НастройкаСохранения["МестоХранения"] = "ВременноеХранилище" Тогда
		КлючУникальности = Новый УникальныйИдентификатор;
		Адрес = ПоместитьВоВременноеХранилище (Новый ДвоичныеДанные(ПутьДляСохранения), КлючУникальности);
		Возврат СформироватьРезультат(Истина, Адрес);
	ИначеЕсли НастройкаСохранения["МестоХранения"] = "Клиент"
	      ИЛИ НастройкаСохранения["МестоХранения"] = "Сервер" Тогда
		Возврат СформироватьРезультат(Истина, ПутьДляСохранения);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция формирует прокси по настройкам прокси (передаваемому параметру)
//
// Параметры:
// 
// НастройкаПроксиСервера - Соответствие:
//		ИспользоватьПрокси - использовать ли прокси-сервер
//		НеИспользоватьПроксиДляЛокальныхАдресов - использовать ли прокси-сервер для локальных адресов
//		ИспользоватьСистемныеНастройки - использовать ли системные настройки прокси-сервера
//		Сервер       - адрес прокси-сервера
//		Порт         - порт прокси-сервера
//		Пользователь - имя пользователя для авторизации на прокси-сервере
//		Пароль       - пароль пользователя
// Протокол - строка - протокол для которого устанавливаются параметры прокси сервера, например "http", "https", "ftp"
// 
Функция СформироватьПрокси(НастройкаПроксиСервера, Протокол)
	
	Если НастройкаПроксиСервера <> Неопределено Тогда
		ИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
		ИспользоватьСистемныеНастройки = НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки");
		Если ИспользоватьПрокси Тогда
			Если ИспользоватьСистемныеНастройки Тогда
				// Системные настройки прокси-сервера
				Прокси = Новый ИнтернетПрокси(Истина);
			Иначе
				
				// Настройки прокси-сервера, заданные вручную
				Прокси = Новый ИнтернетПрокси;
				
				// Определение адреса и порта прокси-сервера
				ДополнительныеНастройки = НастройкаПроксиСервера.Получить("ДополнительныеНастройкиПрокси");
				ПроксиПоПротоколу = Неопределено;
				Если ТипЗнч(ДополнительныеНастройки) = Тип("Соответствие") Тогда
					ПроксиПоПротоколу = ДополнительныеНастройки.Получить(Протокол);
				КонецЕсли;
				
				Если ТипЗнч(ПроксиПоПротоколу) = Тип("Структура") Тогда
					Прокси.Установить(Протокол, ПроксиПоПротоколу.Адрес, ПроксиПоПротоколу.Порт);
				Иначе
					Прокси.Установить(Протокол, НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"]);
				КонецЕсли;
				
				Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
				Прокси.Пользователь = НастройкаПроксиСервера["Пользователь"];
				Прокси.Пароль       = НастройкаПроксиСервера["Пароль"];
				
				АдресаИсключений = НастройкаПроксиСервера.Получить("НеИспользоватьПроксиДляАдресов");
				Если ТипЗнч(АдресаИсключений) = Тип("Массив") Тогда
					Для каждого АдресИсключения Из АдресаИсключений Цикл
						Прокси.НеИспользоватьПроксиДляАдресов.Добавить(АдресИсключения);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			// Не использовать прокси-сервер
			Прокси = Новый ИнтернетПрокси(Ложь);
		КонецЕсли;
	Иначе
		// Системные установки прокси-сервера
		Прокси = Неопределено;
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

// Функция, заполняющая структуру по параметрам.
//
// Параметры:
// УспехОперации - булево - успех или неуспех операции
// СообщениеПуть - строка - 
//
// Возвращаемое значение - структура:
//          поле успех - булево
//          поле путь  - строка
//
Функция СформироватьРезультат(Знач Статус, Знач СообщениеПуть)
	
	Результат = Новый Структура("Статус");
	
	Результат.Статус = Статус;

	Если Статус Тогда
		Результат.Вставить("Путь", СообщениеПуть);
	Иначе
		Результат.Вставить("СообщениеОбОшибке", СообщениеПуть);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Записывает событие-ошибку в журнал регистрации. Имя события
// "Получение файлов из Интернета".
// Параметры
//   СообщениеОбОшибке - строка сообщение об ошибке
// 
Процедура ЗаписатьОшибкуВЖурналРегистрации(Знач СообщениеОбОшибке) Экспорт
	
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка, , ,
		СообщениеОбОшибке);
#КонецЕсли
	
КонецПроцедуры

Функция СобытиеЖурналаРегистрации()
	
	Возврат "Получение файлов из Интернета";
	
КонецФункции

// Функция для получения файла из сети Интернет.
//
// Параметры:
// URL           - строка - url файла в формате:
//                 [Протокол://]<Сервер>/<Путь к файлу на сервере>
// Пользователь  - строка - пользователь от имени которого установлено соединение
// Пароль        - строка - пароль пользователя от которого установлено соединение
// Порт          - число  - порт сервера с которым установлено соединение
// ЗащищенноеПассивноеСоединение
//
// НастройкаСохранения - соответствие - содержит параметры для сохранения скачанного файла
//                 ключи:
//                 МестоХранения - строка - может содержать 
//                        "Клиент" - клиент,
//                        "Сервер" - сервер,
//                        "ВременноеХранилище" - временное хранилище
//                 Путь - строка (необязательный параметр) - 
//                        путь к каталогу на клиенте либо на сервере либо адрес во временном хранилище
//                        если не задано будет сгенерировано автоматически
//
// Возвращаемое значение:
// структура
// успех  - булево - успех или неудача операции
// строка - строка - в случае успеха либо строка-путь сохранения файла
//                   либо адрес во временном хранилище
//                   в случае неуспеха сообщение об ошибке
//
Функция ПодготовитьПолучениеФайла(Знач URL, Знач Пользователь = Неопределено, Знач Пароль = Неопределено,
	Знач Порт = Неопределено, Знач Таймаут, Знач ЗащищенноеСоединение = Ложь, Знач ПассивноеСоединение = Ложь, 
	Знач НастройкаСохранения) Экспорт
	
	НастройкаСоединения = Новый Соответствие;
	НастройкаСоединения.Вставить("Пользователь", Пользователь);
	НастройкаСоединения.Вставить("Пароль",       Пароль);
	НастройкаСоединения.Вставить("Порт",         Порт);
	НастройкаСоединения.Вставить("Таймаут",      Таймаут);
	
	Протокол = РазделитьURL(URL).Протокол;
	
	Если Протокол = "ftp" Тогда
		НастройкаСоединения.Вставить("ПассивноеСоединение", ПассивноеСоединение);
	Иначе
		НастройкаСоединения.Вставить("ЗащищенноеСоединение", ЗащищенноеСоединение);
	КонецЕсли;
	
	Попытка
	#Если Клиент Тогда
		НастройкаПроксиСервера = Вычислить("СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиПроксиСервера");
	#Иначе
		НастройкаПроксиСервера = Вычислить("ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере()");
	#КонецЕсли
	Исключение
		НастройкаПроксиСервера = Неопределено;
	КонецПопытки;
	
	Если НастройкаПроксиСервера = Неопределено
		ИЛИ НастройкаПроксиСервера.Получить("ИспользоватьПрокси") <> Истина Тогда
		НастройкаПроксиСервера = ПолучитьПустыеНастройкиПроксиСервера();
	КонецЕсли;
	
	Перенаправления = Новый Массив;
	
	Результат = ПолучитьФайлИзИнтернет(URL, НастройкаСохранения, НастройкаСоединения, НастройкаПроксиСервера, Перенаправления);
	
	Возврат Результат;
	
КонецФункции

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые строки;
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  РазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//  РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, 
	СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//////////////////////////////////////////////////////////////
// РАБОТА СО СТРОКАМИ

Функция НаправлениеПоискСНачала() Экспорт
	
	Возврат "СНачала";
	
КонецФункции

Функция НаправлениеПоискаСКонца() Экспорт
	
	Возврат "СКонца";
	
КонецФункции

Функция _СтрНайти(Знач Строка, Знач СтрокаПоиска, Знач НаправлениеПоискаСтроки = Неопределено, 
	Знач НачальнаяПозиция = 1, Знач НомерВхождения = 1) Экспорт
	
	Если НаправлениеПоискаСтроки = Неопределено Тогда
		НаправлениеПоискаСтроки = НаправлениеПоискСНачала();
	КонецЕсли;	
	Если НаправлениеПоискаСтроки <> НаправлениеПоискСНачала() 
		И НаправлениеПоискаСтроки <> НаправлениеПоискаСКонца() Тогда
		ВызватьИсключение "Неверное значение параметра";
	КонецЕсли;
	
	ИсходнаяДлинаСтроки = СтрДлина(Строка);
	ИсходнаяДлинаСтрокиПоиска = СтрДлина(СтрокаПоиска);
			
	Если НачальнаяПозиция = 0 ИЛИ НомерВхождения = 0  Тогда		
		Возврат 0;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПоиска) Тогда
		ИсходнаяСтрокаБезБоковыхПробелов = СокрЛП(Строка);
		Если СтрДлина(ИсходнаяСтрокаБезБоковыхПробелов) = 0 Тогда
			Возврат 1;
		КонецЕсли;
	КонецЕсли; 
	
	Если НаправлениеПоискаСтроки = НаправлениеПоискаСКонца() Тогда
		Строка = СтрокаЗадомНаперед(Строка); 
		СтрокаПоиска = СтрокаЗадомНаперед(СтрокаПоиска); 
	КонецЕсли;
	
	Если НачальнаяПозиция = 1 Тогда
		ДлинаПройденнойЧастиСтроки = 0;
		НеобработаннаяСтрока = Строка;
	Иначе
		ДлинаПройденнойЧастиСтроки = НачальнаяПозиция - 1;
		НеобработаннаяСтрока = Прав(Строка, ИсходнаяДлинаСтроки - НачальнаяПозиция + 1);
	КонецЕсли;
	
	Если НомерВхождения > СтрЧислоВхождений(НеобработаннаяСтрока, СтрокаПоиска) Тогда
		Возврат 0;	
	КонецЕсли; 
	
	НомерНайденногоВхождения = 0;
	Пока НомерНайденногоВхождения < НомерВхождения Цикл
		
		ИндексВхождения = Найти(НеобработаннаяСтрока, СтрокаПоиска);		
		ДлинаПройденнойЧастиСтроки = ДлинаПройденнойЧастиСтроки 
			+ СтрДлина(Лев(НеобработаннаяСтрока, ИндексВхождения + ИсходнаяДлинаСтрокиПоиска - 1));		
		НеобработаннаяСтрока = Прав(НеобработаннаяСтрока, СтрДлина(НеобработаннаяСтрока) 
			- (ИндексВхождения + ИсходнаяДлинаСтрокиПоиска - 1));
		
		НомерНайденногоВхождения = НомерНайденногоВхождения + 1;
		
	КонецЦикла;	
	
	РезультатПоиска = 0;	
	Если НаправлениеПоискаСтроки = НаправлениеПоискаСКонца() Тогда
		РезультатПоиска = ИсходнаяДлинаСтроки 
			- ДлинаПройденнойЧастиСтроки 
			+ ИсходнаяДлинаСтрокиПоиска;
	Иначе	
		РезультатПоиска = ДлинаПройденнойЧастиСтроки + 1 
			- ИсходнаяДлинаСтрокиПоиска;
	КонецЕсли;
	
	Возврат РезультатПоиска;
	
КонецФункции

Функция _СтрСравнить(Знач Строка1, Знач Строка2) Экспорт
	
	Сравнение = Новый СравнениеЗначений;
	РезультатСравнения = Сравнение.Сравнить(Строка1, Строка2);
	
	Возврат РезультатСравнения;

КонецФункции

Функция _СтрНачинаетсяС(Знач Строка, Знач СтрокаПоиска) Экспорт
	
	ИндексВхожденияСтроки = Найти(Строка, СтрокаПоиска);
	
	Возврат (ИндексВхожденияСтроки = 1);
	
КонецФункции

Функция _СтрЗаканчиваетсяНа(Знач Строка, Знач СтрокаПоиска) Экспорт
	
	ДлинаИсходнойСтрокиПоиска = СтрДлина(СтрокаПоиска);
	КонецСтрокиДляСравнения = Прав(Строка, ДлинаИсходнойСтрокиПоиска);
	
	Возврат (СтрокаПоиска = КонецСтрокиДляСравнения);
	
КонецФункции

Функция _СтрРазделить(Знач Строка, Знач Разделитель, Знач ВключатьПустые = Истина) Экспорт
	
	МассивПодстрок = Новый Массив;
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(
		Строка, 
		Разделитель,
		НЕ ВключатьПустые);
		
	Для Каждого Стр Из МассивСтрок Цикл					
		МассивПодстрок.Добавить(Стр);		
	КонецЦикла;
	
	Возврат МассивПодстрок;
	
КонецФункции

Функция _СтрШаблон(Знач СтрокаШаблона, 
		Знач Параметр1 = Неопределено, 
		Знач Параметр2 = Неопределено, 
		Знач Параметр3 = Неопределено, 
		Знач Параметр4 = Неопределено,
		Знач Параметр5 = Неопределено,
		Знач Параметр6 = Неопределено,
		Знач Параметр7 = Неопределено,
		Знач Параметр8 = Неопределено,
		Знач Параметр9 = Неопределено,
		Знач Параметр10 = Неопределено) Экспорт
		
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Параметр1);
	МассивПараметров.Добавить(Параметр2);
	МассивПараметров.Добавить(Параметр3);
	МассивПараметров.Добавить(Параметр4);
	МассивПараметров.Добавить(Параметр5);
	МассивПараметров.Добавить(Параметр6);
	МассивПараметров.Добавить(Параметр7);
	МассивПараметров.Добавить(Параметр8);
	МассивПараметров.Добавить(Параметр9);
	МассивПараметров.Добавить(Параметр10);
	
	КоличествоПараметров = МассивПараметров.Количество();
	Для НомерПараметра = 1 По КоличествоПараметров Цикл
		
		ИндексПараметра = НомерПараметра - 1;
		ЗначениеПараметра = МассивПараметров[ИндексПараметра];
		
		Если НЕ ЗначениеПараметра = Неопределено Тогда
			
			СтрокаПодстановки = "%" + XMLСтрока(НомерПараметра);
			СтрокаШаблона = СтрЗаменить(СтрокаШаблона, СтрокаПодстановки, ЗначениеПараметра);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрокаШаблона;
	
КонецФункции

Функция СтрокаЗадомНаперед(Знач Строка) Экспорт
	
	Результат = "";
	
	ДлинаСтроки = СтрДлина(Строка); 		
	Для Счетчик = 0 По ДлинаСтроки - 1 Цикл			
		
		Индекс = ДлинаСтроки - Счетчик;			
		Символ = Сред(Строка, Индекс, 1);
		
		Результат = Результат + Символ;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////
// БЛОК ОТКРЫТИЕ В БРАУЗЕРЕ (Тарифы, Баланс, Регистрация и т.п.)
/////////////////////////////////////////////////////////////////////////////

Функция СервисыТарифы() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("sms.ru"		, "http://sys1c.sms.ru/?panel=price");
	Список.Добавить("sms4b.ru"		, "http://www.sms4b.ru/prices/");
	Список.Добавить("smsc.ru"		, "http://smsc.ru/tariffs/#tf");
	Список.Добавить("p1sms.ru"		, "http://p1sms.ru/price.php");
	Список.Добавить("smsgorod.ru"	, "http://smsgorod.ru/price.pdf");
	Список.Добавить("sigmasms.ru"	, "https://sigmasms.ru/tarify/");
	Список.Добавить("terasms.ru"	, "http://www.terasms.ru/cooperation/stoimost.html");
	Список.Добавить("sms-prosto.ru"	, "https://sms-prosto.ru/tseny/?utm_source=softonit&utm_medium=cpc&utm_campaign=multisms");
	
	Возврат Список;
	
КонецФункции

Функция СервисыРегистрация() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("sms.ru"		, "https://sys1c.sms.ru/?panel=register");
	Список.Добавить("sms4b.ru"		, "https://www.sms4b.ru/regform.php?code=softonit");
	Список.Добавить("smsc.ru"		, "http://www.smsc.ru/reg/?ppsoftonit");
	Список.Добавить("p1sms.ru"		, "https://admin.p1sms.ru/ru-ru/registration.html");
	Список.Добавить("smsgorod.ru"	, "https://new.smsgorod.ru/ru-ru/registration.html");
	Список.Добавить("sigmasms.ru"	, "http://go.sigmasms.ru/public/register/");
	Список.Добавить("terasms.ru"	, "https://terasms.ru");
	Список.Добавить("sms-prosto.ru"	, "https://lk.sms-prosto.ru/reg.php?code=1c&utm_source=softonit&utm_medium=cpc&utm_campaign=multisms");
	
	Возврат Список;
	
КонецФункции

Функция СервисыЗабылиПароль() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("sms.ru"		, "https://sys1c.sms.ru/?panel=login-forgot");
	Список.Добавить("sms4b.ru"		, "https://www.sms4b.ru/office/?forgot_password=yes&code=softonit");
	Список.Добавить("smsc.ru"		, "http://smsc.ru/login/forgot/?ppsoftonit");
	Список.Добавить("p1sms.ru"		, "https://admin.p1sms.ru/ru-ru/restore.html");
	Список.Добавить("smsgorod.ru"	, "https://new.smsgorod.ru/ru-ru/restore.html");
	Список.Добавить("sigmasms.ru"	, "http://go.sigmasms.ru/index.php#");
	Список.Добавить("terasms.ru"	, "https://auth.terasms.ru/main/login/remember/"); 
	Список.Добавить("sms-prosto.ru"	, "https://lk.sms-prosto.ru/reg.php?code=1c&utm_source=softonit&utm_medium=cpc&utm_campaign=multisms");
	
	Возврат Список;
	
КонецФункции

Функция СервисыСогласовать() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("sms.ru"		, "https://sys1c.sms.ru/?panel=senders");
	Список.Добавить("sms4b.ru"		, "https://www.sms4b.ru/office/settings/names.php?code=softonit");
	Список.Добавить("smsc.ru"		, "http://smsc.ru/senders/?ppsoftonit");
	Список.Добавить("p1sms.ru"		, "https://admin.p1sms.ru/panel/deliveries/create");
	Список.Добавить("smsgorod.ru"	, "https://new.smsgorod.ru/panel/deliveries/create");
	Список.Добавить("sigmasms.ru"	, "http://cab.sigma-sms.ru/senders/");
	Список.Добавить("terasms.ru"	, "https://auth.terasms.ru/preferences/namesend/");
	Список.Добавить("sms-prosto.ru"	, "https://lk.sms-prosto.ru/sender_names.php?utm_source=softonit&utm_medium=cpc&utm_campaign=multisms");
	
	Возврат Список;
	
КонецФункции

Функция СервисыПополнитьБаланс() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("sms.ru"		, "https://sys1c.sms.ru/pay.php");
	Список.Добавить("sms4b.ru"		, "https://www.sms4b.ru/office/buysms.php?code=softonit");
	Список.Добавить("smsc.ru"		, "http://smsc.ru/pay/?ppsoftonit");
	Список.Добавить("p1sms.ru"		, "http://admin.p1sms.ru/panel/balance");
	Список.Добавить("smsgorod.ru"	, "https://new.smsgorod.ru/panel/balance");
	Список.Добавить("sigmasms.ru"	, "http://cab.sigma-sms.ru/money/");
	Список.Добавить("terasms.ru"	, "https://auth.terasms.ru/cfinances/bookkeeping/");
	Список.Добавить("sms-prosto.ru"	, "https://lk.sms-prosto.ru/bill.php?utm_source=softonit&utm_medium=cpc&utm_campaign=multisms");

	Возврат Список;
	
КонецФункции

Функция СервисыКлючAPI() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("smsgorod.ru"	, "https://new.smsgorod.ru/panel/api/emulator");
	Список.Добавить("p1sms.ru"	, "https://admin.p1sms.ru/panel/api/emulator");
	Список.Добавить("sms-prosto.ru" , "mailto:support@sms-prosto.ru?subject=API- ключ для подключения 1С&utm_source=softonit&utm_medium=cpc&utm_campaign=multisms"); 
	
	Возврат Список;
	
КонецФункции

Функция СервисыКаналыОтправки() Экспорт
	
	Список = Новый СписокЗначений;
	
	КаналыТолькоSMS = Новый СписокЗначений;
	КаналыТолькоSMS.Добавить("SMS");

	Список.Добавить(КаналыТолькоSMS, "sms.ru");
	Список.Добавить(КаналыТолькоSMS, "sms4b.ru");
	Список.Добавить(КаналыТолькоSMS, "sigmasms.ru");
	Список.Добавить(КаналыТолькоSMS, "terasms.ru");
	Список.Добавить(КаналыТолькоSMS, "sms-prosto.ru");
	
	КаналыSMSC = Новый СписокЗначений;
	КаналыSMSC.Добавить("SMS");
	Список.Добавить(КаналыSMSC, "smsc.ru");
	
	КаналыSMSGorod = Новый СписокЗначений;
	КаналыSMSGorod.Добавить("SMS буквенный (прямые подключения)");
	КаналыSMSGorod.Добавить("SMS цифра (дешевый, но не стабильный)");	
	Список.Добавить(КаналыSMSGorod, "smsgorod.ru");
	
	КаналыSMSGorod = Новый СписокЗначений;
	КаналыSMSGorod.Добавить("SMS буквенный (прямые подключения)");
	КаналыSMSGorod.Добавить("SMS цифра (дешевый, но не стабильный)");	
	Список.Добавить(КаналыSMSGorod, "p1sms.ru");
	
	Возврат Список;
	
КонецФункции

Функция ПервыйКаналОтправкиСервиса(Сервис) Экспорт
	
	Список = СервисыКаналыОтправки();
	Для Каждого Элемент Из Список Цикл
		
		Если НРег(Элемент.Представление) = НРег(Сервис) Тогда
			
			Возврат Элемент.Значение[0];
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

Функция КаналыОтправкиСервиса(Сервис) Экспорт
	
	Список = СервисыКаналыОтправки();
	Для Каждого Элемент Из Список Цикл
		
		Если НРег(Элемент.Представление) = НРег(Сервис) Тогда
						
			Возврат Элемент.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый СписокЗначений;
	
КонецФункции

// Главная функция. Получает ссылку для открытия в браузере для данного сервиса по данной строке
Функция ПолучитьСсылкуСервиса(Сервис, Значение) Экспорт
	
	Список = Вычислить("Сервисы" + Значение + "()");
	НайденноеЗначение = Список.НайтиПоЗначению(Сервис);
	Возврат ?(НайденноеЗначение <> Неопределено, НайденноеЗначение.Представление, Неопределено);
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////
// БЛОК SMS
/////////////////////////////////////////////////////////////////////////////

Функция ПрочитатьАдрес(Сервер, РесурсНаСервере, _Параметры) Экспорт
	
	Перем Рез;	 
	
	Прокси = Неопределено;
	Если ИспользоватьПрокси Тогда
        Прокси											= Новый ИнтернетПрокси;
        Прокси.НеИспользоватьПроксиДляЛокальныхАдресов	= Истина;
        Прокси.Пользователь								= ПроксиЛогин; 
        Прокси.Пароль									= ПроксиПароль; 
		Прокси.Установить("http" + ?(ИспользуемыйПротокол = 1, "s", ""), ПроксиАдрес, ПроксиПорт);
	КонецЕсли;
	
	СоединениеУстановлено = Ложь;
	Попытка		
        Соединение = Новый HTTPСоединение(Сервер, , , , Прокси, , ?(ИспользуемыйПротокол = 1, ЗначениеЗащищенногоСоединения(), Неопределено));
		СоединениеУстановлено = Истина;
	Исключение
	КонецПопытки;
	
	// Для старых платформ
	Попытка		
		Если СоединениеУстановлено = Ложь Тогда 
        	Соединение = Новый HTTPСоединение(Сервер, , , , Прокси, ?(ИспользуемыйПротокол = 1, ЗначениеЗащищенногоСоединения(), Неопределено));
			СоединениеУстановлено = Истина;
		КонецЕсли;
	Исключение
	    Сообщить("Не удалось установить соединение с сервером:" 
	        + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
	    Возврат "";		
	КонецПопытки;

	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла();
	
	РесурсПараметры = РесурсНаСервере + "?" + _Параметры;
	Если СтрДлина(РесурсПараметры) < 2000 Тогда // GET 
		
		Попытка
			Соединение.Получить(РесурсПараметры, ИмяФайлаРезультата);
			Соединение = Неопределено;
		Исключение 
			Сообщить("Не удалось получить данные с сервера", СтатусСообщения.Важное);
			Возврат "";
		КонецПопытки;
			
	Иначе // POST	
		
		//Создаём файл отправки - содержимое POST-запроса. 
		ИмяФайлаОтправки = ПолучитьИмяВременногоФайла();
		ФайлОтправки = Новый ЗаписьТекста(ИмяФайлаОтправки, КодировкаТекста.ANSI, Символы.ПС, ЛОЖЬ);
		ФайлОтправки.ЗаписатьСтроку(_Параметры); 
		ФайлОтправки.Закрыть(); 

		//Формируем заголовок POST-запроса.
	    ЗаголовокHTTP = Новый Соответствие();
	    ЗаголовокHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
	    ФайлОтправки = Новый Файл(ИмяФайлаОтправки); 
	    РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер()); 
		ЗаголовокHTTP.Вставить("Content-Length", Строка(РазмерФайлаОтправки)); 

		Попытка
	 		Соединение.ОтправитьДляОбработки(ИмяФайлаОтправки, РесурсНаСервере, ИмяФайлаРезультата, ЗаголовокHTTP);
			Соединение = Неопределено;
		Исключение 
			Сообщить("Не удалось получить данные с сервера:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
			Возврат "";
		КонецПопытки;
		
		УдалитьФайлы(ИмяФайлаОтправки);
		
	КонецЕсли;	
		
	ФайлРезультата	= Новый ЧтениеТекста(ИмяФайлаРезультата,КодировкаТекста.UTF8);
	Рез				= ФайлРезультата.Прочитать();
	ФайлРезультата.Закрыть();
		
	УдалитьФайлы(ИмяФайлаРезультата);
	
	Возврат Рез;
	
КонецФункции // ПрочитатьАдрес()

Функция ОтправитьXML(Сервер, РесурсНаСервере, XML, _Параметры = "") Экспорт
	
	Перем Рез;	 
	
	Прокси = Неопределено;
	Если ИспользоватьПрокси Тогда
        Прокси											= Новый ИнтернетПрокси;
        Прокси.НеИспользоватьПроксиДляЛокальныхАдресов	= Истина;
        Прокси.Пользователь								= ПроксиЛогин; 
        Прокси.Пароль									= ПроксиПароль; 
		Прокси.Установить("http" + ?(ИспользуемыйПротокол = 1, "s", ""), ПроксиАдрес, ПроксиПорт);
	КонецЕсли;
	
	Попытка
        Соединение = Новый HTTPСоединение(Сервер, , , , Прокси, ?(ИспользуемыйПротокол = 1, ЗначениеЗащищенногоСоединения(), Ложь));
	Исключение
	    Сообщить("Не удалось установить соединение с сервером:" 
	        + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
	    Возврат "";
	КонецПопытки;

	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла(".xml");
	
	//Создаём файл отправки - содержимое POST-запроса. 
	ИмяФайлаОтправки = ПолучитьИмяВременногоФайла(".xml");
	ФайлОтправки = Новый ЗаписьТекста(ИмяФайлаОтправки, КодировкаТекста.UTF8, Символы.ПС, ЛОЖЬ);
	ФайлОтправки.ЗаписатьСтроку(XML); 
	ФайлОтправки.Закрыть(); 

	//Формируем заголовок POST-запроса.
    Заголовки = Новый Соответствие();
    Заголовки.Вставить("Content-Type", "text/xml;charset=utf-8");
    ФайлОтправки = Новый Файл(ИмяФайлаОтправки); 
    РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер()); 
	Заголовки.Вставить("Content-Length", Строка(РазмерФайлаОтправки)); 

	Попытка
 		Соединение.ОтправитьДляОбработки(ИмяФайлаОтправки, РесурсНаСервере, ИмяФайлаРезультата, Заголовки);
		Соединение = Неопределено;
	Исключение 
		Сообщить("Не удалось получить данные с сервера:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат "";
	КонецПопытки;
	
	УдалитьФайлы(ИмяФайлаОтправки);
	
	Возврат ИмяФайлаРезультата;	
	
КонецФункции // 

Функция УдалитьНедопустимыеСимволыXML(СтрокаХМЛ)
	
	Стр  = СтрокаХМЛ;
	
	Стр = СтрЗаменить(Стр, "®", "&reg;");
	Стр = СтрЗаменить(Стр, "™", "&trade;");
	Стр = СтрЗаменить(Стр, "?", "&euro;");
	Стр = СтрЗаменить(Стр, "„", "&bdquo;");
	Стр = СтрЗаменить(Стр, "“", "&ldquo;");
	Стр = СтрЗаменить(Стр, "«", "&laquo;");
	Стр = СтрЗаменить(Стр, "»", "&raquo;");
	Стр = СтрЗаменить(Стр, ">", "&gt;");
	Стр = СтрЗаменить(Стр, "<", "&lt;");
	Стр = СтрЗаменить(Стр, "≥", "&ge;");
	Стр = СтрЗаменить(Стр, "≤", "&le;");
	Стр = СтрЗаменить(Стр, "≈", "&asymp;");
	Стр = СтрЗаменить(Стр, "≠", "&ne;");
	Стр = СтрЗаменить(Стр, "≡", "&equiv;");
	Стр = СтрЗаменить(Стр, "§", "&sect;");
	Стр = СтрЗаменить(Стр, "&", "&amp;");

	Позиция = НайтиНедопустимыеСимволыXML(Стр);
	Пока Позиция <> 0 Цикл
		НедопустимыйСимвол = Сред(Стр, Позиция, 1);
		Стр = СтрЗаменить(Стр, НедопустимыйСимвол, "");
		Позиция = НайтиНедопустимыеСимволыXML(Стр);
	КонецЦикла; 
	
	Возврат Стр;

КонецФункции

// Выбрасывает из строки все лишнее
Функция ПолучитьПриведенныйНомер(Номер) Экспорт
	
	Результат = "";
	Для Индекс = 1 По СтрДлина(Номер) Цикл
		Если Найти("0123456789", Сред(Номер, Индекс, 1)) > 0 Тогда
			Результат = Результат + Сред(Номер, Индекс, 1);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСписокПривденныхНомеров(Телефоны) Экспорт
	
	// Получаем список телефонов
	СЗ = Новый СписокЗначений;
	Номер = "";
	Для Индекс = 1 По СтрДлина(Телефоны) Цикл
		Символ = Сред(Телефоны, Индекс, 1);
		Если Найти("+-() 0123456789", Символ) > 0 Тогда
			Номер = Номер + Сред(Телефоны, Индекс, 1);
		Иначе					
			Если Символ = ";" ИЛИ Символ = "," Тогда
				ПриведенныйНомер = ПолучитьПриведенныйНомер(Номер);						
				Если Лев(ПриведенныйНомер, 2) = "89" Тогда
					СЗ.Добавить(СокрЛП(ПриведенныйНомер));
				ИначеЕсли Лев(ПриведенныйНомер, 1) = "9" Тогда
					СЗ.Добавить("8" + СокрЛП(ПриведенныйНомер));
				ИначеЕсли Лев(ПриведенныйНомер, 2) = "79" Тогда
					СЗ.Добавить("8" + Сред(СокрЛП(ПриведенныйНомер), 2));
				КонецЕсли;
				Номер = "";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если СтрДлина(Номер) >= 10 Тогда
		ПриведенныйНомер = ПолучитьПриведенныйНомер(Номер);						
		Если Лев(ПриведенныйНомер, 2) = "89" Тогда
			СЗ.Добавить(СокрЛП(ПриведенныйНомер));
		ИначеЕсли Лев(ПриведенныйНомер, 1) = "9" Тогда
			СЗ.Добавить("8" + СокрЛП(ПриведенныйНомер));
		ИначеЕсли Лев(ПриведенныйНомер, 2) = "79" Тогда
			СЗ.Добавить("8" + Сред(СокрЛП(ПриведенныйНомер), 2));
		КонецЕсли;
	КонецЕсли;
	
	Возврат СЗ;
	
КонецФункции

// Возвращает имя конфигурации
Функция ИмяКонфигурации() Экспорт
	
	Возврат Метаданные.Имя;
	
КонецФункции

// Удаляет из строки указанное количество символов справа.
//
// Параметры:
//  Текст         - Строка - строка, в которой необходимо удалить последние символы;
//  ЧислоСимволов - Число  - количество удаляемых символов.
//
Процедура УдалитьПоследнийСимволВСтроке(Текст, ЧислоСимволов = 1) Экспорт
	
	Текст = Лев(Текст, СтрДлина(Текст) - ЧислоСимволов);
	
КонецПроцедуры

// Функция раскладывает ФИО в структуру
//
// Параметры:
//		ФИО - строка - наименование
//
// Возвращаемое значение:
//		СтруктураФИО - Структура с полями: Фамилия, Имя, Отчество
//
Функция ФамилияИмяОтчество(Знач ФИО) Экспорт
	
	СтруктураФИО = Новый Структура("Фамилия, Имя, Отчество");
	
	МассивПодстрок = РазложитьСтрокуВМассивПодстрок(ФИО, " ");
	
	Если МассивПодстрок.Количество() > 0 Тогда
		СтруктураФИО.Вставить("Фамилия", МассивПодстрок[0]);
		Если МассивПодстрок.Количество() > 1 Тогда
			СтруктураФИО.Вставить("Имя", МассивПодстрок[1]);
		КонецЕсли;
		Если МассивПодстрок.Количество() > 2 Тогда
			Отчество = "";
			Для Шаг = 2 По МассивПодстрок.Количество()-1 Цикл
				Отчество = Отчество + МассивПодстрок[Шаг] + " ";
			КонецЦикла;
			УдалитьПоследнийСимволВСтроке(Отчество, 1);
			СтруктураФИО.Вставить("Отчество", Отчество);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураФИО;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////
// SIGMASMS.RU

Функция _SIGMASMSRU_ПослатьXML(Команда, XML) Экспорт

	Сервер = "adm.sigma-sms.ru";
	
	Рез = ОтправитьXML(Сервер, Команда, XML); 
	
	Возврат Рез;
	
КонецФункции // _SIGMASMSRU_ПослатьXML()

Функция _SIGMASMSRU_СписокСтатусовNotDeliver() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("0", "Ошибок нет (или ошибка не может быть определена системой)");
	Список.Добавить("1", "Абонент недоступен или отключен");
	Список.Добавить("2", "У абонента включен запрет на прием сообщений или абонента заблокировал оператор (возможно, в связи с отрицательным балансом)");
	Список.Добавить("3", "Номер телефона не существует или не обслуживается");
	Список.Добавить("4", "Память телефона абоненета переполнена");
	Список.Добавить("5", "Аппаратная ошибка телефона абонента");
	Список.Добавить("6", "Сервис коротких сообщений не предоставляется");
	Список.Добавить("7", "Аппарат абонента не поддерживает прием коротких сообщений");
	Список.Добавить("8", "Аппарат абонента занят операцией, препятствующей получению короткого сообщения");
	Список.Добавить("9", "Абонент находится в роуминге");
	Список.Добавить("10", "Время ожидания ответа от SMSC абонента истекло");
	Список.Добавить("11", "Внутренняя ошибка маршрутизации");
	Список.Добавить("12", "Внутренняя ошибка системы");
	Список.Добавить("13", "Ошибка коммутатора (внутренняя ошибка передачи данных)");
	
	Возврат Список;
	
КонецФункции

Функция _SIGMASMSRU_СписокСтатусов()
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("send", 			"Отправляется");
	Список.Добавить("not_deliver", 		"Не доставлено");
	Список.Добавить("expired", 			"Истекло");
	Список.Добавить("deliver",			"Доставлено");
	Список.Добавить("partly_deliver", 	"Отправлено");
	
	Возврат Список;
	
КонецФункции

Процедура _SIGMASMSRU_Баланс(Баланс, ЕстьОшибка) Экспорт
	
	ЕстьОшибка	= Ложь;	
	тКавычки	= Символ(34);
	ИмяXML		= _SIGMASMSRU_ПослатьXML(
		"/xml/balance.php",
		"<?xml version="+ тКавычки + "1.0" + тКавычки + " encoding="+ тКавычки + "utf-8" + тКавычки + "?>
		|<request><security>
		|<login value=" + тКавычки + УдалитьНедопустимыеСимволыXML(Логин) + тКавычки + "/><password value=" + тКавычки + УдалитьНедопустимыеСимволыXML(Пароль) + тКавычки + "/>
		|</security></request>"
	);
	
	Файл = новый чтениеXML;
	Файл.ОткрытьФайл(ИмяXML);
	
	Пока Файл.Прочитать() Цикл
		Если Файл.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если Файл.Имя = "money" Тогда
				Зн1 = Файл.ЗначениеАтрибута("currency");
				Если Зн1 <> Неопределено Тогда
					currency = Зн1;
					Если Файл.Прочитать() Тогда
						Если Файл.ТипУзла = ТипУзлаXML.Текст Тогда
							Попытка
								Баланс = Строка(Файл.Значение) + " " + currency;
							Исключение
								ЕстьОшибка = Истина;
								Баланс = "Сайт возвращает не верные данные по балансу!";
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли Файл.Имя = "error" Тогда
				ЕстьОшибка = Истина;
				Баланс = Файл.Значение;
			Конецесли;			
		КонецЕсли;
	КонецЦикла;	
	
	Файл.Закрыть();
	
	УдалитьФайлы(ИмяXML);
	
КонецПроцедуры // _SIGMASMSRU_Баланс

Функция _SIGMASMSRU_ПолучитьВремяОтправленияСМС(ВремяОтправки)
	
	Если ВремяОтправки = Дата(1,1,1) Тогда
		Дата1 = ТекущаяДата();
	Иначе
		Дата1 = ВремяОтправки;
	КонецЕсли;
	
	ДатаГод1	= Формат(Год(Дата1),"ЧГ=0");
	ДатаМесяц1	= Формат(Месяц(Дата1),"ЧЦ=2; ЧН=; ЧВН=");
	ДатаЧисло1	= Формат(День(Дата1),"ЧЦ=2; ЧН=; ЧВН=");
	ДатаЧас		= Формат(Час(Дата1),"ЧЦ=2; ЧН=; ЧВН=");
	ДатаМинута	= Формат(Минута(Дата1),"ЧЦ=2; ЧН=; ЧВН=");
	
	СтрДата		= "" + ДатаГод1 + "-" + ДатаМесяц1 + "-" + ДатаЧисло1 + " " + ДатаЧас + ":" + ДатаМинута;
	
	Возврат СтрДата;
	
КонецФункции

Функция _SIGMASMSRU_ФорматНомераТелефона(Телефон)
	
	Если СтрДлина(Телефон) > 3 Тогда
		
		Если Сред(Телефон, 1, 2) = "89" Тогда
			Возврат "79" + Сред(Телефон, 3);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Телефон;
	
КонецФункции

Функция _SIGMASMSRU_ОтправитьSMS(ТЗ, ПосчитатьСтоимость = Ложь) Экспорт
	
	ТаблицаНомеров = Новый ТаблицаЗначений;
	ТаблицаНомеров.Колонки.Добавить("НомерСМС");
	ТаблицаНомеров.Колонки.Добавить("ИД");
	
	тКавычки = Символ(34);
	НомерСМС = 0;
	XML = "<?xml version="+ тКавычки + "1.0" + тКавычки + " encoding="+ тКавычки + "utf-8" + тКавычки + "?>
	|<request>
	|<security><login value=" + тКавычки + УдалитьНедопустимыеСимволыXML(Логин) + тКавычки + "/><password value=" + тКавычки + УдалитьНедопустимыеСимволыXML(Пароль) + тКавычки + "/></security>";
	
	Для каждого Стр Из ТЗ Цикл		
		Если Стр.Флаг Тогда
			
			НомерСМС 			= НомерСМС + 1;
			ИД 					= Строка(Новый УникальныйИдентификатор);
			НоваяСтрока 		= ТаблицаНомеров.Добавить();
			НоваяСтрока.НомерСМС= НомерСМС;
			НоваяСтрока.ИД		= ИД;
			
			Стр.ИДСообщения 	= ИД;
			
			Если ТипСМС = 0 Тогда
				СМС = ?(Транслитерация, ТранслитерацияТекста(ШаблонТекстаСМС), ШаблонТекстаСМС);				
			Иначе				
				СМС = Стр.ТекстСМС;
			КонецЕсли;
			
			СМС = УдалитьНеПечатныеСимволы(СМС);
			
			XML = XML + 
				"<message>
				|<sender>" + ?(ПустаяСтрока(Отправитель), "MEDIAINFO", XMLСтрока(Отправитель)) + "</sender>
				|<text>" + УдалитьНедопустимыеСимволыXML(СМС) + "</text>
				|<abonent phone=" + тКавычки +  _SIGMASMSRU_ФорматНомераТелефона(СокрЛП(Стр.Телефон)) + тКавычки + " number_sms=" + тКавычки + Формат(НомерСМС, "ЧГ=0") + тКавычки + " phone_id=" + тКавычки + Формат(НомерСМС,"ЧГ=0") + тКавычки + ?(ОтправлятьВУказанноеВремя, " time_send=" + тКавычки + _SIGMASMSRU_ПолучитьВремяОтправленияСМС(ДатаИВремяОтправки) + тКавычки, "") +"/>
				|</message>"
			;
			
		КонецЕсли;						
	КонецЦикла;                              
	
	XML = XML + "</request>";
	
	// Отправляем XML
	ИмяXML = _SIGMASMSRU_ПослатьXML("/xml/", XML);
	КоличествоИЛИСтоимостьОтправленных = 0;
	
	// читаем файл ответа
	Файл = новый чтениеXML;
	Файл.ОткрытьФайл(ИмяXML);
	
	СтруктураВ = Новый Структура;
	СтруктураВ.Вставить("number_sms","");
	СтруктураВ.Вставить("id_sms"	,"");
	СтруктураВ.Вставить("parts"		,"");
	СтруктураВ.Вставить("Текст"		,"");
	
	Пока Файл.Прочитать() Цикл
		Если Файл.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если Файл.Имя = "information" Тогда
				Пока Файл.ПрочитатьАтрибут() Цикл
					СтруктураВ.Вставить(Файл.Имя, Файл.Значение);					
				КонецЦикла;
			Конецесли;
		ИначеЕсли Файл.ТипУзла = ТипУзлаXML.Текст Тогда
			СтруктураВ.Вставить("Текст", Файл.Значение);
		ИначеЕсли Файл.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если Файл.Имя = "information" Тогда
				Если Число(СтруктураВ.number_sms) <> 0 Тогда
					
					строкаТаб = ТаблицаНомеров.Найти(Число(СтруктураВ.number_sms),"НомерСМС");
					Если строкаТаб <> Неопределено Тогда
						строкаТЗ = ТЗ.Найти(СтрокаТаб.ИД, "ИДСообщения");
						Если строкаТЗ <> Неопределено Тогда
							строкаТЗ.ИДСообщения = СтруктураВ.id_sms;
							Если СтруктураВ.Текст = "send" Тогда
								строкаТЗ.Статус = "Отправляется";
								КоличествоИЛИСтоимостьОтправленных = КоличествоИЛИСтоимостьОтправленных + 1;
							Иначе
								строкаТЗ.Статус = СтруктураВ.Текст;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Сообщить("Ошибка! "+СтруктураВ.Текст, СтатусСообщения.Важное);
				КонецЕсли;
				
				СтруктураВ.Вставить("number_sms","");
				СтруктураВ.Вставить("id_sms","");
				СтруктураВ.Вставить("parts","");
				СтруктураВ.Вставить("Текст","");
			ИначеЕсли Файл.Имя = "error" Тогда
				Сообщить("Ошибка! "+СтруктураВ.Текст, СтатусСообщения.Важное);
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	Файл.Закрыть();
	
	УдалитьФайлы(ИмяXML);
	
	Возврат КоличествоИЛИСтоимостьОтправленных;	
	
КонецФункции // _SIGMASMSRU_ОтправитьSMS

Процедура _SIGMASMSRU_ОбновитьСтатусДоставки(ТЗ) Экспорт
	
	СписокСтатусов 				= _SIGMASMSRU_СписокСтатусов();
	СписокСтатусовNotDeliver 	= _SIGMASMSRU_СписокСтатусовNotDeliver();
	тКавычки = Символ(34);
	НомерСМС = 0;
	СписокОшибок = _P1SMSRU_СписокОшибок();
	XML = "<?xml version="+ тКавычки + "1.0" + тКавычки + " encoding="+ тКавычки + "utf-8" + тКавычки + "?>
	|<request>
	|<security><login value=" + тКавычки + УдалитьНедопустимыеСимволыXML(Логин) + тКавычки + "/><password value=" + тКавычки + УдалитьНедопустимыеСимволыXML(Пароль) + тКавычки + "/></security>
	|<get_state>";
	
	КоличествоКОтправке = 0;
	Для каждого Стр Из ТЗ Цикл
		
		Если ПустаяСтрока(Стр.ИДСообщения) ИЛИ НЕ Стр.Флаг Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоКОтправке = КоличествоКОтправке + 1;
		XML 				= XML + "<id_sms>" + Стр.ИДСообщения + "</id_sms>";
		
	КонецЦикла;
	
	XML = XML + 
		"</get_state>
		|</request>";
		
	Если КоличествоКОтправке > 0 Тогда
		
		ИмяXML = _SIGMASMSRU_ПослатьXML("/xml/state.php", XML);
		
		Файл = новый чтениеXML;
		Файл.ОткрытьФайл(ИмяXML);
		
		СтруктураВ = Новый Структура;
		СтруктураВ.Вставить("id_sms",	"");
		СтруктураВ.Вставить("time",		"");
		СтруктураВ.Вставить("err",		"");
		СтруктураВ.Вставить("Текст",	"");
		
		Пока Файл.Прочитать() Цикл
			
			Если Файл.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если Файл.Имя = "state" Тогда
					Пока Файл.ПрочитатьАтрибут() Цикл
						СтруктураВ.Вставить(Файл.Имя, Файл.Значение);					
					КонецЦикла;
				Конецесли;
			ИначеЕсли Файл.ТипУзла = ТипУзлаXML.Текст Тогда
				СтруктураВ.Вставить("Текст", Файл.Значение);
			ИначеЕсли Файл.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Если Файл.Имя = "state" Тогда
					строкаТТ = ТЗ.Найти(СтруктураВ.id_sms, "ИДСообщения");
					Если строкаТТ <> Неопределено Тогда
						
						Элемент	= СписокСтатусов.НайтиПоЗначению(СтруктураВ.Текст);
						Если Элемент <> Неопределено Тогда
							Если СтруктураВ.Текст = "not_deliver" Тогда								
								Элемент2	= СписокСтатусовNotDeliver.НайтиПоЗначению(СтруктураВ.err);
								Если Элемент2 <> Неопределено Тогда
									строкаТТ.Статус	= Элемент.Представление + " (" + Элемент2.Представление + ")";
								Иначе
									строкаТТ.Статус	= Элемент.Представление;
								КонецЕсли;
							Иначе
								строкаТТ.Статус	= Элемент.Представление;
							КонецЕсли;
						Иначе
							строкаТТ.Статус	= "Не известный статус доставки (" + Строка(СтруктураВ.Текст) + ")";
						КонецЕсли;
						
					КонецЕсли;
					
					СтруктураВ.Вставить("id_sms",	"");
					СтруктураВ.Вставить("time",		"");
					СтруктураВ.Вставить("err",		"");
					СтруктураВ.Вставить("Текст",	"");
				ИначеЕсли Файл.Имя = "error" Тогда
					Сообщить("Ошибка! "+СтруктураВ.Текст, СтатусСообщения.Важное);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;		
		
		Файл.Закрыть();
		
		УдалитьФайлы(ИмяXML);
		
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////
// SMSGOROD.RU

Функция _SMSGORODRU_СписокОшибок() Экспорт
	
	Список = Новый СписокЗначений;
	Список.Добавить("", "Неверный логин или пароль");
	
	Возврат Список;
	
КонецФункции

Функция _SMSGORODRU_СписокСтатусовДоставкиСообщений() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("created"			, "Создано");
	Список.Добавить("moderation"		, "На модерации");
	Список.Добавить("sent"				, "Отправлено");
	Список.Добавить("error"				, "Ошибка в системе");
	Список.Добавить("delivered"			, "Доставлено");
	Список.Добавить("not_delivered"		, "Не доставлено");
	Список.Добавить("read"				, "Прочитано");
	Список.Добавить("planned"			, "Запланировано");
	Список.Добавить("low_balance"		, "Низкий баланс клиента");
	Список.Добавить("low_partner_balance", "Ошибка 592");
	Список.Добавить("rejected"			, "Отклонена");
	Список.Добавить("in_process"		, "В процессе доставки");
	                    
	Возврат Список;
	
КонецФункции

Функция _SMSGORODRU_ПослатьКоманду(Команда) Экспорт
	
	Перем Рез;
	Сервер = "new.smsgorod.ru";
		
	Прокси = Неопределено;
	Если ИспользоватьПрокси Тогда
        Прокси											= Новый ИнтернетПрокси;
        Прокси.НеИспользоватьПроксиДляЛокальныхАдресов	= Истина;
        Прокси.Пользователь								= ПроксиЛогин; 
        Прокси.Пароль									= ПроксиПароль; 
		Прокси.Установить("https", ПроксиАдрес, ПроксиПорт);
	КонецЕсли;
	
	Попытка
        Соединение = Новый HTTPСоединение(Сервер, 443, , , Прокси, , ЗначениеЗащищенногоСоединения());
	Исключение
	    Сообщить("Не удалось установить соединение с сервером:" 
	        + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
	    Возврат "";
	КонецПопытки;

	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла(".json");
	
	Попытка
		Соединение.Получить(Команда, ИмяФайлаРезультата);
		Соединение = Неопределено;
	Исключение 
		Сообщить("Не удалось получить данные с сервера:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат "";
	КонецПопытки;
	
	ТД = Новый ТекстовыйДокумент;
	ТД.Прочитать(ИмяФайлаРезультата);
	ТелоОтвет = ТД.ПолучитьТекст();
	УдалитьФайлы(ИмяФайлаРезультата);		
	
	Возврат ЗаполнитьСтруктуруИзОтветаJSON(ТелоОтвет);	
	
КонецФункции // _SMSGORODRU_ПослатьКоманду()

Функция _SMSGORODRU_КодыОшибок()
	
	Список = Новый СписокЗначений;
	Список.Добавить("0", "Нет ошибки");
	Список.Добавить("1", "Объект не существует");
	Список.Добавить("2", "Нет доступа");
	
	Возврат Список;
	
КонецФункции

Процедура _SMSGORODRU_ОбновитьСтатусДоставки(ТЗ) Экспорт
	
	СписокСтатусовДоставки = _SMSGORODRU_СписокСтатусовДоставкиСообщений();
	СписокОшибок = _SMSGORODRU_КодыОшибок();
	
	Для Каждого Стр Из ТЗ Цикл
		
		Если ПустаяСтрока(Стр.ИДСообщения) ИЛИ НЕ Стр.Флаг Тогда
			Продолжить;
		КонецЕсли;
		
		_Параметры = "apiKey=" + КлючAPI + "&smsId[0]=" + Стр.ИДСообщения;
		
		Ответ = _SMSGORODRU_ПослатьКоманду("/apiSms/getSmsStatus?" + _Параметры);
		
		Попытка
			ЗначениеДоставки = Ответ.Значение[0];
		Исключение
		    ЗначениеДоставки = Новый Структура;
		КонецПопытки;
		
		Если ЗначениеДоставки.Свойство("sms_status") Тогда
			НайденныйЭлемент = СписокСтатусовДоставки.НайтиПоЗначению(ЗначениеДоставки.sms_status);
			Если НайденныйЭлемент <> Неопределено Тогда
				Стр.Статус		= НайденныйЭлемент.Представление;
			Иначе
				Стр.Статус		= "Статус не известен (" + Строка(ЗначениеДоставки.sms_status) + ")";
			КонецЕсли;
			
		Иначе
			Попытка
				НайденныйЭлемент = СписокОшибок.НайтиПоЗначению(ЗначениеДоставки.error);
				Если НайденныйЭлемент <> Неопределено Тогда
					ПредставлениеОшибки = НайденныйЭлемент.Представление;
				Иначе
					ПредставлениеОшибки = "Ошибка не извесна (" + Строка(ЗначениеДоставки.error) + ")";
				КонецЕсли;
				
			Исключение
			    ПредставлениеОшибки = "Ошибка получения статуса";
			КонецПопытки;
			Стр.Статус	= ПредставлениеОшибки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // _SMSGORODRU_ОбновитьСтатусДоставки

Функция _SMSGORODRU_ОтправитьSMS(ТЗ, ПосчитатьСтоимость = Ложь) Экспорт
	
	КоличествоИЛИСтоимостьОтправленных = 0;
	
	СписокОшибок = _SMSGORODRU_СписокОшибок();
	СписокСтатусовДоставки = _SMSGORODRU_СписокСтатусовДоставкиСообщений();
	
	Для Каждого Стр Из ТЗ Цикл
		
		Если Стр.Флаг Тогда
			
			Если ТипСМС = 0 Тогда
				СМС = ?(Транслитерация, ТранслитерацияТекста(ШаблонТекстаСМС), ШаблонТекстаСМС);				
			Иначе				
				СМС = Стр.ТекстСМС;
			КонецЕсли;
			
			СМС = УдалитьНеПечатныеСимволы(СМС);
			
			_Параметры = "apiKey=" + КлючAPI;
			
			Если Канал = "SMS буквенный (прямые подключения)" Тогда
				_Параметры = _Параметры + "&sms[0][channel]=char";
			ИначеЕсли Канал = "SMS цифра (дешевый, но не стабильный)" Тогда
				_Параметры = _Параметры + "&sms[0][channel]=digit";
			Иначе
				Стр.Статус	= "Не найден канал доставки";
				Продолжить;
			КонецЕсли;
			_Параметры = _Параметры + "&sms[0][text]=" + URLEncode(СМС);
			_Параметры = _Параметры + "&sms[0][phone]=" + Стр.Телефон;
			Если НЕ ПустаяСтрока(Отправитель) Тогда
				_Параметры = _Параметры + "&sms[0][sender]=" + Отправитель;
			КонецЕсли;
			Если ОтправлятьВУказанноеВремя Тогда
				_Параметры = _Параметры + "&sms[0][plannedAt]=" + Дата2UnixTime(ДатаИВремяОтправки);
			КонецЕсли;
			
			Ответ	= _SMSGORODRU_ПослатьКоманду("/apiSms/create?" + _Параметры); 
			
			Попытка
				Статус = Ответ.status;
			Исключение
			    Статус = "";
			КонецПопытки;
			
			Если Статус = "success" Тогда
				
				Статус = Ответ.data[0].status;
				Стр.Статус = СписокСтатусовДоставки.НайтиПоЗначению(Статус);
				Если Статус = "error" Тогда					
					Если Ответ.data[0].Свойство("errorDescription") Тогда
						Стр.Статус = Стр.Статус + "(" + ПреобразоватьЮникод(Ответ.data[0].errorDescription) + ")";
					КонецЕсли;
				Иначе
					Стр.ИДСообщения = Ответ.data[0].id;
				КонецЕсли;				
				КоличествоИЛИСтоимостьОтправленных = КоличествоИЛИСтоимостьОтправленных + 1;
			Иначе
				Попытка
					Стр.Статус	= "Ошибка отправки SMS (" + ПреобразоватьЮникод(Ответ.data.message) + ")";
				Исключение
				    Стр.Статус	= "Ошибка отправки SMS";
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоличествоИЛИСтоимостьОтправленных;
	
КонецФункции // _SMSGORODRU_ОтправитьSMS

Процедура _SMSGORODRU_Баланс(Баланс, ЕстьОшибка) Экспорт
	
	Если ПустаяСтрока(КлючAPI) Тогда
		ЕстьОшибка = Истина;
		Баланс = "Не заполнен ключ API";
		Возврат;
	КонецЕсли;
	
	ЕстьОшибка		= Ложь;
	ОписаниеОшибки 	= "";
	
	СписокОшибок	= _SMSGORODRU_СписокОшибок();
	Ответ			= _SMSGORODRU_ПослатьКоманду("/apiUsers/getUserBalanceInfo?apiKey=" + КлючAPI);
	Баланс = "";
	
	Попытка
		Статус = Ответ.status;
	Исключение
	    Статус = "";
	КонецПопытки;
	
	Если Статус <> "success" Тогда
		Попытка
			Баланс	= ПреобразоватьЮникод(Ответ.data.message);
		Исключение
		    Баланс = "Ошибка";
		КонецПопытки;
		ЕстьОшибка = Истина;
	Иначе
		Баланс = Ответ.data;
	КонецЕсли;
		
КонецПроцедуры // _SMSGORODRU_Баланс

Функция _SMSGORODRU_СписокОтправителей() Экспорт
	
	Если ПустаяСтрока(КлючAPI) Тогда
		Возврат "";
	КонецЕсли;
	
	СписокОшибок	= _SMSGORODRU_СписокОшибок();
	Ответ			= _SMSGORODRU_ПослатьКоманду("/apiUsers/getUserSenders?apiKey=" + КлючAPI);
	
	Попытка
		Статус = Ответ.status;
	Исключение
	    Статус = "";
	КонецПопытки;
	
	Если Статус = "success" Тогда
		
		Результат = Новый СписокЗначений;
		Для Каждого Эл Из Ответ.data Цикл
			Результат.Добавить(Эл.senderName);
		КонецЦикла;
		
		Возврат Результат;
		
	Иначе
		
		Попытка
			СтрокаОшибки	= ПреобразоватьЮникод(Ответ.data.message);
		Исключение
		    СтрокаОшибки	= "Ошибка получения отправителей";
		КонецПопытки;
		
		Возврат СтрокаОшибки;
		
	КонецЕсли;	
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////
// P1SMS.RU

Функция _P1SMSRU_СписокОшибок() Экспорт
	
	Список = Новый СписокЗначений;
	Список.Добавить("", "Неверный логин или пароль");
	
	Возврат Список;
	
КонецФункции

Функция _P1SMSRU_СписокСтатусовДоставкиСообщений() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("created"			, "Создано");
	Список.Добавить("moderation"		, "На модерации");
	Список.Добавить("sent"				, "Отправлено");
	Список.Добавить("error"				, "Ошибка в системе");
	Список.Добавить("delivered"			, "Доставлено");
	Список.Добавить("not_delivered"		, "Не доставлено");
	Список.Добавить("read"				, "Прочитано");
	Список.Добавить("planned"			, "Запланировано");
	Список.Добавить("low_balance"		, "Низкий баланс клиента");
	Список.Добавить("low_partner_balance", "Ошибка 592");
	Список.Добавить("rejected"			, "Отклонена");
	Список.Добавить("in_process"		, "В процессе доставки");
	                    
	Возврат Список;
	
КонецФункции

Функция _P1SMSRU_ПослатьКоманду(Команда, Аргументы = "") Экспорт

	Перем Рез;
	Сервер = "admin.p1sms.ru";
		
	Прокси = Неопределено;
	Если ИспользоватьПрокси Тогда
        Прокси											= Новый ИнтернетПрокси;
        Прокси.НеИспользоватьПроксиДляЛокальныхАдресов	= Истина;
        Прокси.Пользователь								= ПроксиЛогин; 
        Прокси.Пароль									= ПроксиПароль; 
		Прокси.Установить("https", ПроксиАдрес, ПроксиПорт);
	КонецЕсли;
	
	Попытка
        Соединение = Новый HTTPСоединение(Сервер, 443, , , Прокси, , ЗначениеЗащищенногоСоединения());
	Исключение
	    Сообщить("Не удалось установить соединение с сервером:" 
	        + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
	    Возврат "";
	КонецПопытки;

	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла(".json");
	
	Попытка
		Соединение.Получить(Команда, ИмяФайлаРезультата);
		Соединение = Неопределено;
	Исключение 
		Сообщить("Не удалось получить данные с сервера:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат "";
	КонецПопытки;
	
	ТД = Новый ТекстовыйДокумент;
	ТД.Прочитать(ИмяФайлаРезультата);
	ТелоОтвет = ТД.ПолучитьТекст();
	УдалитьФайлы(ИмяФайлаРезультата);		
	
	Возврат ЗаполнитьСтруктуруИзОтветаJSON(ТелоОтвет);
	
КонецФункции // _P1SMSRU_ПослатьКоманду()

Функция _P1SMSRU_КодыОшибок()
	
	Список = Новый СписокЗначений;
	Список.Добавить("0", "Нет ошибки");
	Список.Добавить("1", "Объект не существует");
	Список.Добавить("2", "Нет доступа");
	
	Возврат Список;
	
КонецФункции

Процедура _P1SMSRU_ОбновитьСтатусДоставки(ТЗ) Экспорт
	
	СписокСтатусовДоставки = _P1SMSRU_СписокСтатусовДоставкиСообщений();
	СписокОшибок = _SMSGORODRU_КодыОшибок();
	
	Для Каждого Стр Из ТЗ Цикл
		
		Если ПустаяСтрока(Стр.ИДСообщения) ИЛИ НЕ Стр.Флаг Тогда
			Продолжить;
		КонецЕсли;
		
		_Параметры = "apiKey=" + КлючAPI + "&smsId[0]=" + Стр.ИДСообщения;
		
		Ответ = _P1SMSRU_ПослатьКоманду("/apiSms/getSmsStatus?" + _Параметры);
		
		Попытка
			ЗначениеДоставки = Ответ.Значение[0];
		Исключение
		    ЗначениеДоставки = Новый Структура;
		КонецПопытки;
		
		Если ЗначениеДоставки.Свойство("sms_status") Тогда
			НайденныйЭлемент = СписокСтатусовДоставки.НайтиПоЗначению(ЗначениеДоставки.sms_status);
			Если НайденныйЭлемент <> Неопределено Тогда
				Стр.Статус		= НайденныйЭлемент.Представление;
			Иначе
				Стр.Статус		= "Статус не известен (" + Строка(ЗначениеДоставки.sms_status) + ")";
			КонецЕсли;
			
		Иначе
			Попытка
				НайденныйЭлемент = СписокОшибок.НайтиПоЗначению(ЗначениеДоставки.error);
				Если НайденныйЭлемент <> Неопределено Тогда
					ПредставлениеОшибки = НайденныйЭлемент.Представление;
				Иначе
					ПредставлениеОшибки = "Ошибка не извесна (" + Строка(ЗначениеДоставки.error) + ")";
				КонецЕсли;
				
			Исключение
			    ПредставлениеОшибки = "Ошибка получения статуса";
			КонецПопытки;
			Стр.Статус	= ПредставлениеОшибки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // _SMSGORODRU_ОбновитьСтатусДоставки

Функция _P1SMSRU_ОтправитьSMS(ТЗ, ПосчитатьСтоимость = Ложь) Экспорт
	
	КоличествоИЛИСтоимостьОтправленных = 0;
	
	СписокОшибок = _P1SMSRU_СписокОшибок();
	СписокСтатусовДоставки = _P1SMSRU_СписокСтатусовДоставкиСообщений();
	
	Для Каждого Стр Из ТЗ Цикл
		
		Если Стр.Флаг Тогда
			
			Если ТипСМС = 0 Тогда
				СМС = ?(Транслитерация, ТранслитерацияТекста(ШаблонТекстаСМС), ШаблонТекстаСМС);				
			Иначе				
				СМС = Стр.ТекстСМС;
			КонецЕсли;
			
			СМС = УдалитьНеПечатныеСимволы(СМС);
			
			_Параметры = "apiKey=" + КлючAPI;
			
			Если Канал = "SMS буквенный (прямые подключения)" Тогда
				_Параметры = _Параметры + "&sms[0][channel]=char";
			ИначеЕсли Канал = "SMS цифра (дешевый, но не стабильный)" Тогда
				_Параметры = _Параметры + "&sms[0][channel]=digit";
			Иначе
				Стр.Статус	= "Не найден канал доставки";
				Продолжить;
			КонецЕсли;                                              
			_Параметры = _Параметры + "&sms[0][text]=" + URLEncode(СМС);
			_Параметры = _Параметры + "&sms[0][phone]=" + Стр.Телефон;
			Если НЕ ПустаяСтрока(Отправитель) Тогда
				_Параметры = _Параметры + "&sms[0][sender]=" + Отправитель;
			КонецЕсли;
			Если ОтправлятьВУказанноеВремя Тогда
				_Параметры = _Параметры + "&sms[0][plannedAt]=" + Дата2UnixTime(ДатаИВремяОтправки);
			КонецЕсли;
			
			Ответ	= _SMSGORODRU_ПослатьКоманду("/apiSms/create?" + _Параметры); 
			
			Попытка
				Статус = Ответ.status;
			Исключение
			    Статус = "";
			КонецПопытки;
			
			Если Статус = "success" Тогда				
				Статус = Ответ.data[0].status;
				Стр.Статус = СписокСтатусовДоставки.НайтиПоЗначению(Статус);
				Если Статус = "error" Тогда					
					Если Ответ.data[0].Свойство("errorDescription") Тогда
						Стр.Статус = Стр.Статус + "(" + ПреобразоватьЮникод(Ответ.data[0].errorDescription) + ")";
					КонецЕсли;
				Иначе
					Стр.ИДСообщения = Ответ.data[0].id;
				КонецЕсли;
				КоличествоИЛИСтоимостьОтправленных = КоличествоИЛИСтоимостьОтправленных + 1;
			Иначе
				Попытка
					Стр.Статус	= "Ошибка отправки SMS (" + ПреобразоватьЮникод(Ответ.data.message) + ")";
				Исключение
				    Стр.Статус	= "Ошибка отправки SMS";
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоличествоИЛИСтоимостьОтправленных;
	
КонецФункции // _SMSGORODRU_ОтправитьSMS

Процедура _P1SMSRU_Баланс(Баланс, ЕстьОшибка) Экспорт
	
	Если ПустаяСтрока(КлючAPI) Тогда
		ЕстьОшибка = Истина;
		Баланс = "Не заполнен ключ API";
		Возврат;
	КонецЕсли;
	
	ЕстьОшибка		= Ложь;
	ОписаниеОшибки 	= "";
	
	СписокОшибок	= _P1SMSRU_СписокОшибок();
	Ответ			= _P1SMSRU_ПослатьКоманду("/apiUsers/getUserBalanceInfo?apiKey=" + КлючAPI);
	Баланс = "";
	
	Попытка
		Статус = Ответ.status;
	Исключение
	    Статус = "";
	КонецПопытки;
	
	Если Статус <> "success" Тогда
		Попытка
			Баланс	= ПреобразоватьЮникод(Ответ.data.message);
		Исключение
		    Баланс = "Ошибка";
		КонецПопытки;
		ЕстьОшибка = Истина;
	Иначе
		Баланс = Ответ.data;
	КонецЕсли;
		
КонецПроцедуры // _SMSGORODRU_Баланс

Функция _P1SMSRU_СписокОтправителей() Экспорт
	
	Если ПустаяСтрока(КлючAPI) Тогда
		Возврат "";
	КонецЕсли;
	
	СписокОшибок	= _P1SMSRU_СписокОшибок();
	Ответ			= _P1SMSRU_ПослатьКоманду("/apiUsers/getUserSenders?apiKey=" + КлючAPI);
	
	Попытка
		Статус = Ответ.status;
	Исключение
	    Статус = "";
	КонецПопытки;
	
	Если Статус = "success" Тогда
		
		Результат = Новый СписокЗначений;
		Для Каждого Эл Из Ответ.data Цикл
			Результат.Добавить(Эл.senderName);
		КонецЦикла;
		
		Возврат Результат;
		
	Иначе
		
		Попытка
			СтрокаОшибки	= ПреобразоватьЮникод(Ответ.data.message);
		Исключение
		    СтрокаОшибки	= "Ошибка получения отправителей";
		КонецПопытки;
		
		Возврат СтрокаОшибки;
		
	КонецЕсли;	
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////
// SMS.RU

// Константы

Функция _SMSRU_СписокОшибок() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("",	 "Проверьте соединение с сетью интернет или прокси-сервером");
	Список.Добавить("200", "Неправильный api_id");
	Список.Добавить("201", "Не хватает средств на лицевом счету");
	Список.Добавить("202", "Неправильно указан получатель");
	Список.Добавить("203", "Нет текста сообщения");
	Список.Добавить("204", "Имя отправителя не согласовано с администрацией");
	Список.Добавить("205", "Сообщение слишком длинное (превышает 8 СМС)");
	Список.Добавить("206", "Будет превышен или уже превышен дневной лимит на отправку сообщений");
	Список.Добавить("207", "На этот номер (или один из номеров) нельзя отправлять сообщения, либо указано более 100 номеров в списке получателей");
	Список.Добавить("208", "Параметр time указан неправильно");
	Список.Добавить("209", "Вы добавили этот номер (или один из номеров) в стоп-лист");
	Список.Добавить("210", "Используется GET, где необходимо использовать POST");
	Список.Добавить("211", "Метод не найден");
	Список.Добавить("212", "Текст сообщения необходимо передать в кодировке UTF-8 (вы передали в другой кодировке)");
	Список.Добавить("213", "Указано более 1000 номеров в списке получателей");
	Список.Добавить("214", "Номер находится зарубежом (включена настройка ""Отправлять только на номера РФ"")");
	Список.Добавить("220", "Сервис временно недоступен, попробуйте чуть позже.");
	Список.Добавить("230", "Сообщение не принято к отправке, так как на один номер в день нельзя отправлять более 60 сообщений.");
	Список.Добавить("231", "Превышен лимит одинаковых сообщений на этот номер в минуту.");
	Список.Добавить("232", "Превышен лимит одинаковых сообщений на этот номер в день.");
	Список.Добавить("233", "Превышен лимит отправки повторных сообщений с кодом на этот номер за короткий промежуток времени (""защита от мошенников"", можно отключить в разделе ""Настройки"")");
	Список.Добавить("300", "Неправильный token (возможно истек срок действия, либо ваш IP изменился)");
	Список.Добавить("301", "Неправильный пароль, либо пользователь не найден");
	Список.Добавить("302", "Пользователь авторизован, но аккаунт не подтвержден (пользователь не ввел код, присланный в регистрационной смс)");
	Список.Добавить("303", "Код подтверждения неверен");
	Список.Добавить("304", "Отправлено слишком много кодов подтверждения. Пожалуйста, повторите запрос позднее");
	Список.Добавить("305", "Слишком много неверных вводов кода, повторите попытку позднее");
	Список.Добавить("500", "Ошибка на сервере. Повторите запрос.");
	Список.Добавить("901", "Callback: URL неверный (не начинается на http://)");
	Список.Добавить("902", "Callback: Обработчик не найден (возможно был удален ранее)");
	
	Возврат Список;
	
КонецФункции

Функция _SMSRU_СписокСтатусовДоставкиСообщений() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить(-1, "Сообщение не найдено");
	Список.Добавить(100, "Находится в нашей очереди");
	Список.Добавить(101, "Передается оператору");
	Список.Добавить(102, "Отправлено (в пути)");
	Список.Добавить(103, "Доставлено");
	Список.Добавить(104, "Не может быть доставлено: время жизни истекло");
	Список.Добавить(105, "Не может быть доставлено: удалено оператором");
	Список.Добавить(106, "Не может быть доставлено: сбой в телефоне");
	Список.Добавить(107, "Не может быть доставлено: неизвестная причина");
	Список.Добавить(108, "Не может быть доставлено: отклонено");
	Список.Добавить(200, "Неправильный api_id");
	Список.Добавить(210, "Используется GET, где необходимо использовать POST");
	Список.Добавить(211, "Метод не найден");
	Список.Добавить(220, "Сервис временно недоступен, попробуйте чуть позже");
	Список.Добавить(300, "Неправильный token (возможно истек срок действия, либо ваш IP изменился)");
	Список.Добавить(301, "Неправильный пароль, либо пользователь не найден");
	Список.Добавить(302, "Пользователь авторизован, но аккаунт не подтвержден (пользователь не ввел код, присланный в регистрационной смс)");
	Список.Добавить("303", "Код подтверждения неверен");
	Список.Добавить("304", "Отправлено слишком много кодов подтверждения. Пожалуйста, повторите запрос позднее");
	Список.Добавить("305", "Слишком много неверных вводов кода, повторите попытку позднее");
	Список.Добавить("500", "Ошибка на сервере. Повторите запрос.");
	Список.Добавить("901", "Callback: URL неверный (не начинается на http://)");
	Список.Добавить("902", "Callback: Обработчик не найден (возможно был удален ранее)");
	                    
	Возврат Список;
	
КонецФункции

// Отправка, статусы, баланс

Функция _SMSRU_ПослатьКоманду(Команда, Аргументы = "") Экспорт
		
	Сервер = "sms.ru";
		
	Если ПустаяСтрока(Токен) ИЛИ ТекущаяДата() - ДатаВремяПолученияТокена > 60 * 5 Тогда
		
		Токен						= URLEncode(СокрЛП(ПрочитатьАдрес(Сервер, "/auth/get_token", "")));
		ДатаВремяПолученияТокена	= ТекущаяДата();
		МД5							= URLEncode(СокрЛП(НРег(ВычислитьХешСтрокиПоАлгоритмуMD5(СтрокаВUTF_8(Пароль) + Токен))));
		
	КонецЕсли;
	
	Ресурс = Команда;
    _Параметры = "login=" + СокрЛП(URLEncode(Логин)) + "&token=" + Токен + "&sig=" + МД5 + "&partner_id=12737" +
		?(Не ПустаяСтрока(Аргументы), "&" + СокрЛП(Аргументы), "");
	
	Рез = ПрочитатьАдрес(Сервер, Ресурс, _Параметры);
			
	Если ПустаяСтрока(Рез)  Тогда
				
		Если Отладка Тогда
	        Сообщить("Ошибка чтения адреса: "+ Сервер + Ресурс + "?" + _Параметры);
		КонецЕсли;                                                    
		
		Рез = "" // Фиктивный ответ
		
	КонецЕсли;   
		
	Возврат Рез;
		
КонецФункции // _SMSRU_ПослатьКоманду

Процедура _SMSRU_ОбновитьСтатусДоставки(ТЗ) Экспорт

	Статусы = _SMSRU_СписокСтатусовДоставкиСообщений();
	
	Для Каждого Стр Из ТЗ Цикл
		
		Если ПустаяСтрока(Стр.ИДСообщения) ИЛИ НЕ Стр.Флаг Тогда
			Продолжить;
		КонецЕсли;
		
		Ответ = _SMSRU_ПослатьКоманду("/sms/status", "&id=" + СтрокаВUTF_8(Стр.ИДСообщения));
		ПерваяСтрока = СтрПолучитьСтроку(Ответ, 1);		
		
		Статус = ПерваяСтрока;
		Элемент	= Статусы.НайтиПоЗначению(Статус);
		Если Элемент <> Неопределено Тогда
			Стр.Статус	= Элемент.Представление;
		Иначе
			Стр.Статус	= "Не известный статус доставки (" + Строка(Статус) + ")";
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры // _SMSRU_ОбновитьСтатусДоставки

Функция _SMSRU_ОтправитьSMS(ТЗ, ПосчитатьСтоимость = Ложь) Экспорт
	
	СписокОшибок = _SMSRU_СписокОшибок();
	КоличествоИЛИСтоимостьОтправленных = 0;
	
	Для каждого Стр Из ТЗ Цикл		
		Если Стр.Флаг Тогда
			
			СМС		= ?(ТипСМС = 0,  ШаблонТекстаСМС, Стр.ТекстСМС);
			СМС 	= УдалитьНеПечатныеСимволы(СМС);
			
			Если ПосчитатьСтоимость Тогда
				
				Ответ = _SMSRU_ПослатьКоманду("/sms/cost", 
							"to=" + Строка(Стр.Телефон) + 
							"&text=" + Строка(СМС) + 
							?(Транслитерация, "&translit=1", "")
						); 
				
				ПерваяСтрока = СтрПолучитьСтроку(Ответ, 1);
				Если ПерваяСтрока = "100" Тогда
					КоличествоИЛИСтоимостьОтправленных = КоличествоИЛИСтоимостьОтправленных + Число(СтрПолучитьСтроку(Ответ, 2));
				Иначе
					Статус	= ПерваяСтрока;
					Ошибка	= СписокОшибок.НайтиПоЗначению(Статус);
					Если Ошибка <> Неопределено Тогда
						Стр.Статус	= Ошибка.Представление;
					Иначе
						Стр.Статус	= "Не известный номер ошибки (" + Строка(Статус) + ")";
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				Ответ = _SMSRU_ПослатьКоманду("/sms/send",
							"to=" + Строка(Стр.Телефон) + 
							"&text=" + Строка(СМС) + 
							?(ПустаяСтрока(Отправитель), "", "&from=" + Отправитель) + 
							?(Транслитерация, "&translit=1", "") + 
							?(ОтправлятьВУказанноеВремя, "&time=" + Формат(ДатаИВремяОтправки - Дата(1970, 1, 1, 0, 0, 0), "ЧГ=0"), "")
						); 
				
				ПерваяСтрока = СтрПолучитьСтроку(Ответ, 1);
				Если ПерваяСтрока = "100" Тогда
					Стр.ИДСообщения = СтрПолучитьСтроку(Ответ, 2);
					Стр.Статус = "Отправка";
					КоличествоИЛИСтоимостьОтправленных = КоличествоИЛИСтоимостьОтправленных + 1;
				Иначе
					Статус = ПерваяСтрока;
					Ошибка = СписокОшибок.НайтиПоЗначению(Статус);
					Если Ошибка <> Неопределено Тогда
						Стр.Статус	= Ошибка.Представление;
					Иначе
						Стр.Статус	= "Не известный номер ошибки (" + Строка(Статус) + ")";
					КонецЕсли;					
				КонецЕсли;
				
			КонецЕсли;
						
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоличествоИЛИСтоимостьОтправленных;
	
КонецФункции // _SMSRU_ОтправитьSMS

Процедура _SMSRU_Баланс(Баланс, ЕстьОшибка) Экспорт
	
	ЕстьОшибка		= Ложь;
	СписокОшибок	= _SMSRU_СписокОшибок();
	Ответ			= _SMSRU_ПослатьКоманду("/my/balance");
	ПерваяСтрока	= СтрПолучитьСтроку(Ответ, 1);
	БалансЧисло		= 0;
	Если ПерваяСтрока = "100" Тогда
		БалансЧисло = Число(СокрЛП(СтрПолучитьСтроку(Ответ, 2)));
		Баланс = Строка(БалансЧисло) + " руб.";
	Иначе			
		Попытка
			Ошибка		= СписокОшибок.НайтиПоЗначению(ПерваяСтрока);			
		Исключение
			Ошибка		= Неопределено;
		КонецПопытки;
		
		Баланс	= ?(Ошибка <> Неопределено, Ошибка.Представление, 
			"Не известный номер ошибки проверки баланса (" + Строка(ПерваяСтрока) + ")");
		ЕстьОшибка	= Истина;
	КонецЕсли;	
	
КонецПроцедуры // _SMSRU_Баланс

Функция _SMSRU_СписокОтправителей() Экспорт
	
	СписокОшибок	= _SMSRU_СписокОшибок();
	Ответ			= _SMSRU_ПослатьКоманду("/my/senders");
	ПерваяСтрока	= СтрПолучитьСтроку(Ответ, 1);
	Если ПерваяСтрока = "100" Тогда
		
		Результат = Новый СписокЗначений;
		Для Индекс = 2 По СтрЧислоСтрок(Ответ) Цикл
			Результат.Добавить(СтрПолучитьСтроку(Ответ, Индекс));
		КонецЦикла;
		
		Возврат Результат;
		
	Иначе
		
		Ошибка = СписокОшибок.НайтиПоЗначению(ПерваяСтрока);
		Если Ошибка <> Неопределено Тогда
			СтрокаОшибки = Ошибка.Представление;
		Иначе
			СтрокаОшибки = ?(Ошибка <> Неопределено, Ошибка.Представление, 
				"Не известный номер ошибки проверки баланса (" + Строка(ПерваяСтрока) + ")");
		КонецЕсли;
		
		Возврат СтрокаОшибки;
	КонецЕсли;	
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////
// SMSC.RU

Функция _SMSCRU_СписокОшибок() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить(-1, "Ошибка в параметрах");
	Список.Добавить(-2, "Неверный логин или пароль");
	Список.Добавить(-3, "Недостаточно средств на счете Клиента");
	Список.Добавить(-4, "IP-адрес временно заблокирован из-за частых ошибок в запросах");
	Список.Добавить(-5, "Неверный формат даты");
	Список.Добавить(-6, "Сообщение запрещено (по тексту или по имени отправителя)");
	Список.Добавить(-7, "Неверный формат номера телефона");
	Список.Добавить(-8, "Сообщение на указанный номер не может быть доставлено");
	Список.Добавить(-9, "Слишком много одинаковых запросов в течении минуты");
	Список.Добавить(-10, "Код уже был отправлен на указанный номер. Повторная попытка возможна через 8 часов");
	Список.Добавить(-11, "Неверный код подтверждения");
	
	Возврат Список;
	
КонецФункции

Функция _SMSCRU_СписокСтатусовДоставкиСообщений() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить(-3, "Сообщение не найдено");
	Список.Добавить(-1, "Ожидает отправки");
	Список.Добавить(0, 	"Передано оператору");
	Список.Добавить(1, 	"Доставлено");
	Список.Добавить(3, 	"Просрочено");
	Список.Добавить(20, "Невозможно доставить");
	Список.Добавить(22, "Неверный номер");
	Список.Добавить(23, "Запрещено");
	Список.Добавить(24, "Недостаточно средств");
	Список.Добавить(25, "Недоступный номер");
	
	Возврат Список;
	
КонецФункции

Функция _SMSCRU_ПослатьКоманду(Команда, Аргументы = "") Экспорт

	Сервер = "smsc.ru";
	Ресурс = "/sys/" + Команда + ".php";
    _Параметры = "login=" + СокрЛП(URLEncode2(Логин)) + "&psw=" + СокрЛП(URLEncode2(Пароль)) + "&fmt=1&charset=utf-16" + 
		?(Не ПустаяСтрока(Аргументы), "&" + СокрЛП(Аргументы), "");
	
	Для Сч = 1 По 3 Цикл
    	
		Если Сч > 1 Тогда
    	    Для Сч2 = 1 По 2000 Цикл
				у = Сч2; // Небольшой таймаут
			КонецЦикла;
		КонецЕсли;
			
		Если Сч = 3 Тогда
			Сервер = "www2.smsc.ru";
		КонецЕсли;	
		
		Рез = ПрочитатьАдрес(Сервер, Ресурс, _Параметры);
		
		Если НЕ ПустаяСтрока(Рез) Тогда
		    Прервать;
		КонецЕсли;
		
	КонецЦикла;   
	
	Если ПустаяСтрока (Рез)  Тогда

		Если Отладка Тогда
	        Сообщить("Ошибка чтения адреса: "+ Сервер + Ресурс + "?" + _Параметры);
		КонецЕсли;                                                    
		
		Рез = "," // Фиктивный ответ
		
	КонецЕсли;                       
	
	Возврат Строка2Список(Рез);
	
КонецФункции // _SMSC_ПослатьКоманду()

Функция _SMSCRU_ОтправитьSMS(ТЗ, ПосчитатьСтоимость = Ложь) Экспорт

	Ошибки = _SMSCRU_СписокОшибок();
	
	ТЗСообщения = Новый ТаблицаЗначений;
	ТЗСообщения.Колонки.Добавить("Телефоны");
	ТЗСообщения.Колонки.Добавить("ИДы");
	ТЗСообщения.Колонки.Добавить("СМС");
	ТЗСообщения.Колонки.Добавить("Количество");
	
	Телефоны = "";
	ИДы = "";
	Для Каждого Стр Из ТЗ Цикл
		
		Если Стр.Флаг Тогда
			Получатель = Стр.Телефон;
			
			СМС = ?(ТипСМС = 0,  ШаблонТекстаСМС, Стр.ТекстСМС);
			СМС = УдалитьНеПечатныеСимволы(СМС);
			
			НайденнаяСтрока = ТЗСообщения.Найти(СМС, "СМС");
			Если НайденнаяСтрока = Неопределено Тогда
				ИД = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
				
				НоваяСтрока				= ТЗСообщения.Добавить();
				НоваяСтрока.СМС			= СМС;
				НоваяСтрока.Телефоны	= "";
				НоваяСтрока.ИДы 		= ИД;
				НоваяСтрока.Количество	= 0;
				НайденнаяСтрока 		= НоваяСтрока;
			КонецЕсли;
						
			НайденнаяСтрока.Телефоны = НайденнаяСтрока.Телефоны + ?(ПустаяСтрока(НайденнаяСтрока.Телефоны), "", ",") + СтрЗаменить(СтрЗаменить(Получатель, ":", ","), ";", ",");
			НайденнаяСтрока.Количество	= НайденнаяСтрока.Количество + 1;
			Если НЕ ПосчитатьСтоимость Тогда
				Стр.ИДСообщения = НайденнаяСтрока.ИДы;
			КонецЕсли;
			                                      
		КонецЕсли;
	КонецЦикла;
	
	КоличествоИЛИСтоимостьОтправленных = 0;
	Для Каждого Строки Из ТЗСообщения Цикл
		                                
	    Ответ = _SMSCRU_ПослатьКоманду ("send", 
						"list=" +URLEncode2(Строки.Телефоны + ":" + Строки.СМС) + 
						?(ПосчитатьСтоимость, "", "&id=" + Строки.ИДы) + 
						"&pp=369101" +
	                    "&translit=" + ?(Транслитерация, "1", "0") + 						
						?(ПустаяСтрока(Отправитель), "", "&sender=" + URLEncode2(Отправитель)) + 
						"&cost=" + ?(ПосчитатьСтоимость, 1, 0) +
						?(ОтправлятьВУказанноеВремя, "&time=" + Формат(ДатаИВремяОтправки, "ДФ='dd.MM.yy HH:mm'"), "")
				);
		
		Рез1 = Ответ[0].Значение;
		Рез2 = Число(Ответ[1].Значение);
		
		Если ПосчитатьСтоимость Тогда
			Рез = Число(Рез1);
		Иначе
			Рез = Рез2;
		КонецЕсли;
		                                                   
		Если Рез > 0 Тогда
			
            КоличествоИЛИСтоимостьОтправленных = КоличествоИЛИСтоимостьОтправленных + Рез;
			
			Если НЕ ПосчитатьСтоимость Тогда
				П = Новый Структура;
				П.Вставить("ИДСообщения", Строки.ИДы);
				МассивНайденныхСтрок = ТЗ.НайтиСтроки(П);
				Для Каждого СтрокиТЗ Из МассивНайденныхСтрок Цикл
					// Установим статус отправлено
					СтрокиТЗ.Статус = "Отправлено";					
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			Ошибка = Ошибки.НайтиПоЗначению(Рез2);
			Если Ошибка <> Неопределено Тогда
				Сообщить ("Телефоны " + Строки.Телефоны + " " + Ошибка.Представление);
			Иначе
	        	Сообщить ("Телефоны " + Строки.Телефоны + " Ошибка отправки сообщения (" + Строка(Рез2) + ")");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат КоличествоИЛИСтоимостьОтправленных;
	
КонецФункции

Процедура _SMSCRU_ОбновитьСтатусДоставки(ТЗ) Экспорт
	
	Статусы = _SMSCRU_СписокСтатусовДоставкиСообщений();
	                           
	Попытка
		ТЗИДы = ТЗ.Скопировать(,"Телефон,ИДСообщения");
	Исключение
		ТЗИДы = ТЗ.Выгрузить(,"Телефон,ИДСообщения");
	КонецПопытки;
	ТЗИДы.Свернуть("Телефон,ИДСообщения");

	Телефоны = "";
	ИДы = "";
	Для Каждого Стр Из ТЗИДы Цикл
			
		Если ПустаяСтрока(Стр.ИДСообщения) Тогда
			Продолжить;
		КонецЕсли;
		
		Ответ = _SMSCRU_ПослатьКоманду("status", "phone=" + СтрокаВUTF_8(Стр.Телефон) + "&id=" + СтрокаВUTF_8(Стр.ИДСообщения));
				
		Попытка
			Рез1 = Число(УдалитьЛишниеСимволы(Ответ[0].Значение));
		Исключение
			Рез1 = Неопределено;
		КонецПопытки;
		
		Если Ответ.Количество() = 2 Тогда
			Попытка
				Рез2 = Число(УдалитьЛишниеСимволы(Ответ[1].Значение));
			Исключение
				Рез2 = Неопределено;
			КонецПопытки;
		Иначе 
			Попытка
				Рез2 = Число(УдалитьЛишниеСимволы(Ответ[2].Значение));
			Исключение
				Рез2 = Неопределено;
			КонецПопытки;
		КонецЕсли;
						
		П = Новый Структура;
		П.Вставить("ИДСообщения", Стр.ИДСообщения);
		П.Вставить("Телефон", Стр.Телефон);
		МассивНайденныхСтрок = ТЗ.НайтиСтроки(П);
		Для Каждого СтрокиТЗ Из МассивНайденныхСтрок Цикл
			
			Если Рез1 = Неопределено Или Рез2 = Неопределено Тогда 
				СтрокиТЗ.Статус = "Ошибка определения статуса";
				Продолжить;
			КонецЕсли;
			
			Если (Рез2 >= 0) Тогда
				
				Статус = Статусы.НайтиПоЗначению(Рез1);
				СтрокиТЗ.СтатусСообщения = Рез1;
				СтрокиТЗ.Статус = Статус.Представление;

			Иначе
				Статус = Статусы.НайтиПоЗначению(Рез2);
				СтрокиТЗ.СтатусСообщения = Рез1;
				Если Статус <> Неопределено Тогда
					СтрокиТЗ.Статус = Статус.Представление;
				Иначе
					СтрокиТЗ.Статус = "Ошибка определения статуса (" + Рез2 + ")";
				КонецЕсли;				
			КонецЕсли;	
		КонецЦикла;
				
	КонецЦикла;
	
КонецПроцедуры

Процедура _SMSCRU_Баланс(Баланс, ЕстьОшибка) Экспорт
	
	СписокОшибок	= _SMSCRU_СписокОшибок();
    Ответ			= _SMSCRU_ПослатьКоманду("balance"); // (balance) или (0, -error)
	Попытка
		Результат		= Число(Ответ[0].Значение);
	Исключение
		Баланс	= "Ошибка проверки баланса! Проверьте баланс на smsc.ru";
		ЕстьОшибка = Истина;
		Возврат;
	КонецПопытки;

	Если Результат > 0 Тогда
		БалансЧисло = Результат;
		Баланс		= Строка(Результат) + " руб."; 
	Иначе
		Попытка
			Ошибка		= СписокОшибок.НайтиПоЗначению(Число(Ответ[1].Значение));			
		Исключение
			Ошибка		= Неопределено;
		КонецПопытки;
		Баланс			= ?(Ошибка <> Неопределено, Ошибка.Представление, "Не известный номер ошибки проверки баланса (" + Строка(Результат) + ")");
		ЕстьОшибка = Истина;
	КонецЕсли;	
	
КонецПроцедуры

Функция _SMSCRU_СписокОтправителей() Экспорт
	
	СписокОшибок	= _SMSCRU_СписокОшибок();
	Ответ			= _SMSCRU_ПослатьКоманду("senders", "get=1");
	ПерваяСтрока	= СтрПолучитьСтроку(Ответ, 1);
	Если Найти(ПерваяСтрока, "0;") = 0 Тогда
				
		Результат = Новый СписокЗначений;
		Для Индекс = 1 По СтрЧислоСтрок(Ответ) Цикл			
			Стр = СтрПолучитьСтроку(Ответ, Индекс);
			Массив = _СтрРазделить(Стр, ";", Ложь);
			Для Каждого СтрокаМассива Из Массив Цикл
				Стр = СокрЛП(СтрокаМассива);
				Стр = СтрЗаменитьБезУчетаРегистра(Стр, " = ", "=");
				Если _СтрНачинаетсяС(НРег(Стр), "name=") Тогда
					Результат.Добавить(СокрЛП(Сред(Стр, Найти(Стр, "=") + 1)));
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Возврат Результат;
		
	Иначе
		
		Ошибка		= СписокОшибок.НайтиПоЗначению(Число(СокрЛП(Сред(ПерваяСтрока, Найти(ПерваяСтрока, ";") + 1))));
		Если Ошибка <> Неопределено Тогда
			СтрокаОшибки	= Ошибка.Представление;
		Иначе
			СтрокаОшибки	= ?(Ошибка <> Неопределено, Ошибка.Представление, "Не известный номер ошибки получения отправителя (" + Строка(ПерваяСтрока) + ")");
		КонецЕсли;
		
		Возврат СтрокаОшибки;
	КонецЕсли;	
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////
// SMS4B.RU

Функция _SMS4BRU_СписокОшибок()
	
	Список = Новый СписокЗначений;
	
	Список.Добавить(0,		"Превышен предел открытых сессий");
	Список.Добавить(-1,		"Неверный логин или пароль");
	Список.Добавить(-2,		"Сессия  закрыта");
	Для Индекс = 3 По 19 Цикл
		Список.Добавить(-Индекс, "Ошибка клиентского ПО или отказ сервиса");
	КонецЦикла;
	Список.Добавить(-20,	"Сбой сеанса связи");
	Список.Добавить(-21,	"Сообщение не идентифицировано");
	Список.Добавить(-22,	"Неверный идентификатор сообщения");
	Список.Добавить(-23,	"Неверное смещение GMT");
	Список.Добавить(-30,	"Неверная кодировка сообщения");
	Список.Добавить(-31,	"Неразрешенная зона тарификации");
	Список.Добавить(-32,	"Неверная дата начала или окончания доставки сообщения");
	Список.Добавить(-33,	"Превышение длительности доставки");
	Список.Добавить(-34,	"Превышение срока актуальности доставки");
	Список.Добавить(-35,	"Неверный период доставки сообщения");
	Список.Добавить(-36,	"Неверный код группы");
	Список.Добавить(-50,	"Неверный отправитель");
	Список.Добавить(-51,	"Неразрешенный получатель");
	Список.Добавить(-52,	"Недостаточно средств на Вашем счете");
	Список.Добавить(-53,	"Незарегистрированный отправитель");
	Для Индекс = 54 По 59 Цикл
		Список.Добавить(-Индекс, "Таймаут изменения счета");
	КонецЦикла;
	Список.Добавить(-66,	"Не задан отправитель");
	Список.Добавить(-67,	"Превышение сроков отправки");
	Список.Добавить(-68,	"Пользователь заблокирован");
	
	Возврат Список;
	
КонецФункции // ОписаниеОшибкиSMS4B

Функция _SMS4BRU_СписокСтатусовДоставкиСообщений() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить(1, "Доставка");
	Список.Добавить(2, "В очереди");
	Список.Добавить(3, "Отправлено");
	Список.Добавить(4, "Не отправлено");
	Список.Добавить(5, "Доставлено");
	Список.Добавить(6, "Не доставлено");
	Список.Добавить(7, "Ошибка");
	Список.Добавить(8, "Получено");
	Список.Добавить(9, "Получено частично");
	
	Возврат Список;
	
КонецФункции

// Подключается к сервису sms4b возвращает структуру с результатом подключения
Функция _SMS4BRU_Подключить() Экспорт
	
	Сессия = "";
	
	Попытка
		Скрипт = Новый COMОбъект("MSScriptControl.ScriptControl");
		Скрипт.Language = "javascript";
		TimeZoneOffset = Скрипт.Eval("new Date().getTimezoneOffset()");
		GMT = Окр(-1 * TimeZoneOffset / 60);
	Исключение   
		GMT = 3; // Пусть будет Московское время по умолчанию если ошибка
	КонецПопытки;
	 
	Соединение = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
	Соединение.Option		   (2					, "utf-8");
	Соединение.Open			   ("POST"				, "https://sms4b.ru/ws/sms.asmx/StartSession",0);
	Соединение.SetRequestHeader("Accept-Language"	, "ru");
	Соединение.SetRequestHeader("Accept-Charset"	, "utf-8");
	Соединение.setRequestHeader("Content-Language"	, "ru");
	Соединение.setRequestHeader("Content-Charset"	, "utf-8");
	Соединение.setRequestHeader("Content-type"		, "application/x-www-form-urlencoded; charset=utf-8");

	ПараметрыПОСТ = "Login=" + Логин + "&Password=" + Пароль + "&Gmt=" + Строка(GMT);
	Соединение.Send(ПараметрыПОСТ);
	ТекстОтвета = Соединение.ResponseText();
	
	// Обработка результата
	Подключение = Новый Структура("РезультатПодключения", 0);
	// Ответ
	// <?xml version="1.0" encoding="utf-8"?>
	// <long xmlns="SMS4B">-1</long>
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ТекстОтвета);
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.Имя = "long" Тогда
			Если Чтение.Прочитать() Тогда
				Подключение.РезультатПодключения = Число(Чтение.Значение);
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Чтение.Закрыть();
	
	Возврат Подключение;
	
КонецФункции // ПодключитьSMS4B()

// Отключается от сервиса sms4b
Функция _SMS4BRU_Отключить() Экспорт
	
	Соединение = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
	Соединение.Option		   (2					, "utf-8");
	Соединение.Open			   ("POST"				, "https://sms4b.ru/ws/sms.asmx/CloseSession",0);
	Соединение.SetRequestHeader("Accept-Language"	, "ru");
	Соединение.SetRequestHeader("Accept-Charset"	, "utf-8");
	Соединение.setRequestHeader("Content-Language"	, "ru");
	Соединение.setRequestHeader("Content-Charset"	, "utf-8");
	Соединение.setRequestHeader("Content-type"		, "application/x-www-form-urlencoded; charset=utf-8");

	ПараметрыПОСТ = "SessionID=" + Строка(Формат(Сессия, "ЧРД=; ЧРГ=; ЧН=0; ЧГ="));
	Соединение.Send(ПараметрыПОСТ);
	ТекстОтвета = Соединение.ResponseText();
	
	// Обработка результата
	Результат = 0;
	// Ответ
	// <int xmlns="SMS4B">0</int>
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ТекстОтвета);
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.Имя = "int" Тогда
			Если Чтение.Прочитать() Тогда
				Результат = Число(Чтение.Значение);
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Чтение.Закрыть();
		
	Возврат Результат;
	
КонецФункции

Функция _SMS4BRU_ПолучитьБаланс()
	
	Соединение = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
	Соединение.Option		   (2					, "utf-8");
	Соединение.Open			   ("POST"				, "https://sms4b.ru/ws/sms.asmx/ParamSMS",0);
	Соединение.SetRequestHeader("Accept-Language"	, "ru");
	Соединение.SetRequestHeader("Accept-Charset"	, "utf-8");
	Соединение.setRequestHeader("Content-Language"	, "ru");
	Соединение.setRequestHeader("Content-Charset"	, "utf-8");
	Соединение.setRequestHeader("Content-type"		, "application/x-www-form-urlencoded; charset=utf-8");

	ПараметрыПОСТ = "SessionID=" + Строка(Формат(Сессия, "ЧРД=; ЧРГ=; ЧН=0; ЧГ="));
	Соединение.Send(ПараметрыПОСТ);
	ТекстОтвета = Соединение.ResponseText();
	
	// Обработка результата
	Результат = Новый Структура("РезультатПодключения,Баланс", 0, 0);
	// Ответ
	// <int xmlns="SMS4B">0</int>
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ТекстОтвета);
	
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.Имя = "Result" Тогда
			Если Чтение.Прочитать() Тогда
				Результат.РезультатПодключения = Число(Чтение.Значение);
			КонецЕсли;
			Чтение.Прочитать();
		ИначеЕсли Чтение.Имя = "Rest" Тогда
			Если Чтение.Прочитать() Тогда
				Результат.Баланс = Число(Чтение.Значение);
			КонецЕсли;
			Чтение.Прочитать();
		КонецЕсли;
		
	КонецЦикла;
	Чтение.Закрыть();
		
	Возврат Результат;	
	
КонецФункции

// Получить баланс на счету
Процедура _SMS4BRU_Баланс(Баланс, ЕстьОшибка) Экспорт
	
	Ошибки = _SMS4BRU_СписокОшибок();
	
	Подключение = _SMS4BRU_Подключить();
	Если Подключение.РезультатПодключения <= 0 Тогда
		
		Ошибка = Ошибки.НайтиПоЗначению(Подключение.РезультатПодключения);
		Баланс	= ?(Ошибка <> Неопределено, Ошибка.Представление, "Не известный номер ошибки проверки баланса (" + Строка(Подключение.РезультатПодключения) + ")");
		ЕстьОшибка = Истина;
		
	Иначе
		
		// Получаем сессию
		Сессия = Подключение.РезультатПодключения;
		
		// Получаем баланс
		Результат = _SMS4BRU_ПолучитьБаланс();
		Если Результат.РезультатПодключения > 0 Тогда
			БалансЧисло = Результат.Баланс;
			Баланс = Строка(Результат.Баланс); 
		Иначе
			Ошибка = Ошибки.НайтиПоЗначению(Подключение.РезультатПодключения);
			Баланс	= ?(Ошибка <> Неопределено, Ошибка.Представление, "Не известный номер ошибки проверки баланса (" + Строка(Подключение.РезультатПодключения) + ")");
			ЕстьОшибка = Истина;
		КонецЕсли;
		
		// Отключаем сессию
		_SMS4BRU_Отключить();
		
	КонецЕсли;

		
КонецПроцедуры

Функция _SMS4BRU_ОтправитьSMS(ТЗ) Экспорт
	
	Ошибки = _SMS4BRU_СписокОшибок();
	
	Соединение = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
	Соединение.Option		   (2					, "utf-8");
	Соединение.Open			   ("POST"				, "https://sms4b.ru/ws/sms.asmx/SendSMS",0);
	Соединение.SetRequestHeader("Accept-Language"	, "ru");
	Соединение.SetRequestHeader("Accept-Charset"	, "utf-8");
	Соединение.setRequestHeader("Content-Language"	, "ru");
	Соединение.setRequestHeader("Content-Charset"	, "utf-8");
	Соединение.setRequestHeader("Content-type"		, "application/x-www-form-urlencoded; charset=utf-8");
	
	КоличествоОтправленных = 0;
	
	Для каждого Стр Из ТЗ Цикл
		
		Если Стр.Флаг Тогда
			Получатель = Стр.Телефон;
			
			СМС = ?(ТипСМС = 0,  ШаблонТекстаСМС, Стр.ТекстСМС);
			
			// При необходимости транслитирация сообщения
			СМС = ?(Транслитерация, ТранслитерацияТекста(СМС), СМС);
			СМС = УдалитьНеПечатныеСимволы(СМС);
			
			ПараметрыПОСТ = 
				"Login=" + Логин + 
				"&Password=" + Пароль + 
				"&Source=" + Отправитель + 
				"&Phone=" + Получатель + 
				"&Text=" + СМС;
			
			Соединение.Send(ПараметрыПОСТ);
			ТекстОтвета = Соединение.ResponseText();
			
			// Обработка результата
			// Ответ
			//<?xml version="1.0" encoding="utf-8"?>
			//<string xmlns="SMS4B">string</string>			
			Чтение = Новый ЧтениеXML;
			Чтение.УстановитьСтроку(ТекстОтвета);
			Пока Чтение.Прочитать() Цикл
				
				Если Чтение.Имя = "string" Тогда
					Если Чтение.Прочитать() Тогда
						ГУИД = Чтение.Значение;
						Если Найти(ГУИД, "-") > 2 Тогда
							Стр.ИДСообщения = ГУИД;
							Стр.Статус = "Отправка";
						Иначе
							Ошибка = Ошибки.НайтиПоЗначению(Число(ГУИД));
							Стр.Статус = ?(Ошибка <> Неопределено, Ошибка.Представление, "Ошибка отправки (" + ГУИД + ")");
						КонецЕсли;

						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Чтение.Закрыть();
			
			КоличествоОтправленных = КоличествоОтправленных + 1;
			
		КонецЕсли;
	КонецЦикла;
	
	_SMS4BRU_Отключить();
	
КонецФункции

Процедура _SMS4BRU_ОбновитьСтатусДоставки(ТЗ) Экспорт
	
	Статусы		= _SMS4BRU_СписокСтатусовДоставкиСообщений();
	Ошибки		= _SMS4BRU_СписокОшибок();
	Подключение = _SMS4BRU_Подключить();
	
	Если Подключение.РезультатПодключения <= 0 Тогда
		
		Ошибка = Ошибки.НайтиПоЗначению(Подключение.РезультатПодключения);
		Баланс = ?(Ошибка <> Неопределено, Ошибка.Представление, "Не известная ошибка " + Строка(Подключение.РезультатПодключения));
		БалансЧисло = 0;
		
	Иначе
		
		// Получаем сессию
		Сессия = Подключение.РезультатПодключения;
	
		Соединение = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
		Соединение.Option		   (2					, "utf-8");
		Соединение.Open			   ("POST"				, "https://sms4b.ru/ws/sms.asmx/CheckSMS",0);
		Соединение.SetRequestHeader("Accept-Language"	, "ru");
		Соединение.SetRequestHeader("Accept-Charset"	, "utf-8");
		Соединение.setRequestHeader("Content-Language"	, "ru");
		Соединение.setRequestHeader("Content-Charset"	, "utf-8");
		Соединение.setRequestHeader("Content-type"		, "application/x-www-form-urlencoded; charset=utf-8");
		
		Для каждого Стр Из ТЗ Цикл
			
			Если ПустаяСтрока(Стр.ИДСообщения) ИЛИ НЕ Стр.Флаг Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыПОСТ = "SessionId=" + Строка(Формат(Сессия, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=")) + "&Guids=" + Стр.ИДСообщения;
			Соединение.Send(ПараметрыПОСТ);
			ТекстОтвета = Соединение.ResponseText();
			
			// Обработка результата
			// Ответ
			//<?xml version="1.0" encoding="utf-8"?>
			//<CheckSMSResult xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="SMS4B">
			//  <Result>1</Result>
			//  <List>
			//    <CheckSMSList>
			//      <G>277A8435-CC52-414A-BB14-165F2F753CE9</G>
			//      <R>65793</R>
			//    </CheckSMSList>
			//  </List>
			//</CheckSMSResult>
			Чтение = Новый ЧтениеXML;
			Чтение.УстановитьСтроку(ТекстОтвета);
			Пока Чтение.Прочитать() Цикл
				            
				Если Чтение.Имя = "Result" И Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					Если Чтение.Прочитать() Тогда
						Количество = Число(Чтение.Значение);
						Если Количество <= 0 Тогда
							Ошибка = Ошибки.НайтиПоЗначению(Количество);
							Стр.Статус = ?(Ошибка <> Неопределено, Ошибка.Представление, "Не известная ошибка " + Строка(Количество));
							Прервать;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли Чтение.Имя = "R" И Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					Если Чтение.Прочитать() Тогда
						
						КодСтатуса = Число(Чтение.Значение);
						ТекСтатус = 0;
						
						Если КодСтатуса >= 0 Тогда
							
							// Раскладываем битовую маску статуса
							к3 = Цел(КодСтатуса / 65536); // если нечетное то статус окончательный, 
														  // если четное - то ещё идет обработка сообщения
							к2 = Цел((КодСтатуса - (к3 * 65536)) / 256);       // количество доставленных частей
							к1 = Цел(КодСтатуса - (к3 * 65536) - (к2 * 256));  // количество частей всего
							
							// Вычисляем статус сообщения
							Если НЕ к3/2 = Цел(к3/2) Тогда // нечетное
								Если к1 = к2 Тогда
									Если к2 = 0 Тогда
										ТекСтатус = 7; // Ошибка
									Иначе 
										ТекСтатус = 5; // Доставлено
									КонецЕсли;
								Иначе
									Если Стр.СтатусСообщения = 2 Тогда // статус "В очереди"
										ТекСтатус = 4; // Не отправлено
									ИначеЕсли Стр.СтатусСообщения = 3 Тогда // статус "Отправлено"
										ТекСтатус = 6; // Не доставлено
									КонецЕсли;	
									Если к2 > 0 Тогда // Обработана часть(и) сообщения
										Если Стр.СтатусСообщения = 2 Тогда // статус "В очереди"
											// "Отправлено частей " + Строка(к2) + " из " + Строка(к1));
										ИначеЕсли Стр.СтатусСообщения = 3 Тогда // статус "Отправлено"
											// "Доставлено частей " + Строка(к2) + " из " + Строка(к1));
										КонецЕсли;	
									КонецЕсли;
								КонецЕсли;	
							Иначе // четное !!!
								Если к1 = к2 И Стр.СтатусСообщения = 2 Тогда // статус "В очереди"
									ТекСтатус = 3; // Отправлено
								ИначеЕсли к2 = 0 ИЛИ (к3 = 0 И к2 < к1) Тогда
									ТекСтатус = 3; // Отправлено
								КонецЕсли;
							КонецЕсли;
							
							Стр.СтатусСообщения = ТекСтатус;
							ССтатус = Статусы.НайтиПоЗначению(ТекСтатус);
							Стр.Статус = ?(ССтатус <> Неопределено, ССтатус.Представление, "Не известный статус (" + ТекСтатус + ")");

						КонецЕсли;
							
						Прервать;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Чтение.Закрыть();
			
		КонецЦикла;
		
		_SMS4BRU_Отключить();
			
	КонецЕсли;	
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////
// TERASMS.RU

// Константы

Функция _TERASMSRU_СписокОшибок() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить(-1, "Неверный логин или пароль");
	Список.Добавить(-20, "Пустой текст сообщения");
	Список.Добавить(-30, "Пустой номер абонента");
	Список.Добавить(-40, "Неправильно задан номер абонента");
	Список.Добавить(-50, "Неправильно задано имя отправителя");
	Список.Добавить(-60, "Рассылка по данному направлению недоступна");
	Список.Добавить(-70, "Недостаточно средств на счете");
	Список.Добавить(-80, "Не установлена стоимость рассылки по данному направлению");
	Список.Добавить(-90, "Рассылка запрещена");
	Список.Добавить(-100, "Не указаны необходимые параметры");
	Список.Добавить(-110, "Номер в черном списке");
	Список.Добавить(-120, "Некорректно задано время отложенной отправки");
	Список.Добавить(-130, "Некорректно задано временное окно отправки");
	Список.Добавить(-140, "Передан некорректный ID рассылки");
	Список.Добавить(-160, "Превышен дневной лимит рассылки (Вы можете установить максимальную сумму ежедневной рассылки после согласования с Вашим менеджером)");
	
	Возврат Список;
	
КонецФункции

Функция _TERRASMSRU_СписокСтатусовДоставкиСообщений() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить(0	, "Добавлена в очередь");
	Список.Добавить(1	, "В очереди");
	Список.Добавить(12	, "Доставлено");
	Список.Добавить(17	, "Неизвестный статус");
	Список.Добавить(18	, "Отказ в передаче");
	Список.Добавить(13	, "Просрочено");
	Список.Добавить(15	, "Не доставлено");
	Список.Добавить(255	, "Недействительно");
	                    
	Возврат Список;
	
КонецФункции

// Отправка, статусы, баланс

Функция _TERASMSRU_ПослатьКоманду(Команда, Аргументы = "") Экспорт

	Сервер = "auth.terasms.ru";
		
	Ресурс = Команда;                         
    _Параметры = "login=" + СокрЛП(URLEncode(Логин)) 
		+ "&password=" + СокрЛП(URLEncode(Пароль)) 
		+ "&source=multisms" 
		+ ?(Не ПустаяСтрока(Аргументы), "&" + СокрЛП(Аргументы), "");
	
	Рез = ПрочитатьАдрес(Сервер, Ресурс, _Параметры);
		
	Если ПустаяСтрока (Рез)  Тогда

		Если Отладка Тогда
	        Сообщить("Ошибка чтения адреса: "+ Сервер + Ресурс + "?" + _Параметры);
		КонецЕсли;                                                    
		
		Рез = "" // Фиктивный ответ
		
	КонецЕсли;                       
	
	Возврат Рез;
	
КонецФункции // _TERASMSRU_ПослатьКоманду()

Процедура _TERASMSRU_ОбновитьСтатусДоставки(ТЗ) Экспорт
	
	Статусы = _TERRASMSRU_СписокСтатусовДоставкиСообщений();
	
	Для каждого Стр Из ТЗ Цикл
		
		Если ПустаяСтрока(Стр.ИДСообщения) ИЛИ НЕ Стр.Флаг Тогда
			Продолжить;
		КонецЕсли;
		
		Ответ = _TERASMSRU_ПослатьКоманду("/outbox/status/", "&id=" + URLEncode(Стр.ИДСообщения));
		// 255753949:440036316:12,255753949:440036317:12
		МассивРазбиений = РазложитьСтрокуВМассивПодстрок(Ответ, ",");
		Для Каждого Эл Из МассивРазбиений Цикл		
			Массив = РазложитьСтрокуВМассивПодстрок(Эл, ":");
			Если Массив.Количество() = 3 Тогда
				Статус	= Число(Массив[2]);
				Элемент	= Статусы.НайтиПоЗначению(Статус);
				Если Элемент <> Неопределено Тогда
					Стр.Статус	= Элемент.Представление;
				Иначе
					Стр.Статус	= "Не известный статус доставки (" + Строка(Статус) + ")";
				КонецЕсли;
			Иначе		
				Стр.Статус = "Неизвестная ошибка доставки СМС <" + Эл + ">";
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция _TERASMSRU_ОтправитьSMS(ТЗ, ПосчитатьСтоимость = Ложь) Экспорт
	
	КоличествоИЛИСтоимостьОтправленных = 0;
	
	СписокОшибок = _TERASMSRU_СписокОшибок();
	
	Для каждого Стр Из ТЗ Цикл		
		Если Стр.Флаг Тогда
			
			Если ТипСМС = 0 Тогда
				СМС = ?(Транслитерация, ТранслитерацияТекста(ШаблонТекстаСМС), ШаблонТекстаСМС);				
			Иначе				
				СМС = Стр.ТекстСМС;
			КонецЕсли;
			
			СМС = УдалитьНеПечатныеСимволы(СМС);
			
			Ответ	= _TERASMSRU_ПослатьКоманду("/outbox/send/", 
				"target=" + URLEncode(Стр.Телефон) 
				+ "&message=" + URLEncode(СМС) 
				+ ?(ПустаяСтрока(Отправитель), "", "&sender=" + URLEncode(Отправитель)) 
				+ ?(ОтправлятьВУказанноеВремя, "&timezone=1&date_schedule=" +  URLEncode(Формат(ДатаИВремяОтправки, "ДФ='yyyy-MM-dd HH:mm:ss'")), ""));
			
			ПерваяСтрока = СтрПолучитьСтроку(Ответ, 1);
			Если ПерваяСтрока <> "" И Лев(ПерваяСтрока, 1) <> "-" Тогда
				Стр.ИДСообщения = ПерваяСтрока;
				Стр.Статус		= "Отправка";
				КоличествоИЛИСтоимостьОтправленных = КоличествоИЛИСтоимостьОтправленных + 1;
			Иначе
				Ошибка = СписокОшибок.НайтиПоЗначению(Число(ПерваяСтрока));
				Стр.Статус	= ?(Ошибка <> Неопределено, Ошибка.Представление, "Ошибка отправки SMS (" + ПерваяСтрока + ")");
			КонецЕсли;				
		КонецЕсли;						
	КонецЦикла;
	
	Возврат КоличествоИЛИСтоимостьОтправленных;
	
КонецФункции

Процедура _TERASMSRU_Баланс(Баланс, ЕстьОшибка) Экспорт
	
	ЕстьОшибка		= Ложь;
	ОписаниеОшибки 	= "";
	СписокОшибок	= _TERASMSRU_СписокОшибок();
	Ответ			= _TERASMSRU_ПослатьКоманду("/outbox/balance/");
	СуммаИлиОшибка = Число(СтрПолучитьСтроку(Ответ, 1));
	Если (СуммаИлиОшибка >= 0) ИЛИ Найти(СтрПолучитьСтроку(Ответ, 1), ".") <> 0 Тогда
		БалансЧисло	= СуммаИлиОшибка;
		Баланс		= Строка(БалансЧисло) + " руб.";
	Иначе
		Ошибка		= СписокОшибок.НайтиПоЗначению(СуммаИлиОшибка);
		Если Ошибка <> Неопределено Тогда
			Баланс	= Ошибка.Представление;
		Иначе
			Баланс	= ?(Ошибка <> Неопределено, Ошибка.Представление, "Не известный номер ошибки проверки баланса (" + Строка(СуммаИлиОшибка) + ")");
		КонецЕсли;
		ЕстьОшибка	= Истина;
	КонецЕсли;	
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////
// SMS-PROSTO.RU
Функция _PROSTOSMS_ОтправитьSMS(ТЗ, ПосчитатьСтоимость = Ложь) Экспорт
	
	КоличествоИЛИСтоимостьОтправленных = 0;
	
	Для каждого Стр Из ТЗ Цикл		
		Если Стр.Флаг Тогда
			
			Если ТипСМС = 0 Тогда
				СМС = ?(Транслитерация, ТранслитерацияТекста(ШаблонТекстаСМС), ШаблонТекстаСМС);				
			Иначе				
				СМС = Стр.ТекстСМС;
			КонецЕсли;
	        СМС		= УдалитьНеПечатныеСимволы(СМС); 
			Ответ	= _PROSTOSMS_ПослатьКоманду("method=push_msg",
				"text=" + (СМС) 
				+ "&phone="	+ URLEncode(Стр.Телефон) 
				+ ?(ПустаяСтрока(Отправитель),"", "&sender_name=" + URLEncode(Отправитель))
				+ ? (ОтправлятьВУказанноеВремя, "&set_aside_time=" + URLEncode(Формат(ДатаИВремяОтправки, "ДФ='yyyy-MM-dd HH:mm:ss'")),""));
				
				Если Ответ <> Неопределено И Ответ <> "" Тогда  
						КодОшибки			= _PROSTOSMS_ОбработатьРезультатОтвета(Ответ, "err_code"); 
						Если КодОшибки = "0" Тогда 
							Стр.ИДСообщения	= _PROSTOSMS_ОбработатьРезультатОтвета(Ответ, "id");
							Стр.Статус		= "Отправлено";
							КоличествоИЛИСтоимостьОтправленных	= КоличествоИЛИСтоимостьОтправленных + 1;
						Иначе 
							ТекстОшибки	= _PROSTOSMS_ОбработатьРезультатОтвета(Ответ, "text");
							ИтогОшибки	= ТекстОшибки + "(" + КодОшибки + ")";
							Стр.Статус	= ?(ТекстОшибки <> Неопределено, ИтогОшибки, ТекстОшибки);
						КонецЕсли;
				КонецЕсли;                                           
				
		КонецЕсли;			
	КонецЦикла;
КонецФункции        

Функция _PROSTOSMS_ОбработатьРезультатОтвета(Ответ, Тэг)Экспорт
	ТэгНачала				= "<" + Тэг + ">";
	ТэгОкончания			= "</" + Тэг + ">";
	ЛевИндекс				= Найти(Ответ, ТэгНачала);
	ЛевИндекс				= ЛевИндекс + СтрДлина(ТэгНачала);
	ПравИндекс				= Найти(Ответ, ТэгОкончания);
	ДлинаСодержимогоТэга	= ПравИндекс - ЛевИндекс;
	СодержимоеТэга			= Сред(Ответ, ЛевИндекс, ДлинаСодержимогоТэга);
	Возврат СодержимоеТэга;	

КонецФункции

Функция _PROSTOSMS_ПослатьКоманду(Команда, Аргументы = "") Экспорт    
	
	Если ИспользуемыйПротокол = 1 Тогда 
		Сервер = "ssl.bs00.ru";
	Иначе 
		Сервер = "api.sms-prosto.ru";
	КонецЕсли;
		
	Ресурс = "/";
	
	Если  ЗначениеЗаполнено(КлючApi) Тогда 
		ДанныеАвторизации = "&key=" + КлючAPI;
	Иначе
		ДанныеАвторизации = "&email=" + СокрЛП(URLEncode(Логин)) 
		+ "&password=" + СокрЛП(URLEncode(Пароль));
	КонецЕсли;	
		
    _Параметры = Команда + ДанныеАвторизации 
		+ ?(Не ПустаяСтрока(Аргументы), "&" + СокрЛП(Аргументы), "");
	
	Рез = ПрочитатьАдрес(Сервер, Ресурс, _Параметры);
		
	Если ПустаяСтрока (Рез)  Тогда

		Если Отладка Тогда
	        Сообщить("Ошибка чтения адреса: "+ Сервер + Ресурс + "?" + _Параметры);
		КонецЕсли;                                                    
		
		Рез = "" // Фиктивный ответ
		
	КонецЕсли;                       
	
	Возврат Рез;
	
КонецФункции	

Функция _PROSTOSMS_UTF_Кодировка(Строка) Экспорт
    Стр = Строка;
    Стрим = Новый COMОбъект("Adodb.Stream");
    Стрим.Type = 2;
    Стрим.Mode= 3;
    Стрим.charset="utf-8";
    Стрим.Open();
    Стрим.WriteText(Строка);
    Стрим.Position=0;
	Стрим.charset="windows-1251";
    Рез=Стрим.ReadText(-1);
    Стрим.Close();
	Рез = СтрЗаменить(Рез, " ", "%20");
	Возврат Рез;
КонецФункции

Процедура _PROSTOSMS_Баланс(Баланс, ЕстьОшибка) Экспорт

	Ответ			= _PROSTOSMS_ПослатьКоманду("method=get_profile"); 
	Если Ответ <> Неопределено И Ответ <> "" Тогда  
		КодОшибки			= _PROSTOSMS_ОбработатьРезультатОтвета(Ответ, "err_code");  
		Если КодОшибки = "0" Тогда 
			Баланс	= _PROSTOSMS_ОбработатьРезультатОтвета(Ответ, "credits") + " руб.";
		Иначе 
			ТекстОшибки	= _PROSTOSMS_ОбработатьРезультатОтвета(Ответ, "text");
			ИтогОшибки	= ТекстОшибки + "(" + КодОшибки + ")";
			Баланс	= ?(ТекстОшибки <> Неопределено, ИтогОшибки, "Не известный номер ошибки проверки баланса (" + КодОшибки + ")");

		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры  

Процедура _PROSTOSMS_ОбновитьСтатусДоставки(ТЗ) Экспорт
	
	Для каждого Стр Из ТЗ Цикл
		
		Если ПустаяСтрока(Стр.ИДСообщения) ИЛИ НЕ Стр.Флаг Тогда
			Продолжить;
		КонецЕсли;
		
		Ответ = _PROSTOSMS_ПослатьКоманду("method=get_msg_report", "&id=" + URLEncode(Стр.ИДСообщения));
		// 255753949:440036316:12,255753949:440036317:12
		Если Ответ <> Неопределено И Ответ <> "" Тогда  
			КодОшибки			= _PROSTOSMS_ОбработатьРезультатОтвета(Ответ, "err_code");   
			Если КодОшибки = "0" Тогда 
				Стр.ИДСообщения	= _PROSTOSMS_ОбработатьРезультатОтвета(Ответ, "id");
				Стр.Статус		= "Отправлено";
			Иначе 
				ТекстОшибки	= _PROSTOSMS_ОбработатьРезультатОтвета(Ответ, "state_text");
				КодОшибки	= _PROSTOSMS_ОбработатьРезультатОтвета(Ответ, "state");
				Если (ТекстОшибки <> Неопределено И ТекстОшибки <> "") И (КодОшибки <> Неопределено И КодОшибки <> "") Тогда 
				Стр.Статус	= "("+КодОшибки+")"+ТекстОшибки;
	            КонецЕсли;
			КонецЕсли;
	КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////
// ОБНОВЛЕНИЕ

// Создает экземпляр ИнтернетПрокси по сохраненным настройкам.
Функция ПолучитьПрокси(Протокол) Экспорт
	
	Возврат СформироватьПрокси(ПолучитьПустыеНастройкиПроксиСервера(), Протокол);
	
КонецФункции

// Разделяет URL по составным частям: протокол, сервер, путь к ресурсу.
//
// Параметры:
//  URL - Строка - ссылка на ресурс в сети Интернет
//
// Возвращаемое значение:
//  Структура:
//             Протокол            - Строка - протокол доступа к ресурсу
//             ИмяСервера          - Строка - сервер, на котором располагается ресурс
//             ПутьКФайлуНаСервере - Строка - путь к ресурсу на сервере
//
Функция РазделитьURL(знач URL) Экспорт
	
	СтруктураURL = СтруктураURI(URL);
	
	Результат = Новый Структура;
	Результат.Вставить("Протокол", ?(ПустаяСтрока(СтруктураURL.Схема),"http",СтруктураURL.Схема));
	Результат.Вставить("ИмяСервера", СтруктураURL.ИмяСервера);
	Результат.Вставить("ПутьКФайлуНаСервере", СтруктураURL.ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

// Разбирает строку URI на составные части и возвращает в виде структуры.
// На основе RFC 3986.
//
// Параметры:
//  СтрокаURI - Строка - ссылка на ресурс в формате:
//    
//     <схема>://<логин>:<пароль>@<хост>:<порт>/<путь>?<параметры>#<якорь>
//               \______________/ \___________/
//                      |               |
//           	   авторизация     имя сервера
//               \____________________________/ \________________________/
//                              |                            |
//                       строка соединения            путь на сервере
//
// Возвращаемое значение:
//  Структура:
//             Схема         - Строка;
//             Логин         - Строка; 
//             Пароль        - Строка;
//             ИмяСервера    - Строка;
//             Хост          - Строка; 
//             Порт          - Строка; 
//             ПутьНаСервере - Строка;
//
Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;

	// строка соединения и путь на сервере
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = Найти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
		
	// информация пользователя и имя сервера
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = Найти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = Найти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(ПустаяСтрока(Порт), Неопределено, Число(Порт)));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает пустые настройки прокси-сервера, соответствующие не использованию прокси-сервера
//
// Возвращаемое значение - структура:
//		ИспользоватьПрокси - использовать ли прокси-сервер
//		НеИспользоватьПроксиДляЛокальныхАдресов - использовать ли прокси-сервер для локальных адресов
//		ИспользоватьСистемныеНастройки - использовать ли системные настройки прокси-сервера
//		Сервер       - адрес прокси-сервера
//		Порт         - порт прокси-сервера
//		Пользователь - имя пользователя для авторизации на прокси-сервере
//		Пароль       - пароль пользователя
//
Функция ПолучитьПустыеНастройкиПроксиСервера() Экспорт
	
	НастройкаПроксиСервера = Новый Соответствие;
	НастройкаПроксиСервера.Вставить("ИспользоватьПрокси", Ложь);
	НастройкаПроксиСервера.Вставить("Пользователь", "");
	НастройкаПроксиСервера.Вставить("Пароль", "");
	НастройкаПроксиСервера.Вставить("Порт", "");
	НастройкаПроксиСервера.Вставить("Сервер", "");
	НастройкаПроксиСервера.Вставить("НеИспользоватьПроксиДляЛокальныхАдресов", Ложь);
	НастройкаПроксиСервера.Вставить("ИспользоватьСистемныеНастройки", Ложь);
	
	Возврат НастройкаПроксиСервера;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Локальные служебные процедуры и функции

Функция ВесВерсииИзМассиваСтрок(РазрядыВерсииСтроками)
	
	Возврат 0
		+ Число(РазрядыВерсииСтроками[0]) * 1000000000
		+ Число(РазрядыВерсииСтроками[1]) * 1000000
		+ Число(РазрядыВерсииСтроками[2]) * 1000
		+ Число(РазрядыВерсииСтроками[3]);
	
КонецФункции
	
Функция НайтиПоПредставлениюВСпискеЗначений(СЗ, Представление) Экспорт
	
	Для Каждого Элемент Из СЗ Цикл
		Если ВРег(Элемент.Представление) = ВРег(Представление) Тогда
			Возврат Элемент.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

// Возвращает числовой вес версии для сравнения версий между собой
//
// Параметры:
//  Версия - Строка - Версия в строковом формате
//
// Возвращаемое значение:
//  Число - вес версии
//
Функция ВесВерсии(Знач Версия) Экспорт
	
	Если Версия = "" Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат ВесВерсииИзМассиваСтрок(РазложитьСтрокуВМассивПодстрок(Версия, "."));
	
КонецФункции

Функция ПолучитьТекущуюВерсию() Экспорт
	        
	Параметры = СведенияОВнешнейОбработке();
	Возврат Параметры.Версия;
	
КонецФункции

Функция СтрЗаменитьБезУчетаРегистра(Стр, ПодстрокаПоиска, ПодстрокаЗамены) Экспорт
	
	Результат = Стр;
	
	Индекс = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска));
	Пока Индекс > 0 Цикл
		
		Результат = Лев(Результат, Индекс - 1) + ПодстрокаЗамены + Сред(Результат, Индекс + СтрДлина(ПодстрокаПоиска));
		Индекс = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска));
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПреобразоватьТекстВHTML(Текст, ПараметрыАналитики)
	
	Результат = Текст;
	
	Результат = СтрЗаменить(Результат, "[+]", "<span style=""font-family:Courier New,Courier,monospace;font-weight:bold;font-style:normal;color:#090;"">[+]</span>");
	Результат = СтрЗаменить(Результат, "[*]", "<span style=""font-family:Courier New,Courier,monospace;font-weight:bold;font-style:normal;color:#005EF9;"">[*]</span>");
	Результат = СтрЗаменить(Результат, "[-]", "<span style=""font-family:Courier New,Courier,monospace;font-weight:bold;font-style:normal;color:#FF0000;"">[-]</span>");	
	Результат = СтрЗаменить(Результат, "[!]", "<span style=""font-family:Courier New,Courier,monospace;font-weight:bold;font-style:normal;color:#FF0000;"">[!]</span>");	

	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[br]", "<br>");
	
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[b]", "<b>");
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[/b]", "</b>");
	
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[i]", "<i>");
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[/i]", "</i>");
	
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[u]", "<u>");
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[/u]", "</u>");
	
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[s]", "<s>");
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[/s]", "</s>");
	
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[quote]", "<blockquote>");
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[/quote]", "</blockquote>");
	
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[code]", "<pre>");
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[/code]", "</pre>");
	
	Результат = СтрЗаменить(Результат, Символы.ПС, "<br>");
		
	// [url=site]name[/url]
	ПодстрокаПоиска1 = "[url=";
	ПодстрокаПоиска2 = "[/url]";
	Индекс1 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска1));
	Индекс2 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска2));
	Пока Индекс1 > 0 И Индекс2 > 0 Цикл
		
		ИсходанаяСтрока = Сред(Результат, Индекс1 + СтрДлина(ПодстрокаПоиска1), Индекс2 - Индекс1 + 1);
		СсылкаСайта = Лев(ИсходанаяСтрока, Найти(ИсходанаяСтрока, "]") - 1);
		СсылкаСайта = СтрЗаменить(СсылкаСайта, """", "");
		Если Найти(ВРЕГ(СсылкаСайта), ВРег("http://")) = 0 И Найти(ВРЕГ(СсылкаСайта), ВРег("https://")) = 0 Тогда
			СсылкаСайта = "http://" + СсылкаСайта;
		КонецЕсли;
					 
		Стр = "<a href=""" + СсылкаСайта + """ target=""_blank"">" + Сред(ИсходанаяСтрока, Найти(ИсходанаяСтрока, "]") + 1, Найти(ВРег(ИсходанаяСтрока), ВРег(ПодстрокаПоиска2)) - Найти(ИсходанаяСтрока, "]") - 1) + "</a>";
		
		Результат = Лев(Результат, Индекс1 - 1) + Стр + Сред(Результат, Индекс2 + СтрДлина(ПодстрокаПоиска2));
		
		Индекс1 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска1));
		Индекс2 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска2));
		
	КонецЦикла;
	
	// [url]site[/url]
	ПодстрокаПоиска1 = "[url]";
	ПодстрокаПоиска2 = "[/url]";
	Индекс1 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска1));
	Индекс2 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска2));
	Пока Индекс1 > 0 И Индекс2 > 0 Цикл
		
		ИсходанаяСтрока = Сред(Результат, Индекс1 + СтрДлина(ПодстрокаПоиска1), Индекс2 - Индекс1 + 1);
		СсылкаСайта = Лев(ИсходанаяСтрока, Найти(Врег(ИсходанаяСтрока), ВРег(ПодстрокаПоиска2)) - 1);
		СсылкаСайта = СтрЗаменить(СсылкаСайта, """", "");
		Если Найти(ВРЕГ(СсылкаСайта), ВРег("http://")) = 0 И Найти(ВРЕГ(СсылкаСайта), ВРег("https://")) = 0 Тогда
			СсылкаСайта = "http://" + СсылкаСайта;
		КонецЕсли;
					 
		Стр = "<a href=""" + СсылкаСайта + """ target=""_blank"">" + СсылкаСайта + "</a>";
		
		Результат = Лев(Результат, Индекс1 - 1) + Стр + Сред(Результат, Индекс2 + СтрДлина(ПодстрокаПоиска2));
		
		Индекс1 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска1));
		Индекс2 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска2));
		
	КонецЦикла;
	
	// [img]site[/img]
	ПодстрокаПоиска1 = "[img]";
	ПодстрокаПоиска2 = "[/img]";
	Индекс1 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска1));
	Индекс2 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска2));
	Пока Индекс1 > 0 И Индекс2 > 0 Цикл
		
		ИсходанаяСтрока = Сред(Результат, Индекс1 + СтрДлина(ПодстрокаПоиска1), Индекс2 - Индекс1 + 1);
		СсылкаСайта = Лев(ИсходанаяСтрока, Найти(Врег(ИсходанаяСтрока), ВРег(ПодстрокаПоиска2)) - 1);
		СсылкаСайта = СтрЗаменить(СсылкаСайта, """", "");
		Если Найти(ВРЕГ(СсылкаСайта), ВРег("http://")) = 0 И Найти(ВРЕГ(СсылкаСайта), ВРег("https://")) = 0 Тогда
			СсылкаСайта = "http://" + СсылкаСайта;
		КонецЕсли;
					 
		Стр = "<img src=""" + СсылкаСайта + """/>";
		
		Результат = Лев(Результат, Индекс1 - 1) + Стр + Сред(Результат, Индекс2 + СтрДлина(ПодстрокаПоиска2));
		
		Индекс1 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска1));
		Индекс2 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска2));
		
	КонецЦикла;
	
	// [color=red]Цветной текст[/color]
	ПодстрокаПоиска1 = "[color=";
	ПодстрокаПоиска2 = "[/color]";
	Индекс1 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска1));
	Индекс2 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска2));
	Пока Индекс1 > 0 И Индекс2 > 0 Цикл
		
		ИсходанаяСтрока = Сред(Результат, Индекс1 + СтрДлина(ПодстрокаПоиска1), Индекс2 - Индекс1 + 1);
		СсылкаСайта = Лев(ИсходанаяСтрока, Найти(ИсходанаяСтрока, "]") - 1);
		СсылкаСайта = СтрЗаменить(СсылкаСайта, """", "");
		СсылкаСайта = "color:" + СсылкаСайта;
					 
		Стр = "<span style=""" + СсылкаСайта + """>" + Сред(ИсходанаяСтрока, Найти(ИсходанаяСтрока, "]") + 1, Найти(ВРег(ИсходанаяСтрока), ВРег(ПодстрокаПоиска2)) - Найти(ИсходанаяСтрока, "]") - 1) + "</span>";
		
		Результат = Лев(Результат, Индекс1 - 1) + Стр + Сред(Результат, Индекс2 + СтрДлина(ПодстрокаПоиска2));
		
		Индекс1 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска1));
		Индекс2 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска2));
		
	КонецЦикла;	

	// [size=15]Размер текста[/size]
	ПодстрокаПоиска1 = "[size=";
	ПодстрокаПоиска2 = "[/size]";
	Индекс1 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска1));
	Индекс2 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска2));
	Пока Индекс1 > 0 И Индекс2 > 0 Цикл
		
		ИсходанаяСтрока = Сред(Результат, Индекс1 + СтрДлина(ПодстрокаПоиска1), Индекс2 - Индекс1 + 1);
		СсылкаСайта = Лев(ИсходанаяСтрока, Найти(ИсходанаяСтрока, "]") - 1);
		СсылкаСайта = СтрЗаменить(СсылкаСайта, """", "");
		СсылкаСайта = "font-size:" + СсылкаСайта + "px";
					 
		Стр = "<span style=""" + СсылкаСайта + """>" + Сред(ИсходанаяСтрока, Найти(ИсходанаяСтрока, "]") + 1, Найти(ВРег(ИсходанаяСтрока), ВРег(ПодстрокаПоиска2)) - Найти(ИсходанаяСтрока, "]") - 1) + "</span>";
		
		Результат = Лев(Результат, Индекс1 - 1) + Стр + Сред(Результат, Индекс2 + СтрДлина(ПодстрокаПоиска2));
		
		Индекс1 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска1));
		Индекс2 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска2));
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтруктуруОписанияОбновлений(Принудительно = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Новый Структура("НеобходимоОбновление,ТекстПриОбновлении", Ложь, "");
		
	// НАЧАЛО КОНСТАНТЫ
	Протокол							= "https";
	Сайт								= "softonit.ru";
	ДиректорияНаСайте					= "/upd/";
	ФайлОбновлений						= "updates.zip";
	Продукт								= "multisms";	// Имя продукта
	ПериодичностьПроверкиОбновлений 	= 7; 			// Дней между проверками	
	Производитель						= "SoftOnIT.RU";
	Таймаут								= 5;	
	ЗаписыватьОшибку					= Истина;
	ПараметрыАналитики					= "?utm_campaign=multisms&utm_source=1c&utm_medium=from_update&utm_content=" + ПолучитьТекущуюВерсию();
	// КОНЕЦ КОНСТАНТЫ
	
	URLФайлОбновлений					= Протокол + "://" + Сайт + ДиректорияНаСайте + ФайлОбновлений; 
	КаталогИнсталляции 					= КаталогВременныхФайлов() + Продукт + "\";
	ФайлИнсталяции						= КаталогИнсталляции + "updates.xml";
	
	// Проверка необходимости обновления (при автоматическом запуске)
	Если Принудительно = Ложь Тогда
		                                
		// Получаем дату для пользовтеля
		Попытка
			ДатаПоследнейПроверкиОбновления = ХранилищеОбщихНастроек.Загрузить("ДатаПоследнейПроверкиОбновления", ИмяПользователя(), Дата(1, 1, 1));
			Если ДатаПоследнейПроверкиОбновления = Неопределено Тогда
				ДатаПоследнейПроверкиОбновления = Дата(1, 1, 1);
			КонецЕсли;
		Исключение
			ДатаПоследнейПроверкиОбновления = Дата(1, 1, 1);
		КонецПопытки;
		ДатаТекущейПроверкиОбновления	= ТекущаяДата();
		
		// Необходимо ли обновлять или нет?
		Если ДатаТекущейПроверкиОбновления - ДатаПоследнейПроверкиОбновления < ПериодичностьПроверкиОбновлений * 86400 Тогда
			Возврат Результат;
		КонецЕсли;
		
		// Установка новой даты
		Попытка
			ХранилищеОбщихНастроек.Сохранить("ДатаПоследнейПроверкиОбновления", ИмяПользователя(), ДатаТекущейПроверкиОбновления); 
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	ИмяАрхивногоФайла = ПолучитьИмяВременногоФайла("zip");
	
	Данные = ПодготовитьПолучениеФайла(URLФайлОбновлений,,,443,10,ЗначениеЗащищенногоСоединения(),Истина,	Новый Структура(
			"МестоХранения, Путь",
			"Сервер",
			ИмяАрхивногоФайла));

	Если НЕ Данные.Статус Тогда
		Возврат Результат;
	КонецЕсли;                    
	
	Попытка
		ФайлАрхива = Новый ЧтениеZipФайла(ИмяАрхивногоФайла);
		ФайлАрхива.ИзвлечьВсе(КаталогИнсталляции, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		ФайлАрхива.Закрыть();
	Исключение
		Возврат Результат;
	КонецПопытки;
	
	// Сведения о текущей версии
	ТекущаяВерсия		= ПолучитьТекущуюВерсию();
	ВесТекущейВерсии	= ВесВерсии(ТекущаяВерсия);
	
	ТаблицаВерсий		= Новый ТаблицаЗначений;
	ТаблицаВерсий.Колонки.Добавить("ИмяФайла");
	ТаблицаВерсий.Колонки.Добавить("Дата");
	ТаблицаВерсий.Колонки.Добавить("Размер");
	ТаблицаВерсий.Колонки.Добавить("НовостьURL");
	ТаблицаВерсий.Колонки.Добавить("НовостьURLТекст");
	ТаблицаВерсий.Колонки.Добавить("ВерсияТекущая");
	ТаблицаВерсий.Колонки.Добавить("ВерсияПерехода");
	ТаблицаВерсий.Колонки.Добавить("ВесВерсии");
	
	// Разбор XML
	ЧтениеXML			= Новый ЧтениеXML();
	Попытка
		ЧтениеXML.ОткрытьФайл(ФайлИнсталяции);
		ЧтениеXML.Прочитать();	
	Исключение
		Возврат Результат;
	КонецПопытки;
	ПостроительDOM		= Новый ПостроительDOM;
	ДокументДОМ			= ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	// Перебираем все обновления
	ЭлементыДОМ			= ДокументДОМ.ПолучитьЭлементыПоИмени("update");
	Для Каждого Элемент Из ЭлементыДОМ Цикл
		
		// Определяем продукт
		ИмяПродукта		= "";
		Атрибуты 		= Элемент.Атрибуты;
		Для каждого Атрибут Из Атрибуты Цикл
			Если НРег(Атрибут.ИмяУзла) = "product" Тогда
				ИмяПродукта = СокрЛП(Атрибут.ТекстовоеСодержимое);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Обновление не для текущего продукта
		Если НРег(ИмяПродукта) <> НРег(Продукт) Тогда
			Продолжить;
		КонецЕсли;
		
		// Заполняем список значений для обновления со всеми значениями тегов
		СЗ = Новый СписокЗначений;
		ДочерниеУзлы = Элемент.ДочерниеУзлы;
		Для каждого Узел Из ДочерниеУзлы Цикл
			СЗ.Добавить(СокрЛП(Узел.ТекстовоеСодержимое), НРег(СокрЛП(Узел.ИмяУзла)));
		КонецЦикла;
		
		// Пропускаем для старых весий
		ВерсияТекущая	= НайтиПоПредставлениюВСпискеЗначений(СЗ, "version");
		ВесПредыдущейВерсии = ВесВерсии(ВерсияТекущая);
		Если ВесПредыдущейВерсии <= ВесТекущейВерсии Тогда
			Продолжить;
		КонецЕсли;
				
		НоваяСтрока					= ТаблицаВерсий.Добавить();
		НоваяСтрока.ИмяФайла		= НайтиПоПредставлениюВСпискеЗначений(СЗ, "file");
		НоваяСтрока.Дата			= НайтиПоПредставлениюВСпискеЗначений(СЗ, "date");
		НоваяСтрока.Размер			= НайтиПоПредставлениюВСпискеЗначений(СЗ, "size");
		НоваяСтрока.НовостьURL		= НайтиПоПредставлениюВСпискеЗначений(СЗ, "newsurl");
		
		// Определяем текст новости.
		ТекстНовости				= НайтиПоПредставлениюВСпискеЗначений(СЗ, "newstext");
		Если ПустаяСтрока(ТекстНовости) Тогда
			// Значит надо загрузить новости из файла на сервере.
			СсылкаНаСодержание		= НайтиПоПредставлениюВСпискеЗначений(СЗ, "newstexturl");
			Если НЕ ПустаяСтрока(СсылкаНаСодержание) Тогда
				URLОбновления		= Сайт + ДиректорияНаСайте + Продукт + "/" + СсылкаНаСодержание; 

				ИмяВременногоФайла = ПолучитьИмяВременногоФайла("zip");
				
				Данные = ПодготовитьПолучениеФайла(URLОбновления,,,80,10,Ложь,Истина, 
					Новый Структура("МестоХранения, Путь", "Сервер", ИмяВременногоФайла));
				
				Если Данные.Статус Тогда
					ТД				= Новый ТекстовыйДокумент();
					ТД.Прочитать(Данные.Путь, КодировкаТекста.UTF8);
					ТекстНовости	= ТД.ПолучитьТекст();
				КонецЕсли;				                         
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.НовостьURLТекст = ПреобразоватьТекстВHTML(ТекстНовости, ПараметрыАналитики);
		НоваяСтрока.ВерсияТекущая	= ВерсияТекущая;
		НоваяСтрока.ВерсияПерехода	= НайтиПоПредставлениюВСпискеЗначений(СЗ, "target");
		НоваяСтрока.ВесВерсии		= ВесПредыдущейВерсии;
		
	КонецЦикла;		
	
	ТаблицаВерсий.Сортировать("ВесВерсии Убыв");
	
	// Проверка таблицы надо ли обновлять текущую обработку
	Если ТаблицаВерсий.Количество() > 0 Тогда
		Результат.НеобходимоОбновление	= Истина;

		Содержание						= "";
		Для Каждого Строки Из ТаблицаВерсий Цикл

			Содержание = Содержание + 
				?(ПустаяСтрока(Содержание)				, "", "<hr>") + 
				"<b>Версия обновления: " + Строки.ВерсияТекущая + " от " + Строки.Дата + "</b><br>" + 
				?(ПустаяСтрока(Строки.НовостьURLТекст)	, "", Символы.ПС + Строки.НовостьURLТекст + "<br>") +
				?(ПустаяСтрока(Строки.ВерсияПерехода)	, "", ?(Строки.ВерсияПерехода = "*", "Обовление устанавливается на любую версию", "Обовление устанавливается на версии: <b>" + Строки.ВерсияПерехода + "</b>") + "<br>") +
				?(ПустаяСтрока(Строки.НовостьURL)		, "", "<a href=""" + Строки.НовостьURL + ПараметрыАналитики + """ target=""_blank"">Новость на сайте</a><br>") +				
				?(ПустаяСтрока(Строки.ИмяФайла)			, "", "<a href=""" + Строки.ИмяФайла +""" target=""_blank"">Скачать обновление (" + Строки.Размер + ")</a><br>")
				;
				
		КонецЦикла;
		
		// Текст полностью 
		Результат.ТекстПриОбновлении = 
			"<html><body>		
			|<p style=""font-family:Arial;font-size:10pt;"">" + Содержание + "</p></body></html>";
		
	КонецЕсли;
	
	Результат.Вставить("КоличествоОбновлений",  ТаблицаВерсий.Количество());
	Результат.Вставить("СайтАвтора",  			"https://softonit.ru/" + ПараметрыАналитики);
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьОбновлениеИУстановить(Автообновление, ДатаПоследнейПроверкиОбновления, Принудительно = Ложь) Экспорт
	
	Результат = ПолучитьСтруктуруОписанияОбновлений(Принудительно);
	Результат.Вставить("ИмяФормыОбновления", ОбработкаПолучитьИмяФормы("ФормаОбновления"));
	
	Возврат Результат;
	
КонецФункции

Функция УдалитьЛишниеСимволы(мСтрока) Экспорт
      
	НовСтрока = "";
	ПравильныеСимволы = "1234567890,";
	
	Для Сч = 1 по СтрДлина(мСтрока) Цикл
		ТекСимв = Сред(мСтрока, Сч, 1);
		Если Найти(ПравильныеСимволы, ТекСимв) > 0 Тогда
			НовСтрока = НовСтрока + ТекСимв;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НовСтрока;
     
КонецФункции

/////////////////////////////////////////////////////////////////////////////
// БЛОК Fitnes
/////////////////////////////////////////////////////////////////////////////

// Функция, выполняет отправку смс сообщения
//  Параметры:
//   ВыдаватьСообщенияОбОшибке: Булево, признак разрешающий выдавать критические ошибки методом сообщить.
//
Функция ПолучитьБалансАккаунтаSMS(ВыдаватьСообщенияОбОшибке = Истина) Экспорт
	
	РезультатБаланс = Новый Структура("Баланс, Валюта", , "Недоступно");
	
	БалансЧисло = 0;
	
	НастройкиХранилища = ПолучитьНастройкиФормы();	
	
	Если НастройкиХранилища <> Неопределено Тогда
		Сервис	= НастройкиХранилища.SMS_Сервис;
		Логин	= НастройкиХранилища.SMS_Логин;
		КлючAPI	= НастройкиХранилища.SMS_КлючAPI;
	Иначе
		Возврат РезультатБаланс;
	КонецЕсли;
		
	Если Сервис = "sms4b.ru" Тогда
		
		Ошибки = _SMS4BRU_СписокОшибок();
		Подключение = _SMS4BRU_Подключить();
		Если Подключение.РезультатПодключения <= 0 Тогда
			Ошибка = Ошибки.НайтиПоЗначению(Подключение.РезультатПодключения);
			Баланс	= ?(Ошибка <> Неопределено, Ошибка.Представление, "Не известный номер ошибки проверки баланса (" + Строка(Подключение.РезультатПодключения) + ")");
			ЕстьОшибка = Истина;
		Иначе
			// Получаем сессию
			Сессия = Подключение.РезультатПодключения;
			// Получаем баланс
			Результат = _SMS4BRU_ПолучитьБаланс();
			Если Результат.РезультатПодключения > 0 Тогда
				РезультатБаланс.Баланс = Результат.Баланс;
				РезультатБаланс.Валюта = "руб."; 
			Иначе
				Ошибка = Ошибки.НайтиПоЗначению(Подключение.РезультатПодключения);
				Баланс	= ?(Ошибка <> Неопределено, Ошибка.Представление, "Не известный номер ошибки проверки баланса (" + Строка(Подключение.РезультатПодключения) + ")");
				ЕстьОшибка = Истина;
			КонецЕсли;
			// Отключаем сессию
			_SMS4BRU_Отключить();
		КонецЕсли;
		
	ИначеЕсли Сервис = "smsc.ru"  Тогда 
				
		СписокОшибок	= _SMSCRU_СписокОшибок();
		Ответ			= _SMSCRU_ПослатьКоманду("balance"); // (balance) или (0, -error)
		Попытка
			Результат		= Число(Ответ[0].Значение);
		Исключение
			Баланс	= "Ошибка проверки баланса! Проверьте баланс на smsc.ru";
			ЕстьОшибка = Истина;
		КонецПопытки;
			
		Если Результат >= 0 Тогда			
			РезультатБаланс.Баланс = Результат;
			РезультатБаланс.Валюта = "руб.";
		Иначе
			Попытка
				Ошибка		= СписокОшибок.НайтиПоЗначению(Число(Ответ[1].Значение));			
			Исключение
				Ошибка		= Неопределено;
			КонецПопытки;
			Баланс			= ?(Ошибка <> Неопределено, Ошибка.Представление, "Не известный номер ошибки проверки баланса (" + Строка(Результат) + ")");
			ЕстьОшибка = Истина;
		КонецЕсли;
		
	ИначеЕсли Сервис = "sms.ru"  Тогда
				
		ЕстьОшибка		= Ложь;
		СписокОшибок	= _SMSRU_СписокОшибок();
		Ответ			= _SMSRU_ПослатьКоманду("/my/balance");		
		ПерваяСтрока	= СтрПолучитьСтроку(Ответ, 1);
		БалансЧисло		= 0;
		Если ПерваяСтрока = "100" Тогда
			БалансЧисло = Число(СокрЛП(СтрПолучитьСтроку(Ответ, 2)));		
			РезультатБаланс.Баланс = БалансЧисло;
			РезультатБаланс.Валюта = "руб.";
		Иначе			
			Попытка
				Ошибка		= СписокОшибок.НайтиПоЗначению(ПерваяСтрока);			
			Исключение
				Ошибка		= Неопределено;
			КонецПопытки;
			
			Баланс	= ?(Ошибка <> Неопределено, Ошибка.Представление, "Не известный номер ошибки проверки баланса (" + Строка(ПерваяСтрока) + ")");
			ЕстьОшибка	= Истина;
		КонецЕсли;
		
	ИначеЕсли Сервис = "p1sms.ru"  Тогда
				
		Если ПустаяСтрока(КлючAPI) Тогда
			ЕстьОшибка = Истина;
			Баланс = "Не заполнен ключ API";
		КонецЕсли;
		
		ЕстьОшибка		= Ложь;
		ОписаниеОшибки 	= "";
		
		СписокОшибок	= _P1SMSRU_СписокОшибок();
		Ответ			= _P1SMSRU_ПослатьКоманду("/apiUsers/getUserBalanceInfo?apiKey=" + КлючAPI);
		Баланс = "";
		
		Попытка
			Статус = Ответ.status;
		Исключение
			Статус = "";
		КонецПопытки;
			
		Если Статус <> "success" Тогда
			Попытка
				Баланс	= ПреобразоватьЮникод(Ответ.data.message);
			Исключение
				Баланс = "Ошибка";
			КонецПопытки;
			ЕстьОшибка = Истина;
		Иначе
			Баланс = Ответ.data;
			РезультатБаланс.Баланс = Баланс;
			РезультатБаланс.Валюта = "руб.";
		КонецЕсли;
		
	ИначеЕсли Сервис = "smsgorod.ru"  Тогда	
		
		Если ПустаяСтрока(КлючAPI) Тогда
			ЕстьОшибка = Истина;
			Баланс = "Не заполнен ключ API";
		КонецЕсли;
		
		ЕстьОшибка		= Ложь;
		ОписаниеОшибки 	= "";
		
		СписокОшибок	= _SMSGORODRU_СписокОшибок();
		Ответ			= _SMSGORODRU_ПослатьКоманду("/apiUsers/getUserBalanceInfo?apiKey=" + КлючAPI);
		Баланс = "";
		
		Попытка
			Статус = Ответ.status;
		Исключение
			Статус = "";
		КонецПопытки;
		
		Если Статус <> "success" Тогда
			Попытка
				Баланс	= ПреобразоватьЮникод(Ответ.data.message);
				РезультатБаланс.Баланс = Баланс;
				РезультатБаланс.Валюта = "руб.";
			Исключение
				Баланс = "Ошибка";
			КонецПопытки;
			ЕстьОшибка = Истина;
		Иначе
			Баланс = Ответ.data;
			РезультатБаланс.Баланс = Баланс;
			РезультатБаланс.Валюта = "руб.";
		КонецЕсли;
		
	ИначеЕсли Сервис = "terasms.ru"  Тогда
		
		ЕстьОшибка		= Ложь;
		ОписаниеОшибки 	= "";
		СписокОшибок	= _TERASMSRU_СписокОшибок();
		Ответ			= _TERASMSRU_ПослатьКоманду("/outbox/balance/");
		СуммаИлиОшибка = Число(СтрПолучитьСтроку(Ответ, 1));
		Если (СуммаИлиОшибка >= 0) ИЛИ Найти(СтрПолучитьСтроку(Ответ, 1), ".") <> 0 Тогда
			БалансЧисло	= СуммаИлиОшибка;
			Баланс		= Строка(БалансЧисло) + " руб.";
			РезультатБаланс.Баланс = БалансЧисло;
			РезультатБаланс.Валюта = "руб.";
		Иначе
			Ошибка		= СписокОшибок.НайтиПоЗначению(СуммаИлиОшибка);
			Если Ошибка <> Неопределено Тогда
				Баланс	= Ошибка.Представление;
			Иначе
				Баланс	= ?(Ошибка <> Неопределено, Ошибка.Представление, "Не известный номер ошибки проверки баланса (" + Строка(СуммаИлиОшибка) + ")");
			КонецЕсли;
			ЕстьОшибка	= Истина;
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат РезультатБаланс;
	
КонецФункции // ПолучитьБалансАккаунтаSMS()

Функция ПолучитьНастройкиФормы()
	
	НастройкиХранилища = ХранилищеНастроекДанныхФорм.Загрузить("ВнешняяОбработка.МультиРассылкаСМС.Форма.ФормаУФ", "SMS_Настройки");
	
	Возврат НастройкиХранилища;
	
КонецФункции

Функция ЗаполнитьСайтСервиса(Сервис)
	
	ПараметрыСервиса = Новый Структура;
			
	Если Сервис = "sms.ru" Тогда 	
		ПараметрыСервиса.Вставить("СсылкаНаСайт"				, "https://sys1c.sms.ru/?panel=register");
		ПараметрыСервиса.Вставить("СсылкаНаСайтПредставление"	, "sms.ru");
	ИначеЕсли Сервис = "smsc.ru" Тогда 
		ПараметрыСервиса.Вставить("СсылкаНаСайт"				, "https://smsc.ru/reg/?");
		ПараметрыСервиса.Вставить("СсылкаНаСайтПредставление"	, "smsc.ru");
	ИначеЕсли Сервис = "sms4b.ru" Тогда 
		ПараметрыСервиса.Вставить("СсылкаНаСайт"				, "https://www.sms4b.ru/regform.php");
		ПараметрыСервиса.Вставить("СсылкаНаСайтПредставление"	, "sms4b.ru");
	ИначеЕсли Сервис = "p1sms.ru" Тогда 
		ПараметрыСервиса.Вставить("СсылкаНаСайт"				, "https://admin.p1sms.ru/ru-ru/registration.html?utm_term=&utm_source=&utm_campaign=&utm_ref_id=&utm_refer_site=&utm_start_url=https%3A%2F%2Fp1sms.ru%2F");
		ПараметрыСервиса.Вставить("СсылкаНаСайтПредставление"	, "p1sms.ru");
	ИначеЕсли Сервис = "smsgorod.ru" Тогда 
		ПараметрыСервиса.Вставить("СсылкаНаСайт"				, "https://new.smsgorod.ru/ru-ru/registration.html?utm_term=&utm_source=&utm_campaign=&utm_ref_id=&utm_refer_site=&utm_start_url=https%3A%2F%2Fsmsgorod.ru%2F");
		ПараметрыСервиса.Вставить("СсылкаНаСайтПредставление"	, "smsgorod.ru");
	ИначеЕсли Сервис = "terasms.ru" Тогда 
		ПараметрыСервиса.Вставить("СсылкаНаСайт"				, "terasms.ru");
		ПараметрыСервиса.Вставить("СсылкаНаСайтПредставление"	, "terasms.ru");
	КонецЕсли;
	
	Возврат ПараметрыСервиса;
	
КонецФункции

// Функция, выполняет отправку смс сообщения
//  Параметры:
//   ТекстSMS: Текст, текст отправляемого сообщения.
//   МассивНомеров: Массив, Массив номеров телефонов для отправки сообщения.
//   ВыдаватьСообщенияОбОшибке: Булево, признак разрешающий выдавать критические ошибки методом сообщить.
//  
Функция ОтправитьSMS(ТекстSMS, ПолучателиSMS, ВыдаватьСообщенияОбОшибке = Истина) Экспорт
		
	Результат = Истина;
		
	НастройкиХранилища = ПолучитьНастройкиФормы();
	
	Если НастройкиХранилища <> Неопределено Тогда
		Сервис	= НастройкиХранилища.SMS_Сервис;
		Отправитель = НастройкиХранилища.SMS_ИмяОтправителя;
		мЛогин		= НастройкиХранилища.SMS_Логин;
		мКлючAPI	= НастройкиХранилища.SMS_КлючAPI;
		мКанал		= НастройкиХранилища.SMS_Канал;
	КонецЕсли;
		
	Если Сервис = "sms.ru" Тогда
		Результат = ОтправитьSMSСервисSMSRU(ТекстSMS, ПолучателиSMS, ВыдаватьСообщенияОбОшибке = Истина);
	ИначеЕсли Сервис = "smsc.ru" Тогда
		Результат = ОтправитьSMSСервисSMSCRU(ТекстSMS, ПолучателиSMS, ВыдаватьСообщенияОбОшибке = Истина);		
	ИначеЕсли Сервис = "sms4b.ru" Тогда
		Результат = ОтправитьSMSСервисSMS4bRU(ТекстSMS, ПолучателиSMS, ВыдаватьСообщенияОбОшибке = Истина, мЛогин);		
	ИначеЕсли Сервис = "p1sms.ru" Тогда 
		Результат = ОтправитьSMSСервисp1sms(ТекстSMS, ПолучателиSMS, ВыдаватьСообщенияОбОшибке = Истина, мКлючAPI, мКанал);
	ИначеЕсли Сервис = "smsgorod.ru" Тогда 
		Результат = ОтправитьSMSСервисSMSgorod(ТекстSMS, ПолучателиSMS, ВыдаватьСообщенияОбОшибке = Истина, мКлючAPI, мКанал);
	ИначеЕсли Сервис = "terasms.ru" Тогда 
		Результат = ОтправитьSMSСервисterasms(ТекстSMS, ПолучателиSMS, ВыдаватьСообщенияОбОшибке = Истина, мЛогин, Отправитель);
	ИначеЕсли Сервис = "sms-prosto.ru" Тогда 
		Результат = ОтправитьSMSСервисProstosms(ТекстSMS, ПолучателиSMS, ВыдаватьСообщенияОбОшибке = Истина, мЛогин, Отправитель);
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции // ОтправитьSMS()

// Функция, выполняет отправку смс сообщения
//  Параметры:
//   ТекстSMS: Текст, текст отправляемого сообщения.
//   МассивНомеров: Массив, Массив номеров телефонов для отправки сообщения.
//   ВыдаватьСообщенияОбОшибке: Булево, признак разрешающий выдавать критические ошибки методом сообщить.
//  
Функция ПолучитьСтатусSMS(ПолучателиSMS, ВыдаватьСообщенияОбОшибке = Истина) Экспорт
		
	Результат = Истина;
	
	НастройкиХранилища = ПолучитьНастройкиФормы();
	
	Если НастройкиХранилища <> Неопределено Тогда
		Сервис	= НастройкиХранилища.SMS_Сервис;
		мЛогин	= НастройкиХранилища.SMS_Логин;
		мКлючAPI= НастройкиХранилища.SMS_КлючAPI;
	КонецЕсли;
	
	Если Сервис = "sms.ru" Тогда
		Результат = ПолучитьСтатусSMSRU(ПолучателиSMS, ВыдаватьСообщенияОбОшибке = Истина);
	ИначеЕсли Сервис = "smsc.ru" Тогда
		Результат = ПолучитьСтатусSMSCRU(ПолучателиSMS, ВыдаватьСообщенияОбОшибке = Истина);		
	ИначеЕсли Сервис = "sms4b.ru" Тогда
		Результат = ПолучитьСтатусSMS4bRU(ПолучателиSMS, ВыдаватьСообщенияОбОшибке = Истина, мЛогин);
	ИначеЕсли Сервис = "p1sms.ru" Тогда 
		Результат = ПолучитьСтатусp1sms(ПолучателиSMS, ВыдаватьСообщенияОбОшибке = Истина, мКлючAPI);
	ИначеЕсли Сервис = "smsgorod.ru" Тогда 
		Результат = ПолучитьСтатусsmsgorod(ПолучателиSMS, ВыдаватьСообщенияОбОшибке = Истина, мКлючAPI);
	ИначеЕсли Сервис = "terasms.ru" Тогда 
		Результат = ПолучитьСтатусterasmsru(ПолучателиSMS, ВыдаватьСообщенияОбОшибке = Истина, мЛогин);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОтправитьSMS()

/////////////////////////////////////////////////////////////////////////////
// SMS.RU

Функция ОтправитьSMSСервисSMSRU(ТекстSMS, ПолучателиSMS, ВыдаватьСообщенияОбОшибке = Истина)
	
	Результат = Истина;
	
	Для Каждого ПолучательSMS Из ПолучателиSMS Цикл
		
		Аргументы = "to=" + ПолучательSMS.НомерТелефона
		+ ?(ПустаяСтрока(Подпись), "", "&from=" + Подпись)
		+ "&text=" + УдалитьНеПечатныеСимволы(ТекстSMS);
		Ответ = ОтправитьЗапросСерверу("/sms/send", ВыдаватьСообщенияОбОшибке, Аргументы); 
		
		ПерваяСтрока = СтрПолучитьСтроку(Ответ, 1);
		Если ПерваяСтрока = "100" Тогда
			
			ПолучательSMS.IDСообщения = СтрПолучитьСтроку(Ответ, 2);
			ПолучательSMS.СтатусСообщения = "Отправка";
			ПолучательSMS.СтатусДействия = 0;
			
		Иначе
			
			Результат = Ложь;
			Если ВыдаватьСообщенияОбОшибке = Истина Тогда
				Сообщить(РасшифровкаОтветаСервера(ПерваяСтрока).Текст);
			КонецЕсли;
			ПолучательSMS.СтатусСообщения = РасшифровкаОтветаСервера(ПерваяСтрока).Текст;
			ПолучательSMS.СтатусДействия = РасшифровкаОтветаСервера(ПерваяСтрока).Действие;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
		
КонецФункции

Функция ОтправитьЗапросСерверу(Команда, ВыдаватьСообщенияОбОшибке, Аргументы = "") Экспорт
	
	Сервер = "sms.ru";
	
	Токен						= URLEncode(СокрЛП(ПрочитатьАдрес(Сервер, "/auth/get_token", "")));
	ДатаВремяПолученияТокена	= ТекущаяДата();
	МД5							= URLEncode(СокрЛП(НРег(ВычислитьХешСтрокиПоАлгоритмуMD5(СтрокаВUTF_8(Пароль) + Токен))));
	
    _Параметры = "login=" + СокрЛП(URLEncode(Пользователь)) + "&token=" + Токен + "&sig=" + МД5 + "&partner_id=12737" + ?(Не ПустаяСтрока(Аргументы), "&" + СокрЛП(Аргументы), "");
	
	Рез = ПрочитатьАдрес(Сервер, Команда, _Параметры);
		
	Если ПустаяСтрока(Рез)  Тогда

		Если ВыдаватьСообщенияОбОшибке Тогда
	        Сообщить("Ошибка чтения адреса: "+ Сервер + Команда + "?" + _Параметры);
		КонецЕсли;                                                    
		
		Рез = "" // Фиктивный ответ
		
	КонецЕсли;                       
	
	Возврат Рез;
	
КонецФункции // ОтправитьЗапросСерверу()

// Функция, Расшифровывает ответ на сообщение полученное с сервера
//  Параметры:
//   ЗначениеПараметра: Строка, текст значения присланный сервером
//
Функция РасшифровкаОтветаСервера(ЗначениеПараметра) Экспорт
	
	ОтветыСервера = Новый Соответствие;
	
	ОтветыСервера.Вставить("-1",  Новый Структура("Текст, Действие", "Сообщение не найдено", -2));
	ОтветыСервера.Вставить("",	  Новый Структура("Текст, Действие", "Проверьте соединение с сетью интернет или прокси-сервером", -1));
	ОтветыСервера.Вставить("100", Новый Структура("Текст, Действие", "Сообщение принято к отправке", 0));
	ОтветыСервера.Вставить("101", Новый Структура("Текст, Действие", "Передается оператору", 0));
	ОтветыСервера.Вставить("102", Новый Структура("Текст, Действие", "Отправлено (в пути)", 0));
	ОтветыСервера.Вставить("103", Новый Структура("Текст, Действие", "Доставлено", 1));
	ОтветыСервера.Вставить("104", Новый Структура("Текст, Действие", "Не может быть доставлено: время жизни истекло", -2));
	ОтветыСервера.Вставить("105", Новый Структура("Текст, Действие", "Не может быть доставлено: удалено оператором", -2));
	ОтветыСервера.Вставить("106", Новый Структура("Текст, Действие", "Не может быть доставлено: сбой в телефоне", -2));
	ОтветыСервера.Вставить("107", Новый Структура("Текст, Действие", "Не может быть доставлено: неизвестная причина", -2));
	ОтветыСервера.Вставить("108", Новый Структура("Текст, Действие", "Не может быть доставлено: отклонено", -2));
	ОтветыСервера.Вставить("200", Новый Структура("Текст, Действие", "Неправильный api_id", -1));
	ОтветыСервера.Вставить("201", Новый Структура("Текст, Действие", "Не хватает средств на лицевом счету", -1));
	ОтветыСервера.Вставить("202", Новый Структура("Текст, Действие", "Неправильно указан получатель", -1));
	ОтветыСервера.Вставить("203", Новый Структура("Текст, Действие", "Нет текста сообщения", -1));
	ОтветыСервера.Вставить("204", Новый Структура("Текст, Действие", "Имя отправителя не согласовано с администрацией", -1));
	ОтветыСервера.Вставить("205", Новый Структура("Текст, Действие", "Сообщение слишком длинное (превышает 8 СМС)", -1));
	ОтветыСервера.Вставить("206", Новый Структура("Текст, Действие", "Будет превышен или уже превышен дневной лимит на отправку сообщений", -1));
	ОтветыСервера.Вставить("207", Новый Структура("Текст, Действие", "На этот номер (или один из номеров) нельзя отправлять сообщения, либо указано более 100 номеров в списке получателей", -1));
	ОтветыСервера.Вставить("208", Новый Структура("Текст, Действие", "Параметр time указан неправильно", -1));
	ОтветыСервера.Вставить("209", Новый Структура("Текст, Действие", "Вы добавили этот номер (или один из номеров) в стоп-лист", -1));
	ОтветыСервера.Вставить("210", Новый Структура("Текст, Действие", "Используется GET, где необходимо использовать POST", -1));
	ОтветыСервера.Вставить("211", Новый Структура("Текст, Действие", "Метод не найден", -1));
	ОтветыСервера.Вставить("212", Новый Структура("Текст, Действие", "Текст сообщения необходимо передать в кодировке UTF-8 (вы передали в другой кодировке)", -1));
	ОтветыСервера.Вставить("220", Новый Структура("Текст, Действие", "Сервис временно недоступен, попробуйте чуть позже.", -1));
	ОтветыСервера.Вставить("230", Новый Структура("Текст, Действие", "Сообщение не принято к отправке, так как на один номер в день нельзя отправлять более 60 сообщений.", -1));
	ОтветыСервера.Вставить("231", Новый Структура("Текст, Действие", "Превышен лимит одинаковых сообщений на этот номер в минуту.", -1));
	ОтветыСервера.Вставить("232", Новый Структура("Текст, Действие", "Превышен лимит одинаковых сообщений на этот номер в день.", -1));
	ОтветыСервера.Вставить("300", Новый Структура("Текст, Действие", "Неправильный token (возможно истек срок действия, либо ваш IP изменился)", -1));
	ОтветыСервера.Вставить("301", Новый Структура("Текст, Действие", "Неправильный пароль, либо пользователь не найден", -1));
	ОтветыСервера.Вставить("302", Новый Структура("Текст, Действие", "Пользователь авторизован, но аккаунт не подтвержден (пользователь не ввел код, присланный в регистрационной смс)", -1));	
	
	Если ОтветыСервера.Получить(ЗначениеПараметра) <> Неопределено Тогда
		РасшифровкаОтвета = ОтветыСервера.Получить(ЗначениеПараметра);
	ИначеЕсли ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		РасшифровкаОтвета = Новый Структура("Текст, Действие", ?(ЗначениеЗаполнено(ЗначениеПараметра), "Ошибка: " + ЗначениеПараметра, ""));
	КонецЕсли;
	
	Возврат РасшифровкаОтвета;
	
КонецФункции // РасшифровкаОтветаСервера()

// Функция, получает статус отправленного сообщения по его ID
//  Параметры:
//   МассивIDSMS: Массив, Массив ID сообщений.
//   ВыдаватьСообщенияОбОшибке: Булево, признак разрешающий выдавать критические ошибки методом сообщить.
//   
Функция ПолучитьСтатусSMSRU(ПолучателиSMS, ВыдаватьСообщенияОбОшибке = Истина) Экспорт
	
	Результат = Истина;
	
	Для Каждого ПолучательSMS Из ПолучателиSMS Цикл
		
		Ответ = ОтправитьЗапросСерверу("/sms/status", ВыдаватьСообщенияОбОшибке, "id=" + СтрокаВUTF_8(ПолучательSMS.IDСообщения)); 
				
		ПерваяСтрока = СтрПолучитьСтроку(Ответ, 1);
		Попытка
			Статус	= Число(ПерваяСтрока);
		Исключение
			Статус = "-1";
		КонецПопытки;
		
		ПолучательSMS.СтатусСообщения = РасшифровкаОтветаСервера(ПерваяСтрока).Текст;
		ПолучательSMS.СтатусДействия = РасшифровкаОтветаСервера(ПерваяСтрока).Действие;
		Если ВыдаватьСообщенияОбОшибке И РасшифровкаОтветаСервера(ПерваяСтрока).Действие <> 1 Тогда
			Сообщить(РасшифровкаОтветаСервера(ПерваяСтрока).Текст);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьСтатусSMS()

/////////////////////////////////////////////////////////////////////////////
// SMSC.RU

Функция ОтправитьSMSСервисSMSCRU(ТекстSMS, ПолучателиSMS, ВыдаватьСообщенияОбОшибке = Истина)
	
	Ошибки = _SMSCRU_СписокОшибок();
	Результат = Истина;
	
	ИД = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
	
	Для Каждого ПолучательSMS Из ПолучателиSMS Цикл
		
		Ответ = _SMSCRU_ОтправитьСообщение("send", 
		"list=" + URLEncode2(ПолучательSMS.НомерТелефона + ":" + ТекстSMS) + 
		"&pp=369101" +
		"&translit=" + ?(Транслитерация, "1", "0"));
		
		Рез1 = Ответ[0].Значение;
		Рез2 = Число(Ответ[1].Значение);
		
		Сообщить(Рез1);
		Сообщить(Рез2);
					
		Если Рез2 > 0 Тогда
			ПолучательSMS.IDСообщения = ИД;
			ПолучательSMS.СтатусСообщения = "Отправлено";
			ПолучательSMS.СтатусДействия = 0;					
		Иначе
			Результат = Ложь;
			Ошибка = Ошибки.НайтиПоЗначению(Рез2);
			Если ВыдаватьСообщенияОбОшибке = Истина Тогда
				Сообщить(Ошибка);
			КонецЕсли;
			ПолучательSMS.СтатусСообщения = Ошибка;
			ПолучательSMS.СтатусДействия = "Ошибка отправки";
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
		
КонецФункции

Функция _SMSCRU_ОтправитьСообщение(Команда, Аргументы = "") Экспорт
	
	мЛогин = Прав(Логин, СтрДлина(Логин)-1);

	Сервер = "smsc.ru";
	Ресурс = "/sys/" + Команда + ".php";
    _Параметры = "login=" + СокрЛП(URLEncode2(Пользователь)) + "&psw=" + СокрЛП(URLEncode2(Пароль)) + "&fmt=1&charset=utf-16" + 
		?(Не ПустаяСтрока(Аргументы), "&" + СокрЛП(Аргументы), "");
	
	Для Сч = 1 По 3 Цикл
    	
		Если Сч > 1 Тогда
    	    Для Сч2 = 1 По 2000 Цикл
				у = Сч2; // Небольшой таймаут
			КонецЦикла;
		КонецЕсли;
			
		Если Сч = 3 Тогда
			Сервер = "www2.smsc.ru";
		КонецЕсли;	
		
		Рез = ПрочитатьАдрес(Сервер, Ресурс, _Параметры);
		
		Если НЕ ПустаяСтрока(Рез) Тогда
		    Прервать;
		КонецЕсли;
		
	КонецЦикла;   
	
	Если ПустаяСтрока (Рез)  Тогда

		Если Отладка Тогда
	        Сообщить("Ошибка чтения адреса: "+ Сервер + Ресурс + "?" + _Параметры);
		КонецЕсли;                                                    
		
		Рез = "," // Фиктивный ответ
		
	КонецЕсли;                       
	
	Возврат Строка2Список(Рез);
	
КонецФункции // _SMSC_ПослатьКоманду()

// Функция, получает статус отправленного сообщения по его ID
//  Параметры:
//   МассивIDSMS: Массив, Массив ID сообщений.
//   ВыдаватьСообщенияОбОшибке: Булево, признак разрешающий выдавать критические ошибки методом сообщить.
//   
Функция ПолучитьСтатусSMSCRU(ПолучателиSMS, ВыдаватьСообщенияОбОшибке = Истина) Экспорт
	
	Результат = Истина;
	
	Статусы = _SMSCRU_СписокСтатусовДоставкиСообщений();
	                           
	Для Каждого ПолучательSMS Из ПолучателиSMS Цикл
					
		Если ПустаяСтрока(ПолучательSMS.IDСообщения) Тогда
			Продолжить;
		КонецЕсли;
		
		Ответ = _SMSCRU_ПослатьКоманду("status", "phone=" + СтрокаВUTF_8(ПолучательSMS.НомерТелефона) + "&id=" + СтрокаВUTF_8(ПолучательSMS.IDСообщения));
				
		Попытка
			Рез1 = Число(УдалитьЛишниеСимволы(Ответ[0].Значение));
		Исключение
			Рез1 = Неопределено;
		КонецПопытки;
		
		Если Ответ.Количество() = 2 Тогда
			Попытка
				Рез2 = Число(УдалитьЛишниеСимволы(Ответ[1].Значение));
			Исключение
				Рез2 = Неопределено;
			КонецПопытки;
		Иначе 
			Попытка
				Рез2 = Число(УдалитьЛишниеСимволы(Ответ[2].Значение));
			Исключение
				Рез2 = Неопределено;
			КонецПопытки;
		КонецЕсли;
						
		Если Рез1 = Неопределено Или Рез2 = Неопределено Тогда 
			ПолучательSMS.СтатусСообщения = "Ошибка определения статуса";
			Продолжить;
		КонецЕсли;
		
		Если (Рез2 >= 0) Тогда
			Статус = Статусы.НайтиПоЗначению(Рез1);
			ПолучательSMS.СтатусСообщения = Статус.Представление;			
		Иначе
			Статус = Статусы.НайтиПоЗначению(Рез2);
			ПолучательSMS.СтатусСообщения = Статус.Представление1;
			Если Статус <> Неопределено Тогда
				ПолучательSMS.СтатусСообщения = Статус.Представление;
			Иначе
				ПолучательSMS.СтатусСообщения = "Ошибка определения статуса (" + Рез2 + ")";
			КонецЕсли;				
		КонецЕсли;	
				
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьСтатусSMS()

/////////////////////////////////////////////////////////////////////////////
// SMS4B.RU

Функция ОтправитьSMSСервисSMS4bRU(ТекстSMS, ПолучателиSMS, ВыдаватьСообщенияОбОшибке = Истина, мЛогин) Экспорт
			
	Ошибки = _SMS4BRU_СписокОшибок();
	Результат = Истина;
		
	Соединение = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
	Соединение.Option		   (2					, "utf-8");
	Соединение.Open			   ("POST"				, "https://sms4b.ru/ws/sms.asmx/SendSMS",0);
	Соединение.SetRequestHeader("Accept-Language"	, "ru");
	Соединение.SetRequestHeader("Accept-Charset"	, "utf-8");
	Соединение.setRequestHeader("Content-Language"	, "ru");
	Соединение.setRequestHeader("Content-Charset"	, "utf-8");
	Соединение.setRequestHeader("Content-type"		, "application/x-www-form-urlencoded; charset=utf-8");
	
	Транслитерация = Ложь;
	
	Для Каждого ПолучательSMS Из ПолучателиSMS Цикл
							
			// При необходимости транслитирация сообщения
			ТекстSMS = ?(Транслитерация, ТранслитерацияТекста(ТекстSMS), ТекстSMS);
			ТекстSMS = УдалитьНеПечатныеСимволы(ТекстSMS);
			
			ПараметрыПОСТ = 
				"Login=" + мЛогин + 
				"&Password=" + Пароль + 
				"&Source=" + Отправитель + 
				"&Phone=" + ПолучательSMS.НомерТелефона + 
				"&Text=" + ТекстSMS;
									
			Соединение.Send(ПараметрыПОСТ);
			ТекстОтвета = Соединение.ResponseText();
			
			// Обработка результата
			// Ответ
			//<?xml version="1.0" encoding="utf-8"?>
			//<string xmlns="SMS4B">string</string>			
			Чтение = Новый ЧтениеXML;
			Чтение.УстановитьСтроку(ТекстОтвета);
			Пока Чтение.Прочитать() Цикл				
				Если Чтение.Имя = "string" Тогда
					Если Чтение.Прочитать() Тогда
						ГУИД = Чтение.Значение;
						Если Найти(ГУИД, "-") > 2 Тогда
							ПолучательSMS.IDСообщения = ГУИД;
							ПолучательSMS.СтатусСообщения = "Отправка";
						Иначе
							Результат = Ложь;
							Ошибка = Ошибки.НайтиПоЗначению(Число(ГУИД));
							ПолучательSMS.СтатусСообщения = ?(Ошибка <> Неопределено, Ошибка.Представление, "Ошибка отправки (" + ГУИД + ")");
						КонецЕсли;

						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Чтение.Закрыть();
							
	КонецЦикла;
	
	_SMS4BRU_Отключить();
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтатусSMS4bRU(ПолучателиSMS, ВыдаватьСообщенияОбОшибке = Истина, мЛогин) Экспорт
		
	Результат = Истина;
	
	Статусы		= _SMS4BRU_СписокСтатусовДоставкиСообщений();
	Ошибки		= _SMS4BRU_СписокОшибок();
	Подключение = м_SMS4BRU_Подключить(мЛогин);
	
	Если Подключение.РезультатПодключения <= 0 Тогда		
		Ошибка = Ошибки.НайтиПоЗначению(Подключение.РезультатПодключения);
		Баланс = ?(Ошибка <> Неопределено, Ошибка.Представление, "Не известная ошибка " + Строка(Подключение.РезультатПодключения));
		БалансЧисло = 0;
		
	Иначе
		
		// Получаем сессию
		Сессия = Подключение.РезультатПодключения;
	
		Соединение = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
		Соединение.Option		   (2					, "utf-8");
		Соединение.Open			   ("POST"				, "https://sms4b.ru/ws/sms.asmx/CheckSMS",0);
		Соединение.SetRequestHeader("Accept-Language"	, "ru");
		Соединение.SetRequestHeader("Accept-Charset"	, "utf-8");
		Соединение.setRequestHeader("Content-Language"	, "ru");
		Соединение.setRequestHeader("Content-Charset"	, "utf-8");
		Соединение.setRequestHeader("Content-type"		, "application/x-www-form-urlencoded; charset=utf-8");
		
		Для Каждого ПолучательSMS Из ПолучателиSMS Цикл
			
			Если ПустаяСтрока(ПолучательSMS.IDСообщения) Тогда
				Результат = Ложь;
				Продолжить;
			КонецЕсли;
			
			ПараметрыПОСТ = "SessionId=" + Строка(Формат(Сессия, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=")) + "&Guids=" + ПолучательSMS.IDСообщения;
			Соединение.Send(ПараметрыПОСТ);
			ТекстОтвета = Соединение.ResponseText();
			
			// Обработка результата
			// Ответ
			//<?xml version="1.0" encoding="utf-8"?>
			//<CheckSMSResult xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="SMS4B">
			//  <Result>1</Result>
			//  <List>
			//    <CheckSMSList>
			//      <G>277A8435-CC52-414A-BB14-165F2F753CE9</G>
			//      <R>65793</R>
			//    </CheckSMSList>
			//  </List>
			//</CheckSMSResult>
			Чтение = Новый ЧтениеXML;
			Чтение.УстановитьСтроку(ТекстОтвета);
			Пока Чтение.Прочитать() Цикл          
				Если Чтение.Имя = "Result" И Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					Если Чтение.Прочитать() Тогда
						Количество = Число(Чтение.Значение);
						Если Количество <= 0 Тогда
							Результат = Ложь;
							Ошибка = Ошибки.НайтиПоЗначению(Количество);
							ПолучательSMS.СтатусСообщения = ?(Ошибка <> Неопределено, Ошибка.Представление, "Не известная ошибка " + Строка(Количество));
							Прервать;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли Чтение.Имя = "R" И Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					Если Чтение.Прочитать() Тогда
						КодСтатуса = Число(Чтение.Значение);
						ТекСтатус = 0;
						
						Если КодСтатуса >= 0 Тогда
							
							// Раскладываем битовую маску статуса
							к3 = Цел(КодСтатуса / 65536); // если нечетное то статус окончательный, 
														  // если четное - то ещё идет обработка сообщения
							к2 = Цел((КодСтатуса - (к3 * 65536)) / 256);       // количество доставленных частей
							к1 = Цел(КодСтатуса - (к3 * 65536) - (к2 * 256));  // количество частей всего
							
							// Вычисляем статус сообщения
							Если НЕ к3/2 = Цел(к3/2) Тогда // нечетное
								Если к1 = к2 Тогда
									Если к2 = 0 Тогда
										ТекСтатус = 7; // Ошибка
									Иначе 
										ТекСтатус = 5; // Доставлено
									КонецЕсли;
								Иначе
									Если ПолучательSMS.СтатусСообщения = 2 Тогда // статус "В очереди"
										ТекСтатус = 4; // Не отправлено
									ИначеЕсли ПолучательSMS.СтатусСообщения = 3 Тогда // статус "Отправлено"
										ТекСтатус = 6; // Не доставлено
									КонецЕсли;	
									Если к2 > 0 Тогда // Обработана часть(и) сообщения
										Если ПолучательSMS.СтатусСообщения = 2 Тогда // статус "В очереди"
											// "Отправлено частей " + Строка(к2) + " из " + Строка(к1));
										ИначеЕсли ПолучательSMS.СтатусСообщения = 3 Тогда // статус "Отправлено"
											// "Доставлено частей " + Строка(к2) + " из " + Строка(к1));
										КонецЕсли;	
									КонецЕсли;
								КонецЕсли;	
							Иначе // четное !!!
								Если к1 = к2 И ПолучательSMS.СтатусСообщения = 2 Тогда // статус "В очереди"
									ТекСтатус = 3; // Отправлено
								ИначеЕсли к2 = 0 ИЛИ (к3 = 0 И к2 < к1) Тогда
									ТекСтатус = 3; // Отправлено
								КонецЕсли;
							КонецЕсли;
							
							ПолучательSMS.СтатусСообщения = ТекСтатус;
							ССтатус = Статусы.НайтиПоЗначению(ТекСтатус);
							ПолучательSMS.СтатусСообщения = ?(ССтатус <> Неопределено, ССтатус.Представление, "Не известный статус (" + ТекСтатус + ")");

						КонецЕсли;
							
						Прервать;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Чтение.Закрыть();
			
		КонецЦикла;
		
		_SMS4BRU_Отключить();
			
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Подключается к сервису sms4b возвращает структуру с результатом подключения
Функция м_SMS4BRU_Подключить(мЛогин) Экспорт
	
	Сессия = "";
	
	Попытка
		Скрипт = Новый COMОбъект("MSScriptControl.ScriptControl");
		Скрипт.Language = "javascript";
		TimeZoneOffset = Скрипт.Eval("new Date().getTimezoneOffset()");
		GMT = Окр(-1 * TimeZoneOffset / 60);
	Исключение   
		GMT = 3; // Пусть будет Московское время по умолчанию если ошибка
	КонецПопытки;
	 
	Соединение = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
	Соединение.Option		   (2					, "utf-8");
	Соединение.Open			   ("POST"				, "https://sms4b.ru/ws/sms.asmx/StartSession",0);
	Соединение.SetRequestHeader("Accept-Language"	, "ru");
	Соединение.SetRequestHeader("Accept-Charset"	, "utf-8");
	Соединение.setRequestHeader("Content-Language"	, "ru");
	Соединение.setRequestHeader("Content-Charset"	, "utf-8");
	Соединение.setRequestHeader("Content-type"		, "application/x-www-form-urlencoded; charset=utf-8");

	ПараметрыПОСТ = "Login=" + мЛогин + "&Password=" + Пароль + "&Gmt=" + Строка(GMT);
	Соединение.Send(ПараметрыПОСТ);
	ТекстОтвета = Соединение.ResponseText();
	
	// Обработка результата
	Подключение = Новый Структура("РезультатПодключения", 0);
	// Ответ
	// <?xml version="1.0" encoding="utf-8"?>
	// <long xmlns="SMS4B">-1</long>
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ТекстОтвета);
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.Имя = "long" Тогда
			Если Чтение.Прочитать() Тогда
				Подключение.РезультатПодключения = Число(Чтение.Значение);
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Чтение.Закрыть();
	
	Возврат Подключение;
	
КонецФункции // ПодключитьSMS4B()


/////////////////////////////////////////////////////////////////////////////
// P1SMS.RU

Функция ОтправитьSMSСервисp1sms(ТекстSMS, ПолучателиSMS, ВыдаватьСообщенияОбОшибке = Истина, мКлючAPI, мКанал) Экспорт
			
	СписокОшибок = _P1SMSRU_СписокОшибок();
	СписокСтатусовДоставки = _P1SMSRU_СписокСтатусовДоставкиСообщений();
	Результат = Истина;
	
	Если ТипСМС = 0 Тогда
		мТекстSMS = ?(Транслитерация, ТранслитерацияТекста(ТекстSMS), ТекстSMS);				
	Иначе				
		мТекстSMS = ТекстSMS;
	КонецЕсли;
	
	мТекстSMS = УдалитьНеПечатныеСимволы(мТекстSMS);
	
	Для Каждого ПолучательSMS Из ПолучателиSMS Цикл
				
		_Параметры = "apiKey=" + мКлючAPI;
		
		Если мКанал = "SMS буквенный (прямые подключения)" Тогда
			_Параметры = _Параметры + "&sms[0][channel]=char";
		ИначеЕсли мКанал = "SMS цифра (дешевый, но не стабильный)" Тогда
			_Параметры = _Параметры + "&sms[0][channel]=digit";
		Иначе
			Продолжить;
		КонецЕсли;                                              
		_Параметры = _Параметры + "&sms[0][text]=" + URLEncode(мТекстSMS);
		_Параметры = _Параметры + "&sms[0][phone]=" + ПолучательSMS.НомерТелефона;
		Если НЕ ПустаяСтрока(Отправитель) Тогда
			_Параметры = _Параметры + "&sms[0][sender]=" + Отправитель;
		КонецЕсли;
				
		Ответ	= _SMSGORODRU_ПослатьКоманду("/apiSms/create?" + _Параметры); 
				
		Попытка
			Статус = Ответ.status;
		Исключение
			Статус = "";
		КонецПопытки;
		
		Если Статус = "success" Тогда				
			Статус = Ответ.data[0].status;
			ПолучательSMS.СтатусСообщения = СписокСтатусовДоставки.НайтиПоЗначению(Статус);
			ПолучательSMS.IDСообщения = Ответ.data[0].id;
			Если Статус = "error" Тогда					
				Если Ответ.data[0].Свойство("errorDescription") Тогда
					Результат = Ложь;
					ПолучательSMS.СтатусСообщения = ПолучательSMS.СтатусСообщения + "(" + ПреобразоватьЮникод(Ответ.data[0].errorDescription) + ")";
				КонецЕсли;
			Иначе
				Результат = Ложь;
				ПолучательSMS.IDСообщения = Ответ.data[0].id;
			КонецЕсли;
		Иначе
			Попытка
				Результат = Ложь;
				ПолучательSMS.СтатусСообщения	= "Ошибка отправки SMS (" + ПреобразоватьЮникод(Ответ.data.message) + ")";
			Исключение
				Результат = Ложь;
				ПолучательSMS.СтатусСообщения	= "Ошибка отправки SMS";
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;	
		
КонецФункции

Функция ПолучитьСтатусp1sms(ПолучателиSMS, ВыдаватьСообщенияОбОшибке = Истина, мКлючAPI) Экспорт
			
	Результат = Истина;
	
	СписокСтатусовДоставки = _P1SMSRU_СписокСтатусовДоставкиСообщений();
	СписокОшибок = _SMSGORODRU_КодыОшибок();
	
	Для Каждого ПолучательSMS Из ПолучателиSMS Цикл
				
		Если ПустаяСтрока(ПолучательSMS.IDСообщения) Тогда
			Продолжить;
		КонецЕсли;
		
		_Параметры = "apiKey=" + мКлючAPI + "&smsId[0]=" + ПолучательSMS.IDСообщения;
		
		Ответ = _P1SMSRU_ПослатьКоманду("/apiSms/getSmsStatus?" + _Параметры);
		
		Попытка
			ЗначениеДоставки = Ответ.Значение[0];
		Исключение
		    ЗначениеДоставки = Новый Структура;
		КонецПопытки;
		
		Если ЗначениеДоставки.Свойство("sms_status") Тогда
			НайденныйЭлемент = СписокСтатусовДоставки.НайтиПоЗначению(ЗначениеДоставки.sms_status);
			Если НайденныйЭлемент <> Неопределено Тогда
				ПолучательSMS.СтатусСообщения		= НайденныйЭлемент.Представление;
			Иначе
				ПолучательSMS.СтатусСообщения		= "Статус не известен (" + Строка(ЗначениеДоставки.sms_status) + ")";
			КонецЕсли;
			
		Иначе
			Попытка
				НайденныйЭлемент = СписокОшибок.НайтиПоЗначению(ЗначениеДоставки.error);
				Если НайденныйЭлемент <> Неопределено Тогда
					ПредставлениеОшибки = НайденныйЭлемент.Представление;
				Иначе
					ПредставлениеОшибки = "Ошибка не извесна (" + Строка(ЗначениеДоставки.error) + ")";
				КонецЕсли;
				
			Исключение
			    ПредставлениеОшибки = "Ошибка получения статуса";
			КонецПопытки;
			ПолучательSMS.СтатусСообщения	= ПредставлениеОшибки;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////
// SMSGOROD.RU

Функция ОтправитьSMSСервисSMSgorod(ТекстSMS, ПолучателиSMS, ВыдаватьСообщенияОбОшибке = Истина, мКлючAPI, мКанал);
	
	Результат = Истина;
	
	СписокОшибок = _SMSGORODRU_СписокОшибок();
	СписокСтатусовДоставки = _SMSGORODRU_СписокСтатусовДоставкиСообщений();
		
	Для Каждого ПолучательSMS Из ПолучателиSMS Цикл
			
		Если ТипСМС = 0 Тогда
			СМС = ?(Транслитерация, ТранслитерацияТекста(ТекстSMS), ТекстSMS);				
		Иначе				
			СМС = ТекстSMS;
		КонецЕсли;
		
		СМС = УдалитьНеПечатныеСимволы(СМС);
		
		_Параметры = "apiKey=" + мКлючAPI;
		
		Если мКанал = "SMS буквенный (прямые подключения)" Тогда
			_Параметры = _Параметры + "&sms[0][channel]=char";
		ИначеЕсли мКанал = "SMS цифра (дешевый, но не стабильный)" Тогда
			_Параметры = _Параметры + "&sms[0][channel]=digit";
		Иначе
			Продолжить;
		КонецЕсли;
		_Параметры = _Параметры + "&sms[0][text]=" + URLEncode(СМС);
		_Параметры = _Параметры + "&sms[0][phone]=" + ПолучательSMS.НомерТелефона;
		Если НЕ ПустаяСтрока(Отправитель) Тогда
			_Параметры = _Параметры + "&sms[0][sender]=" + Отправитель;
		КонецЕсли;
		Если ОтправлятьВУказанноеВремя Тогда
			_Параметры = _Параметры + "&sms[0][plannedAt]=" + Дата2UnixTime(ДатаИВремяОтправки);
		КонецЕсли;
				
		Ответ	= _SMSGORODRU_ПослатьКоманду("/apiSms/create?" + _Параметры); 
				
		Попытка
			Статус = Ответ.status;
		Исключение
			Статус = "";
		КонецПопытки;
		
		Если Статус = "success" Тогда
			Статус = Ответ.data[0].status;
			ПолучательSMS.СтатусСообщения = СписокСтатусовДоставки.НайтиПоЗначению(Статус);
			Если Статус = "error" Тогда
				Результат = Ложь;
				Если Ответ.data[0].Свойство("errorDescription") Тогда
					ПолучательSMS.СтатусСообщения = ПолучательSMS.СтатусСообщения + "(" + ПреобразоватьЮникод(Ответ.data[0].errorDescription) + ")";
				КонецЕсли;
			Иначе
				ПолучательSMS.IDСообщения = Ответ.data[0].id;
			КонецЕсли;				
		Иначе
			Попытка
				Результат = Ложь;
				ПолучательSMS.СтатусСообщения	= "Ошибка отправки SMS (" + ПреобразоватьЮникод(Ответ.data.message) + ")";
			Исключение
				Результат = Ложь;
				ПолучательSMS.СтатусСообщения	= "Ошибка отправки SMS";
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтатусsmsgorod(ПолучателиSMS, ВыдаватьСообщенияОбОшибке = Истина, мКлючAPI) Экспорт
			
	Результат = Истина;
	
	СписокСтатусовДоставки = _P1SMSRU_СписокСтатусовДоставкиСообщений();
	СписокОшибок = _SMSGORODRU_КодыОшибок();
	
	Для Каждого ПолучательSMS Из ПолучателиSMS Цикл
				
		Если ПустаяСтрока(ПолучательSMS.IDСообщения) Тогда
			Продолжить;
		КонецЕсли;
		
		_Параметры = "apiKey=" + мКлючAPI + "&smsId[0]=" + ПолучательSMS.IDСообщения;
		
		Ответ = _P1SMSRU_ПослатьКоманду("/apiSms/getSmsStatus?" + _Параметры);
		
		Попытка
			ЗначениеДоставки = Ответ.Значение[0];
		Исключение
		    ЗначениеДоставки = Новый Структура;
		КонецПопытки;
		
		Если ЗначениеДоставки.Свойство("sms_status") Тогда
			НайденныйЭлемент = СписокСтатусовДоставки.НайтиПоЗначению(ЗначениеДоставки.sms_status);
			Если НайденныйЭлемент <> Неопределено Тогда
				ПолучательSMS.СтатусСообщения		= НайденныйЭлемент.Представление;
			Иначе
				ПолучательSMS.СтатусСообщения		= "Статус не известен (" + Строка(ЗначениеДоставки.sms_status) + ")";
			КонецЕсли;
			
		Иначе
			Попытка
				НайденныйЭлемент = СписокОшибок.НайтиПоЗначению(ЗначениеДоставки.error);
				Если НайденныйЭлемент <> Неопределено Тогда
					ПредставлениеОшибки = НайденныйЭлемент.Представление;
				Иначе
					ПредставлениеОшибки = "Ошибка не извесна (" + Строка(ЗначениеДоставки.error) + ")";
				КонецЕсли;
				
			Исключение
			    ПредставлениеОшибки = "Ошибка получения статуса";
			КонецПопытки;
			ПолучательSMS.СтатусСообщения	= ПредставлениеОшибки;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////
// TERASMS.RU

Функция ОтправитьSMSСервисterasms(ТекстSMS, ПолучателиSMS, ВыдаватьСообщенияОбОшибке = Истина, мЛогин, мОтправитель);
	
	Результат = Истина;
			
	СписокОшибок = _TERASMSRU_СписокОшибок();
			
	Для Каждого ПолучательSMS Из ПолучателиSMS Цикл		
		
		Если ТипСМС = 0 Тогда
			СМС = ?(Транслитерация, ТранслитерацияТекста(ТекстSMS), ТекстSMS);				
		Иначе				
			СМС = ТекстSMS;
		КонецЕсли;
						
		СМС = УдалитьНеПечатныеСимволы(СМС);
				
		Ответ	= м_TERASMSRU_ПослатьКоманду("/outbox/send/", "target=" + URLEncode(ПолучательSMS.НомерТелефона) + "&message=" + URLEncode(СМС) + ?(ПустаяСтрока(мОтправитель), "", "&sender=" + URLEncode(мОтправитель)), мЛогин);
		
		ПерваяСтрока = СтрПолучитьСтроку(Ответ, 1);
						
		Если ПерваяСтрока <> "" И Лев(ПерваяСтрока, 1) <> "-" Тогда
			ПолучательSMS.IDСообщения = ПерваяСтрока;
			ПолучательSMS.СтатусСообщения	= "Отправка";
		Иначе
			Результат = Ложь;
			Ошибка = СписокОшибок.НайтиПоЗначению(Число(ПерваяСтрока));
			ПолучательSMS.СтатусСообщения	= ?(Ошибка <> Неопределено, Ошибка.Представление, "Ошибка отправки SMS (" + ПерваяСтрока + ")");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтатусterasmsru(ПолучателиSMS, ВыдаватьСообщенияОбОшибке = Истина, мЛогин) Экспорт
		
	Результат = Истина;
	
	Статусы = _TERRASMSRU_СписокСтатусовДоставкиСообщений();
	
	Для Каждого ПолучательSMS Из ПолучателиSMS Цикл		
		
		Если ПустаяСтрока(ПолучательSMS.IDСообщения)Тогда
			Продолжить;
		КонецЕсли;
				
		Ответ = м_TERASMSRU_ПослатьКоманду("/outbox/status/", "&id=" + URLEncode(ПолучательSMS.IDСообщения), мЛогин);
						
		// 255753949:440036316:12,255753949:440036317:12
		МассивРазбиений = РазложитьСтрокуВМассивПодстрок(Ответ, ",");
		Для Каждого Эл Из МассивРазбиений Цикл		
			Массив = РазложитьСтрокуВМассивПодстрок(Эл, ":");
			Если Массив.Количество() = 3 Тогда
				Статус	= Число(Массив[2]);
				Элемент	= Статусы.НайтиПоЗначению(Статус);
				Если Элемент <> Неопределено Тогда
					ПолучательSMS.СтатусСообщения	= Элемент.Представление;
				Иначе
					ПолучательSMS.СтатусСообщения	= "Не известный статус доставки (" + Строка(Статус) + ")";
				КонецЕсли;
			ИначеЕсли Массив.Количество() = 1 Тогда
				Статус	= Число(Массив[0]);
				Элемент	= Статусы.НайтиПоЗначению(Статус);
				Если Элемент <> Неопределено Тогда
					ПолучательSMS.СтатусСообщения	= Элемент.Представление;
				Иначе
					ПолучательSMS.СтатусСообщения	= "Не известный статус доставки (" + Строка(Статус) + ")";
				КонецЕсли;				
			Иначе	
				ПолучательSMS.СтатусСообщения = "Неизвестная ошибка доставки СМС <" + Эл + ">";
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
			
	Возврат Результат;
	
КонецФункции

Функция м_TERASMSRU_ПослатьКоманду(Команда, Аргументы = "", мЛогин) Экспорт
	
	Сервер = "auth.terasms.ru";
		
	Ресурс = Команда;                         
	_Параметры = "login=" + СокрЛП(URLEncode(мЛогин)) + "&password=" + СокрЛП(URLEncode(Пароль)) + "&source=multisms" +
		?(Не ПустаяСтрока(Аргументы), "&" + СокрЛП(Аргументы), "");
	
	Рез = ПрочитатьАдрес(Сервер, Ресурс, _Параметры);
		
	Если ПустаяСтрока(Рез)  Тогда

		Если Отладка Тогда
	        Сообщить("Ошибка чтения адреса: "+ Сервер + Ресурс + "?" + _Параметры);
		КонецЕсли;                                                    
		
		Рез = "" // Фиктивный ответ
		
	КонецЕсли; 
	
	Возврат Рез;
	
КонецФункции // _TERASMSRU_ПослатьКоманду()


/////////////////////////////////////////////////////////////////////////////
// SMS-PROSTO.RU   
Функция ОтправитьSMSСервисProstosms(ТекстSMS, ПолучателиSMS, ВыдаватьСообщенияОбОшибке = Истина, мЛогин, мОтправитель) 
	
	Результат =  Истина;
	
	Для Каждого ПолучательSMS Из ПолучателиSMS Цикл		
	
		Если ТипСМС = 0 Тогда
			СМС = ?(Транслитерация, ТранслитерацияТекста(ТекстSMS), ТекстSMS);				
		Иначе				
			СМС = ТекстSMS;
		КонецЕсли;
						
		СМС = УдалитьНеПечатныеСимволы(СМС);  
		
		Ответ	= м_PROSTOSMS_ПослатьКоманду("method=push_msg", 
			"&text=" + URLEncode(СМС) + "&phone=" 
			+ URLEncode(ПолучательSMS.НомерТелефона) 
			+ ?(ПустаяСтрока(мОтправитель),"", "&sender_name=" + URLEncode(мОтправитель)),мЛогин);
	КонецЦикла;
	
    Возврат Результат;
КонецФункции     

Функция м_PROSTOSMS_ПослатьКоманду(Команда, Аргументы = "", мЛогин) Экспорт 
	
	Сервер = "http://api.sms-prosto.ru/";
	
	Ресурс = Команда;
	
	мПараметры = "&email=" + СокрЛП(URLEncode(мЛогин)) + "&password=" + СокрЛП(URLEncode(Пароль)) +  ?(Не ПустаяСтрока(Аргументы), "&" + СокрЛП(Аргументы), "");

    Результат  = ПрочитатьАдрес(Сервер, Ресурс, мПараметры); 
	Возврат Результат;
КонецФункции      

Команда_ОтправитьСМС = "ОтправитьСМС_SMS4B";       
