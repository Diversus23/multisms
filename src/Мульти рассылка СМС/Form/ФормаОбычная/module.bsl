//////////////////////////////////////////////////////////////
// ПОДДЕРЖИВАЕМЫЕ КОНФИГУРАЦИИ НА УПРАВЛЯЕМЫХ ФОРМАХ
//	- УТ 10.3
//  - БП 2.0
//	- Остальные конфигурации на обычных формах, но без функции автоматического заполнения
//	  телефонных номеров по справочникам.	

Перем м_HTTPСоединение;

//////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ОбновитьВидимостьИДоступность()
	
	ДоступностьПрокси										= Сервис <> "sms4b.ru";
	ДоступностьОтладки										= Сервис = "smsc.ru" ИЛИ Сервис = "smsgorod.ru" ИЛИ Сервис = "p1sms.ru";
	ДоступностьПротокола									= Сервис <> "sms4b.ru" И Сервис <> "smsgorod.ru" И Сервис <> "p1sms.ru";
	ДоступностьПодсчетаСтоимостиОтправления					= Сервис = "smsc.ru" ИЛИ Сервис = "sms.ru";
	ДоступностьОтправкиВУказанноеВремя						= Сервис <> "sms4b.ru";
	ДоступностьКлючAPI										= Сервис = "smsgorod.ru" ИЛИ Сервис = "p1sms.ru" ИЛИ Сервис = "sms-prosto.ru";
	
	ЭлементыФормы.ТЗ.Колонки.ТЗТекстСМС.Видимость			= (ТипСМС <> 0);
	ЭлементыФормы.Страницы.Страницы.ТекстSMS.Заголовок		= ?(ТипСМС <> 0, "Шаблон SMS", "Текст SMS");
	ЭлементыФормы.Страницы.Страницы.ОписаниеПеременных.Видимость = (ТипСМС <> 0);
	ЭлементыФормы.ПодставитьПерсональныеСМСВсем.Видимость	= (ТипСМС <> 0);
	
	ТекстПодсказки = ?(ТипСМС <> 0, 
		"Шаблон SMS. Например: ""Уважаемый %Контрагент%! Ваша задолженность составляет %Задолженность%!""", "Текст SMS. Например: ""Уважаемый клиент! В нашем магазине скидки 20% на все до конца этой недели! Спешите!""");
	ЭлементыФормы.ШаблонТекстаСМС.Подсказка = ТекстПодсказки;	
	
	ЭлементыФормы.Отладка.Видимость							= ДоступностьОтладки;
	ЭлементыФормы.ИспользуемыйПротокол.Видимость			= ДоступностьПротокола;		
	ЭлементыФормы.ТЗ.Колонки.ИДСообщения.Видимость			= Отладка;
	ЭлементыФормы.КлючAPI.Видимость							= ДоступностьКлючAPI;
	ЭлементыФормы.НадписьКлючAPI.Видимость					= ДоступностьКлючAPI;
	ЭлементыФормы.НадписьУзнатьКлюч.Видимость				= ДоступностьКлючAPI;
	
	ЭлементыФормы.ПроксиАдрес.Видимость						= ДоступностьПрокси;
	ЭлементыФормы.ПроксиЛогин.Видимость						= ДоступностьПрокси;
	ЭлементыФормы.ПроксиПароль.Видимость					= ДоступностьПрокси;
	ЭлементыФормы.ПроксиПорт.Видимость						= ДоступностьПрокси;
	ЭлементыФормы.ДатаИВремяОтправки.Доступность			= ОтправлятьВУказанноеВремя И ДоступностьОтправкиВУказанноеВремя;
	ЭлементыФормы.ОтправлятьВУказанноеВремя.Доступность		= ДоступностьОтправкиВУказанноеВремя;
	
	Если ДоступностьПодсчетаСтоимостиОтправления Тогда
		НайденнаяКнопка = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Найти("ФормаПосчитатьСтоимостьОтправки");
		Если НайденнаяКнопка = Неопределено Тогда
			НовоеДействие = Новый Действие("ОсновныеДействияФормыФормаПосчитатьСтоимостьОтправки");
			ФормаПосчитатьСтоимостьОтправки = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Вставить(1, 
				"ФормаПосчитатьСтоимостьОтправки", 
				ТипКнопкиКоманднойПанели.Действие, "Посчитать стоимость отправки", НовоеДействие);
		КонецЕсли;
	Иначе
		
		НайденнаяКнопка = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Найти("ФормаПосчитатьСтоимостьОтправки");
		Если НайденнаяКнопка <> Неопределено Тогда
			 ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Удалить(НайденнаяКнопка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьСайт(ИмяСайта)
	
	ЗапуститьПриложение(ИмяСайта);
	
КонецПроцедуры

// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы.
//
//  Параметры
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  КлючДанных                 - ЛюбаяСсылка - на объект информационной базы.
//                               Ссылка на объект информационной базы, к которому это сообщение относится,
//                               или ключ записи.
//  Поле                       - Строка - наименование реквизита формы
//  ПутьКДанным                - Строка - путь к данным (путь к реквизиту формы)
//  Отказ                      - Булево - Выходной параметр
//                               Всегда устанавливается в значение Истина
//
//	Примеры использования:
//
//	1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ПолеВРеквизитеФормыОбъект",
//		"Объект");
//
//	Альтернативный вариант использования в форме объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"Объект.ПолеВРеквизитеФормыОбъект");
//
//	2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ИмяРеквизитаФормы");
//
//	3. Для вывода сообщения связанного с объектом информационной базы
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ОбъектИнформационнойБазы, "Ответственный",,Отказ);
//
// 4. Для вывода сообщения по ссылке на объект информационной базы
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), Ссылка, , , Отказ);
//
// Случаи некорректного использования:
//  1. Передача одновременно параметров КлючДанных и ПутьКДанным
//  2. Передача в параметре КлючДанных значения типа отличного от допустимых
//  3. Установка ссылки без установки поля (и/или пути к данным)
//
Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	ЭтоОбъект = Ложь;
	
#Если НЕ ТонкийКлиент И НЕ ВебКлиент Тогда
	Если КлючДанных <> Неопределено
	   И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = Найти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

// Загружает настройки формы. 
Процедура ЗагрузитьНастройкиФормы()
	
    УстановитьПривилегированныйРежим(Истина);
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("sms4b", "SMS_Настройки");
	УстановитьПривилегированныйРежим(Ложь);
	    
	Если Настройки <> Неопределено Тогда
		
		Попытка	Логин 					= Настройки.SMS_Логин; Исключение КонецПопытки;
		Попытка	Пароль 					= Настройки.SMS_Пароль; Исключение КонецПопытки;
		Попытка	ШаблонТекстаСМС			= Настройки.SMS_Текст; Исключение КонецПопытки;
		Попытка	Отправитель				= Настройки.SMS_ИмяОтправителя; Исключение КонецПопытки;
		Попытка	ТипСМС					= Настройки.SMS_ТипСМС; Исключение КонецПопытки;
		Попытка	Транслитерация			= Настройки.SMS_Транслитерация; Исключение КонецПопытки;
		Попытка	Автообновление 			= Настройки.SMS_Автообновление; Исключение  КонецПопытки;
		Попытка	
			ДатаПоследнейПроверкиОбновления = Настройки.SMS_ДатаПоследнейПроверкиОбновления; 
		Исключение 
			ДатаПоследнейПроверкиОбновления = Дата(1, 1, 1); 
		КонецПопытки;
		
		Попытка	НомерКолонкиТелефона	= Настройки.SMS_НомерКолонкиТелефона; Исключение КонецПопытки;
		Попытка	НомерСИменемАдресата 	= Настройки.SMS_НомерСИменемАдресата; Исключение КонецПопытки;
		Попытка	НомерПервойСтроки 		= Настройки.SMS_НомерПервойСтроки; Исключение КонецПопытки;		
		Попытка	Сервис 					= Настройки.SMS_Сервис; Исключение КонецПопытки;
		
		Попытка	ИспользоватьПрокси		= Настройки.SMS_ИспользоватьПрокси; Исключение КонецПопытки;
		Попытка	ПроксиАдрес				= Настройки.SMS_ПроксиАдрес; Исключение КонецПопытки;
		Попытка	ПроксиЛогин				= Настройки.SMS_ПроксиЛогин; Исключение КонецПопытки;
		Попытка	ПроксиПароль			= Настройки.SMS_ПроксиПароль; Исключение КонецПопытки;
		Попытка	ПроксиПорт				= Настройки.SMS_ПроксиПорт; Исключение КонецПопытки;		
		Попытка	ИспользуемыйПротокол	= Настройки.SMS_ИспользуемыйПротокол; Исключение КонецПопытки;
		Попытка	Отладка					= Настройки.SMS_Отладка; Исключение КонецПопытки;
		Попытка	
			РазрешитьОтправкуСтатистики = Настройки.SMS_РазрешитьОтправкуСтатистики; 
		Исключение 
			РазрешитьОтправкуСтатистики = Истина; 
		КонецПопытки;
		Попытка	КлючAPI					= Настройки.SMS_КлючAPI; Исключение КонецПопытки;
		Попытка	Канал					= Настройки.SMS_Канал; Исключение КонецПопытки;
		
	Иначе
		Автообновление = Истина;
		ДатаПоследнейПроверкиОбновления = Дата(1, 1, 1);
		Сервис = "sms.ru";
		РазрешитьОтправкуСтатистики = Истина;
	КонецЕсли;
	
	Если НомерКолонкиТелефона = 0 Тогда
		НомерКолонкиТелефона = 2;
	КонецЕсли;
	Если НомерСИменемАдресата = 0 Тогда
		НомерСИменемАдресата = 1;
	КонецЕсли;
	Если НомерПервойСтроки = 0 Тогда
		НомерПервойСтроки = 1;
	КонецЕсли;
	Если ПустаяСтрока(Сервис) Тогда
		Сервис = "sms.ru";
	КонецЕсли;
	Если ПустаяСтрока(Канал) Тогда
		Канал = ПервыйКаналОтправкиСервиса(Сервис);
	КонецЕсли;
	ОбновитьСписокКаналов();
	ОбновитьБаланс();
	
КонецПроцедуры

// Процедура сохраняет настройки формы.
//
Процедура СохранитьНастройкиФормы(СтруктураНастроек)
	
	УстановитьПривилегированныйРежим(Истина);
	ХранилищеНастроекДанныхФорм.Сохранить("sms4b", "SMS_Настройки", СтруктураНастроек);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // СохранитьНастройкиФормы()

//////////////////////////////////////////////////////////////
// ОТПРАВКА СОБЫТИЙ СТАТИСТИКИ

Процедура GA_ЗаполнитьПараметры()
	
	СистемнаяИнформация 		= Новый СистемнаяИнформация();
	ВерсияОС 					= СистемнаяИнформация.ВерсияОС;
	ВерсияПлатформы 			= СистемнаяИнформация.ВерсияПриложения;
	НаименованиеКонфигурации	= ?(ПустаяСтрока(Метаданные.Синоним), Метаданные.Имя, Метаданные.Синоним);
	ВерсияКонфигурации			= Метаданные.Версия;
	ИдентификаторПриложения		= "UA-123616100-1";
	ИдентификаторСеанса			= ВычислитьХешСтрокиПоАлгоритмуMD5(Логин);
	
КонецПроцедуры

Функция GA_Сеанс(сСеансИнфо, мДанные = Неопределено) Экспорт
	Перем стДанные;
	
	Если ТипЗнч(сСеансИнфо) <> Тип("Строка") ИЛИ ПустаяСтрока(сСеансИнфо) Тогда
		Возврат мДанные;
	КонецЕсли;
	
	стДанные = Новый Структура();
	GA_ОбязательныеПараметры(стДанные);
	
	стДанные.Вставить("t", "event");
	стДанные.Вставить("sc", сСеансИнфо);
	стДанные.Вставить("ec", "Сервисное событие");
	стДанные.Вставить("ea", "Информация о сеансе");
	
	Если ТипЗнч(мДанные) <> Тип("Массив") Тогда
		мДанные = Новый Массив();
	КонецЕсли;
	мДанные.Добавить(стДанные);
	
	Возврат мДанные;
КонецФункции

Функция GA_Форма_Экран(сФормаНаименование, мДанные = Неопределено) Экспорт
	
	Перем стДанные;
	
	Если ТипЗнч(сФормаНаименование) <> Тип("Строка") ИЛИ ПустаяСтрока(сФормаНаименование) Тогда
		Возврат мДанные;
	КонецЕсли;
	
	стДанные = Новый Структура();
	GA_ОбязательныеПараметры(стДанные);
	
	стДанные.Вставить("t", "screenview");
	стДанные.Вставить("cd", Лев(СокрЛП(сФормаНаименование),1000));
	
	Если ТипЗнч(мДанные) <> Тип("Массив") Тогда
		мДанные = Новый Массив();
	КонецЕсли;
	мДанные.Добавить(стДанные);
	
	Возврат мДанные;	
	
КонецФункции

Функция GA_Ошибка(сОшибкаОписание, Знач бОшибкаФатальная, мДанные = Неопределено) Экспорт
	
	Перем стДанные;
	
	Если ТипЗнч(сОшибкаОписание) <> Тип("Строка") ИЛИ ПустаяСтрока(сОшибкаОписание) Тогда
		Возврат мДанные;
	КонецЕсли;
	Если ТипЗнч(бОшибкаФатальная) <> Тип("Булево") Тогда
		бОшибкаФатальная = Ложь;
	КонецЕсли;
	
	стДанные = Новый Структура();
	GA_ОбязательныеПараметры(стДанные);
	
	стДанные.Вставить("t", "exception");
	стДанные.Вставить("exd", Лев(СокрЛП(сОшибкаОписание),70));
	стДанные.Вставить("exf", ?(бОшибкаФатальная,"1", "0"));
	
	Если ТипЗнч(мДанные) <> Тип("Массив") Тогда
		мДанные = Новый Массив();
	КонецЕсли;
	мДанные.Добавить(стДанные);
	
	Возврат мДанные;
	
КонецФункции

&НаКлиенте
Процедура GA_ОбязательныеПараметры(стДанные)
	
	Если ТипЗнч(стДанные) <> Тип("Структура") Тогда
		стДанные = Новый Структура();
	КонецЕсли;
	
	стДанные.Вставить("v",   "1");
	стДанные.Вставить("tid", ИдентификаторПриложения);
	стДанные.Вставить("cid", ИдентификаторСеанса);
	стДанные.Вставить("uid", ИдентификаторСеанса);
	
	стДанные.Вставить("an",  "Мульти рассылка SMS");
	стДанные.Вставить("av",  ВерсияОбработки());
	стДанные.Вставить("cd1", ВерсияПлатформы);
	стДанные.Вставить("cd2", ВерсияОС);
	стДанные.Вставить("cd3", НаименованиеКонфигурации);
	стДанные.Вставить("cd4", ВерсияКонфигурации);
	стДанные.Вставить("cd5", Сервис);
	
КонецПроцедуры

Функция GA_НачатьРаботу() Экспорт
	Перем бВыполненоБезОшибок, сТекстОшибки;
	
	бВыполненоБезОшибок = Ложь;
	
	м_сСобытиеЖР = "Отправка статистики";
	
	Если ПустаяСтрока(ИдентификаторПриложения) Тогда
		сТекстОшибки = "Не установлен идентификатор приложения. Начало работы с GA невозможно.
		|  Функция: GA_НачатьРаботу";
		ЗаписьЖурналаРегистрации(м_сСобытиеЖР,УровеньЖурналаРегистрации.Ошибка,,,сТекстОшибки);
		Возврат бВыполненоБезОшибок;
	КонецЕсли;
	
	Если ПустаяСтрока(ИдентификаторСеанса) Тогда
		сТекстОшибки = "Не установлен идентификатор клиента. Начало работы с GA невозможно.
		|  Функция: GA_НачатьРаботу";
		ЗаписьЖурналаРегистрации(м_сСобытиеЖР,УровеньЖурналаРегистрации.Ошибка,,,сТекстОшибки);
		Возврат бВыполненоБезОшибок;
	КонецЕсли;
	
	Если НЕ УстановитьHTTPСоединение() Тогда
		сТекстОшибки = "Не установлено HTTP соединение. Начало работы с GA невозможно.
		|  Функция: GA_НачатьРаботу";
		ЗаписьЖурналаРегистрации(м_сСобытиеЖР,УровеньЖурналаРегистрации.Ошибка,,,сТекстОшибки);
		Возврат бВыполненоБезОшибок;
	КонецЕсли; 
	
	бВыполненоБезОшибок = Истина;
	Возврат бВыполненоБезОшибок;
КонецФункции

Процедура GA_ЗакончитьРаботу() Экспорт
	
	м_HTTPСоединение = Неопределено;
	
КонецПроцедуры

Функция GA_Событие(сСобытиеКатегория, сСобытиеНаименование, Знач сЭлемент=Неопределено, 
	Знач чКоличество=Неопределено, мДанные=Неопределено) Экспорт
	
	Перем стДанные;
	
	Если ТипЗнч(сСобытиеКатегория) <> Тип("Строка") ИЛИ ПустаяСтрока(сСобытиеКатегория) Тогда
		Возврат мДанные;
	КонецЕсли;
	Если ТипЗнч(сСобытиеНаименование) <> Тип("Строка") ИЛИ ПустаяСтрока(сСобытиеНаименование) Тогда
		Возврат мДанные;
	КонецЕсли;
	Если ТипЗнч(сЭлемент) <> Тип("Строка") ИЛИ ПустаяСтрока(сСобытиеНаименование) Тогда
		сЭлемент = Неопределено;
	КонецЕсли;
	Если ТипЗнч(чКоличество) <> Тип("Число") Тогда
		чКоличество = Неопределено;
	КонецЕсли;
	
	стДанные = Новый Структура();
	GA_ОбязательныеПараметры(стДанные);
	
	стДанные.Вставить("t", "event");
	стДанные.Вставить("ec", Лев(СокрЛП(сСобытиеКатегория),70));
	стДанные.Вставить("ea", Лев(СокрЛП(сСобытиеНаименование),250));
	Если сЭлемент <> Неопределено Тогда
		стДанные.Вставить("el", Лев(СокрЛП(сЭлемент),250));
	КонецЕсли;
	Если чКоличество <> Неопределено Тогда
		стДанные.Вставить("ev", Лев(Строка(чКоличество),20));
	КонецЕсли;
	
	Если ТипЗнч(мДанные) <> Тип("Массив") Тогда
		мДанные = Новый Массив();
	КонецЕсли;
	мДанные.Добавить(стДанные);
	
	Возврат мДанные;
	
КонецФункции

Процедура GA_ОтправитьСведения(мДанные) Экспорт
	
	Перем сТекстОшибки, сАдресРесурса, HTTPЗапрос, HTTPОтвет, сТелоЗапроса; 
	Перем ПереносСтроки, стДанные, индекс;
	
	м_сСобытиеЖР = "Отправка статистики";
	
	Если НЕ РазрешитьОтправкуСтатистики Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ИдентификаторПриложения) <> Тип("Строка") ИЛИ ПустаяСтрока(ИдентификаторПриложения) Тогда
		сТекстОшибки = "Не установлен обязательный параметр ""Идентификатор приложения""
			|  Функция: ОтправитьСведенияВGA";
		ЗаписьЖурналаРегистрации(м_сСобытиеЖР, УровеньЖурналаРегистрации.Ошибка,,,сТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(мДанные) <> Тип("Массив") ИЛИ мДанные.Количество() = 0 Тогда
		сТекстОшибки = "Не верный формат данных для отправки. Нужен массив структур.
		|  Функция: ОтправитьСведенияВGA";
		ЗаписьЖурналаРегистрации(м_сСобытиеЖР, УровеньЖурналаРегистрации.Ошибка,,,сТекстОшибки);
		Возврат;		
	КонецЕсли;
	
	Если ТипЗнч(м_HTTPСоединение) <> Тип("HTTPСоединение") Тогда
		сТекстОшибки = "Не установлено соединение с GA
		|  Функция: ОтправитьСведенияВGA";
		ЗаписьЖурналаРегистрации(м_сСобытиеЖР, УровеньЖурналаРегистрации.Ошибка,,,сТекстОшибки);
		Возврат;		
	КонецЕсли;
	
	HTTPЗапрос = Новый HTTPЗапрос();
	Если мДанные.Количество() = 1 Тогда
		сАдресРесурса = ?(Отладка, "/debug/collect", "/collect");
		ПереносСтроки = "";
	Иначе
		сАдресРесурса = ?(Отладка, "/debug/batch", "/batch");
		ПереносСтроки = Символы.ПС;
	КонецЕсли;
	HTTPЗапрос.АдресРесурса = сАдресРесурса;
	
	сТелоЗапроса = "";
	Для индекс = 0 По мДанные.Количество() - 1 Цикл
		стДанные = мДанные[индекс];
		сТелоЗапроса = сТелоЗапроса + ?(индекс = 0,"",ПереносСтроки) + СтруктуруВСтрокуСРазделителем(стДанные);
	КонецЦикла;
	
	Если ПустаяСтрока(сТелоЗапроса) Тогда
		сТекстОшибки = "Не сформировано тело запроса. Пустая строка ""сТелоЗапроса""
		|  Функция: ОтправитьСведенияВGA";
		ЗаписьЖурналаРегистрации(м_сСобытиеЖР, УровеньЖурналаРегистрации.Ошибка,,,сТекстОшибки);
		Возврат;		
	КонецЕсли;
	
	Попытка
		HTTPЗапрос.УстановитьТелоИзСтроки(КодироватьСтрокуURL(сТелоЗапроса));
		HTTPОтвет = м_HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		Если Отладка Тогда
			сТекстОшибки = 
				"___ОТЛАДОЧНАЯ ИНФОРМАЦИЯ___
				|  Режим отладки включен
				|  Адрес ресурса: " + сАдресРесурса + " 
				|  Тело запроса:  " + сТелоЗапроса + "
				|  Код ответа:    " + Строка(HTTPОтвет.КодСостояния) + "
				|  Тело ответа:   " + HTTPОтвет.ПолучитьТелоКакСтроку();			
			ЗаписьЖурналаРегистрации(м_сСобытиеЖР, УровеньЖурналаРегистрации.Информация,,,сТекстОшибки);
		КонецЕсли;		
	Исключение
		сТекстОшибки = 
			"Ошибка при отправке данных на на сервер GA.
			|  Функция: ОтправитьСведенияВGA
			|  Содержимое: " + сТелоЗапроса + "  
			|  Описание ошибки: " + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(м_сСобытиеЖР, УровеньЖурналаРегистрации.Ошибка,,,сТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

Функция УстановитьHTTPСоединение()
	Перем бВыполненоБезОшибок, сТекстОшибки, ТипСоединения;
	
	бВыполненоБезОшибок = Истина;
	
	м_сСобытиеЖР = "Отправка статистики";
	
	Если ТипЗнч(м_HTTPСоединение)=Тип("HTTPСоединение") Тогда
		Возврат бВыполненоБезОшибок;
	КонецЕсли;
	
	Попытка
		Выполнить(
			"ТипСоединения = Новый ЗащищенноеСоединениеOpenSSL(Неопределено,Неопределено);
			|м_HTTPСоединение = Новый HTTPСоединение(""www.google-analytics.com"",,,,,,ТипСоединения);"
		);
		Возврат бВыполненоБезОшибок;
	Исключение			
	КонецПопытки;
	
	Попытка
		м_HTTPСоединение = Новый HTTPСоединение("www.google-analytics.com");
		Возврат бВыполненоБезОшибок;
	Исключение			
		сТекстОшибки = "Не удалось установить HTTP соединение с www.google-analytics.com
			|  Функция: УстановитьСоединение";
		ЗаписьЖурналаРегистрации(м_сСобытиеЖР, УровеньЖурналаРегистрации.Предупреждение,,,сТекстОшибки);
		бВыполненоБезОшибок = Ложь;
	КонецПопытки;
	
	Возврат бВыполненоБезОшибок;
	
КонецФункции

Функция КодироватьСтрокуURL(сСтрока)
	Попытка
		Возврат Вычислить("КодироватьСтроку(сСтрока, СпособКодированияСтроки.URLВКодировкеURL)");
	Исключение
	КонецПопытки;
	
	Попытка
		Возврат Вычислить("URLEncode(сСтрока)");
	Исключение
	КонецПопытки;
	
КонецФункции

Функция СтруктуруВСтрокуСРазделителем(стДанные)
	Перем сРезультат, элемент, бПервыйЭлемент;
	Перем РАЗДЕЛИТЕЛЬ;
	
	// КОНСТАНТЫ
	РАЗДЕЛИТЕЛЬ = "&";
	
	Если ТипЗнч(стДанные) <> Тип("Структура") ИЛИ стДанные.Количество() = 0 Тогда
		Возврат сРезультат;
	КонецЕсли;
	
	сРезультат = "";
	бПервыйЭлемент = Истина;
	Для каждого элемент Из стДанные Цикл
		сРезультат = сРезультат + ?(бПервыйЭлемент, "", РАЗДЕЛИТЕЛЬ) + элемент.Ключ + "=" + элемент.Значение;
		бПервыйЭлемент = Ложь;
	КонецЦикла;
	
	Возврат сРезультат;
КонецФункции

//////////////////////////////////////////////////////////////
// СОБЫТИЯ СЕРВЕРА

Функция ПолучитьТелефоныПоЭлементу(ЭлементСправочника)
	
	Если НЕ ЗначениеЗаполнено(ЭлементСправочника) ИЛИ ТипЗнч(ЭлементСправочника) = Тип("Строка") Тогда
		Возврат "";
	КонецЕсли;
	
	// Добавляем первый попавшийся контакт
	Элемент = "";
	Результат = "";
	
	Попытка
		Элемент = ЭлементСправочника.Метаданные().Имя;		
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ПОДСТРОКА(КонтактнаяИнформация.Представление, 1, 1000) КАК Телефон
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
			|	И КонтактнаяИнформация.Объект = &ЭлементСправочника";
		
		Запрос.УстановитьПараметр("ЭлементСправочника", ЭлементСправочника);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СЗ = ПолучитьСписокПривденныхНомеров(Выборка.Телефон);
			Если СЗ.Количество() > 0 Тогда
				Результат = СЗ.Получить(0).Значение;
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		Возврат Результат;
	КонецПопытки;
			
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьБаланс()
	
	БалансЧисло = 0;
	ЕстьОшибка	= Ложь;
	
	Если Сервис = "sms4b.ru" Тогда
		
		_SMS4BRU_Баланс(Баланс, ЕстьОшибка);
		
	ИначеЕсли Сервис = "smsc.ru" Тогда
		
		_SMSCRU_Баланс(Баланс, ЕстьОшибка);
		
	ИначеЕсли Сервис = "sms.ru" Тогда
		
		_SMSRU_Баланс(Баланс, ЕстьОшибка);
				
	ИначеЕсли Сервис = "p1sms.ru" Тогда
		
		_P1SMSRU_Баланс(Баланс, ЕстьОшибка);
		
	ИначеЕсли Сервис = "smsgorod.ru" Тогда
		
		_SMSGORODRU_Баланс(Баланс, ЕстьОшибка);
				
	ИначеЕсли Сервис = "terasms.ru" Тогда
		
		_TERASMSRU_Баланс(Баланс, ЕстьОшибка);
		
	ИначеЕсли Сервис = "sms-prosto.ru" Тогда
		
		_PROSTOSMS_Баланс(Баланс, ЕстьОшибка);
		
	КонецЕсли;
	
	Если ЕстьОшибка Тогда
		ЭлементыФормы.Баланс.ЦветТекста = WebЦвета.Красный;
		ЭлементыФормы.Баланс.Заголовок	= Баланс;
	Иначе
		ЭлементыФормы.Баланс.ЦветТекста = Новый Цвет(51, 102, 255);
		ЭлементыФормы.Баланс.Заголовок	= "Баланс: " + Баланс;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокиПоЗапросу(Элемент, ТекстЗапроса, ЗначенияПараметров = Неопределено)
			
	Запрос = Новый Запрос(ТекстЗапроса);

		//" + Элемент + "	
	Запрос.УстановитьПараметр("ТипЗначенияОбъекта", Метаданные.Справочники[Элемент].Синоним);

	Если ЗначенияПараметров <> Неопределено Тогда                
		Для Каждого Элемент Из ЗначенияПараметров Цикл
			Для Каждого КлючЗначение Из Элемент Цикл
				Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Контрагент = Выборка.Контрагент;
		Телефоны = СокрЛП(Выборка.Телефон);
				
		Если НЕ ПустаяСтрока(Телефоны) Тогда
			
			// Получаем список телефонов
			СЗ = ПолучитьСписокПривденныхНомеров(Телефоны);
			
			Для Индекс = 0 По СЗ.Количество() - 1 Цикл
				Если СтрДлина(СЗ.Получить(Индекс)) = 11 Тогда // Вид 89531168040
					НоваяСтрока = ТЗ.Добавить();
					НоваяСтрока.Флаг		= Истина;
					НоваяСтрока.ТипЗначенияОбъекта = Выборка.ТипЗначенияОбъекта;
					НоваяСтрока.Контрагент	= Контрагент;
					НоваяСтрока.Телефон		= СЗ.Получить(Индекс);
					НоваяСтрока.Статус		= "Не отправлено";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура Заполнить(МассивСправочников, ДопУсловия = "", ЗначенияПараметров = Неопределено)
	
	ТЗ.Очистить();
	
	Для Каждого Элемент Из МассивСправочников Цикл
		//
		
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ИСТИНА КАК Флаг,
			|	КонтактнаяИнформация.Объект КАК Контрагент,
			|	ПОДСТРОКА(КонтактнаяИнформация.Представление, 1, 1000) КАК Телефон,
			|	&ТипЗначенияОбъекта КАК ТипЗначенияОбъекта
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
			|	И &ДополнительныеУсловия
			|
			|УПОРЯДОЧИТЬ ПО
			|	Телефон
			|АВТОУПОРЯДОЧИВАНИЕ";
		
		ТекстДопУсловий = "ТИПЗНАЧЕНИЯ(КонтактнаяИнформация.Объект) = ТИП(Справочник." 
			+ Элемент + ") " + ДопУсловия;		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеУсловия", ТекстДопУсловий);
		
		ЗаполнитьСтрокиПоЗапросу(Элемент, ТекстЗапроса, ЗначенияПараметров);
		
	КонецЦикла;
	
	ТЗ.Сортировать("Контрагент");
	УдалитьДубли(Неопределено);
	
КонецПроцедуры

Процедура ЗаполнитьПоСотрудникам(Очищать = Истина)
	
	Если Очищать Тогда
		ТЗ.Очистить();
	КонецЕсли;
		
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИСТИНА КАК Флаг,
		|	Сотрудники.Ссылка КАК Контрагент,
		|	&ТипЗначенияОбъекта КАК ТипЗначенияОбъекта,
		|	Спр.Представление КАК Телефон
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК Спр
		|		ПО Сотрудники.ФизическоеЛицо = Спр.Ссылка
		|ГДЕ
		|	Спр.НомерТелефона <> """"";
		
	ЗаполнитьСтрокиПоЗапросу("Сотрудники", ТекстЗапроса);
	
	ТЗ.Сортировать("Контрагент");
	
КонецПроцедуры

Процедура ПодставитьПерсональныеСМСВсемНаСервере()
	
	// Вычисление общих переменных
	Пользователь 		= ПользователиИнформационнойБазы.ТекущийПользователь();
	ТекущийПользователь = ?(ПустаяСтрока(Пользователь.ПолноеИмя), Пользователь.Имя, Пользователь.ПолноеИмя);
	ТекДата				= Формат(ТекущаяДата(), "ДФ=dd.MM.yy");
	ТекВремя			= Формат(ТекущаяДата(), "ДЛФ=T");
	
	// Выполнение запросов для данных в общем
	Если Найти(ВРег(ШаблонТекстаСМС), ВРег("%Задолженность%")) > 0 Тогда 
		Если Найти(ИмяКонфигурации(), "УправлениеТорговлей") > 0 Тогда
			//ПолучитьОбщуюЗадолженностьУТ();
		ИначеЕсли Найти(ИмяКонфигурации(), "БухгалтерияПредприятия") > 0 Тогда
			//ПолучитьОбщуюЗадолженностьБП();
		КонецЕсли;
	КонецЕсли;
		
	
	// Выводим сообщения для каждого абонента
	Для каждого Стр Из ТЗ Цикл
		
		Если Стр.Флаг Тогда
			
			Текст = ШаблонТекстаСМС;
			
			// ВЫЧИСЛЯЕМ ПЕРЕМЕННЫЕ В ТЕКСТЕ
			Для Каждого Элемент Из СписокПеременных Цикл
				
				// В тексте нет больше переменных
				Если Найти(Текст,"%") = 0 Тогда
					Прервать;
				КонецЕсли;
				
				// Вычисляем каждую переменную
				П = ВРег(Элемент.Значение);				
				Индекс = Найти(ВРег(Текст), П);
				Если Индекс > 0 Тогда
					
					ВычисленнаяПеременная = "";
					Если П = ВРег("%Задолженность%") Тогда
						ВычисленнаяПеременная = "";//ПолучитьЗадолженность(Стр.Контрагент);
					ИначеЕсли П = ВРег("%Контрагент%") Тогда
						ВычисленнаяПеременная = Строка(Стр.Контрагент);
					ИначеЕсли П = ВРег("%Телефон%") Тогда
						ВычисленнаяПеременная = Стр.Телефон;
					ИначеЕсли П = ВРег("%ТекущийПользователь%") Тогда
						ВычисленнаяПеременная = ТекущийПользователь;
					ИначеЕсли П = ВРег("%ТекущаяДата%") Тогда
						ВычисленнаяПеременная = ТекДата;
					ИначеЕсли П = ВРег("%ТекущееВремя%") Тогда
						ВычисленнаяПеременная = ТекВремя;
					ИначеЕсли П = ВРег("%ФИО_Фамилия%") Тогда						
						Структура = ФамилияИмяОтчество(Строка(Стр.Контрагент));
						ВычисленнаяПеременная = Структура.Фамилия;
					ИначеЕсли П = ВРег("%ФИО_Имя%") Тогда
						Структура = ФамилияИмяОтчество(Строка(Стр.Контрагент));
						ВычисленнаяПеременная = Структура.Имя;
					ИначеЕсли П = ВРег("%ФИО_Отчество%") Тогда
						Структура = ФамилияИмяОтчество(Строка(Стр.Контрагент));
						ВычисленнаяПеременная = Структура.Отчество;
					КонецЕсли;
					
					// Замена строки "Текст1 %Переменная% Текст2" на "Текст1 ВычисленнаяПеременная Текст2", 
					// где ВычисленнаяПеременная - вычесленная переменная приведенная к строке
					Текст = Лев(Текст, Индекс - 1) + ВычисленнаяПеременная + Сред(Текст, Индекс + СтрДлина(П));
					
				КонецЕсли;
			КонецЦикла;			
			
			// Если есть %Вычислить(...)% вычисляем
			Попытка
				Пока Найти(ВРег(Текст), ВРег("%Вычислить(")) > 0 Цикл
				
					П = ВРег("%Вычислить(");
					Индекс1 = Найти(ВРег(Текст), П);
					Индекс2 = Найти(ВРег(Текст), ")%");
					СтрокаВычисления = Сред(Текст, Индекс1 + СтрДлина(П), Индекс2 - (Индекс1 + СтрДлина(П)));
					ВычисленнаяПеременная = Вычислить(СтрокаВычисления);
					
					Текст = Лев(Текст, Индекс1 - 1) + ВычисленнаяПеременная + Сред(Текст, Индекс2 + 2);
				КонецЦикла;
			Исключение
			КонецПопытки;
			
			Стр.ТекстСМС = Текст;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОтправитьСМСНаСервере(ПосчитатьСтоимость = Ложь)
	
	Если ПустаяСтрока(Логин) Тогда
		СообщитьПользователю(
			"Не заполнен логин доступа к сайту для отправки SMS. Щелкните на кнопку ""Регистрация"", а затем после регистрации введите логин и пароль.",,
			"Логин");
		Возврат Неопределено;
	КонецЕсли;
		
	Если ТипСМС = 0 И ПустаяСтрока(ШаблонТекстаСМС) Тогда
		СообщитьПользователю(
			"Не заполнено сообщение, которое будет отправлено всем контрагентам",,
			"ШаблонТекстаСМС");
		Возврат Неопределено;
	КонецЕсли;
	
	// Не выбранно ни одного адресата
	ЕстьВыбранныеНомера = Ложь;
	Для каждого Стр Из ТЗ Цикл
		Если Стр.Флаг Тогда
			ЕстьВыбранныеНомера = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ЕстьВыбранныеНомера Тогда
		СообщитьПользователю(
			"Установите галочки в тех строках, куда вы хотите отправить SMS (можно установить сразу все вверху таблицы)",,
			"ТЗ");
		Возврат Неопределено;		
	КонецЕсли;
	
	Если НЕ ПосчитатьСтоимость И ОтправлятьВУказанноеВремя И ДатаИВремяОтправки < ТекущаяДата() Тогда
		СообщитьПользователю("Время указанное для отправки меньше текущего",,"ДатаИВремяОтправки");
		Возврат Неопределено;				
	КонецЕсли;
	
	Если ТипСМС = 1 Тогда
		
		// Проверим, что все SMS с пустым текстом (надо ввести текст и заполнить персональные SMS)
		ВсеСМСПустые = Истина;
		Для каждого Стр Из ТЗ Цикл
			Если Стр.Флаг И НЕ ПустаяСтрока(Стр.ТекстСМС) Тогда
				ВсеСМСПустые = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;		
		Если ВсеСМСПустые Тогда
			СообщитьПользователю(
				"Введите текст SMS и нажмите на кнопку ""Подставить персональные SMS в таблицу"" для формирования персональных SMS каждому адресату",,
				"ШаблонТекстаСМС");
			Возврат Неопределено;		
		КонецЕсли;
		
		// Проверим, что у кого-то не заполнен персональный шаблон
		ЕстьОшибка = Ложь;		
		Для каждого Стр Из ТЗ Цикл
			Если Стр.Флаг И ПустаяСтрока(Стр.ТекстСМС) Тогда
				СообщитьПользователю("На номер " + Стр.Телефон + " не введена персональная SMS",,"ТЗ");
				ЕстьОшибка = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьОшибка Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	КоличествоОтправленных = 0;
	Если Сервис = "sms4b.ru" Тогда
		КоличествоОтправленных = _SMS4BRU_ОтправитьSMS(ТЗ);
	ИначеЕсли Сервис = "smsc.ru" Тогда
		КоличествоОтправленных = _SMSCRU_ОтправитьSMS(ТЗ, ПосчитатьСтоимость);
	ИначеЕсли Сервис = "sms.ru" Тогда
		КоличествоОтправленных = _SMSRU_ОтправитьSMS(ТЗ, ПосчитатьСтоимость);
	ИначеЕсли Сервис = "p1sms.ru" Тогда
		КоличествоОтправленных = _P1SMSRU_ОтправитьSMS(ТЗ, ПосчитатьСтоимость);
	ИначеЕсли Сервис = "smsgorod.ru" Тогда
		КоличествоОтправленных = _SMSGORODRU_ОтправитьSMS(ТЗ, ПосчитатьСтоимость);
	ИначеЕсли Сервис = "terasms.ru" Тогда
		КоличествоОтправленных = _TERASMSRU_ОтправитьSMS(ТЗ, ПосчитатьСтоимость);
	ИначеЕсли Сервис = "sms-prosto.ru" Тогда
		КоличествоОтправленных = _PROSTOSMS_ОтправитьSMS(ТЗ, ПосчитатьСтоимость);
	КонецЕсли;
	
	Возврат КоличествоОтправленных;
	
КонецФункции

Процедура ОбновитьСтатусДоставкиНаСервере()
	
	Если Сервис = "sms4b.ru" Тогда
		_SMS4BRU_ОбновитьСтатусДоставки(ТЗ);
	ИначеЕсли Сервис = "smsc.ru" Тогда
		_SMSCRU_ОбновитьСтатусДоставки(ТЗ);
	ИначеЕсли Сервис = "sms.ru" Тогда
		_SMSRU_ОбновитьСтатусДоставки(ТЗ);
	ИначеЕсли Сервис = "p1sms.ru" Тогда
		_P1SMSRU_ОбновитьСтатусДоставки(ТЗ);
	ИначеЕсли Сервис = "smsgorod.ru" Тогда
		_SMSGORODRU_ОбновитьСтатусДоставки(ТЗ);
	ИначеЕсли Сервис = "terasms.ru" Тогда
		_TERASMSRU_ОбновитьСтатусДоставки(ТЗ);
	ИначеЕсли Сервис = "sms-prosto.ru" Тогда
		_PROSTOSMS_ОбновитьСтатусДоставки(ТЗ)
	КонецЕсли;

	ОбновитьБаланс();
	
КонецПроцедуры

Функция НеобходимоОбновить(Принудительно = Ложь)
		
	// Проверяем обновления
	Попытка
		Результат = ПроверитьОбновлениеИУстановить(Автообновление, ДатаПоследнейПроверкиОбновления, 
			Принудительно);
	
		Возврат Результат;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Процедура Обновление(Принудительно = Ложь)
	
	мПринудительно = Принудительно;
	Структура = НеобходимоОбновить(Принудительно);
	Если Структура <> Неопределено Тогда
		ДатаПоследнейПроверкиОбновления = ТекущаяДата();
		Если Структура.НеобходимоОбновление Тогда
			Форма = ЭтотОбъект.ПолучитьФорму("ФормаОбновленияОбычная", ЭтаФорма);
			Если Структура.Свойство("СайтАвтора") Тогда
				Форма.СайтАвтора = Структура.СайтАвтора;
			КонецЕсли;
			
			Если Структура.Свойство("ТекстПриОбновлении") Тогда
				Форма.ТекстПриОбновлении = Структура.ТекстПриОбновлении;
			КонецЕсли;
			
			Если Структура.Свойство("КоличествоОбновлений") Тогда
				Форма.КоличествоОбновлений = Структура.КоличествоОбновлений > 1;
			КонецЕсли;                  
			
			Форма.ОткрытьМодально();
		ИначеЕсли мПринудительно Тогда
			Предупреждение("Обновление не требуется!
				|Установлена самая последняя версия.");
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

//////////////////////////////////////////////////////////////
// СОБЫТИЯ ФОРМЫ

Процедура ПриОткрытии()
	
	Перем ТекстВопроса, Ответ, ПараметрыИсточника;
	
	ПараметрыСеансаОбработки	= ОбработкаОбъект.ОбработкаПолучитьПараметрыСеанса(ЭтаФорма);	
	ЗагрузитьНастройкиФормы();
		
	Если Отладка Тогда
		ДатаПоследнейПроверкиОбновления = Дата(1, 1, 1);
	КонецЕсли;
	
	Обновление();
	
	Если НЕ ПустаяСтрока(Логин) Тогда
		ОбновитьБаланс();
	КонецЕсли;	
	
	// Видимость быстрого заполнения	
	КнопкиЗаполнить = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Заполнить.Кнопки;
		
	СписокПеременных.Очистить();
	СписокПеременных.Добавить("%Контрагент%"			, "Наименование контрагента, как оно задано в таблице в колонке ""Контрагент"" (приводится к строке)");
	СписокПеременных.Добавить("%ФИО_Фамилия%"			, "Если указано ФИО, то содержит фамилию, если указано не ФИО то возвращает 1-ое слово поля ""Контрагент"", или пусто если слов меньше");
	СписокПеременных.Добавить("%ФИО_Имя%"				, "Если указано ФИО, то содержит имя, если указано не ФИО то возвращает 2-ое слово поля ""Контрагент"", или пусто если слов меньше");
	СписокПеременных.Добавить("%ФИО_Отчество%"			, "Если указано ФИО, то содержит отчество, если указано не ФИО то возвращает 3-ое слово поля ""Контрагент"", или пусто если слов меньше");
	СписокПеременных.Добавить("%Телефон%"				, "Номер телефона контрагента, которому отправляется SMS");
	СписокПеременных.Добавить("%ТекущийПользователь%"	, "Текущий пользователь, который делает рассылку SMS");
	СписокПеременных.Добавить("%ТекущаяДата%"			, "Текущая дата (время по серверу)");
	СписокПеременных.Добавить("%ТекущееВремя%"			, "Текущее время (время по серверу)");
	СписокПеременных.Добавить("%Вычислить(...)%"		, "Позволяет вставлять в текст вычисляемые переменные. Например, можно ипользовать: 
		|<i>%Вычислить(ФизическиеЛицаКлиентСервер.ФамилияИнициалыФизЛица(Строка(Стр.Контрагент)))%</i> для вставки кода, который вычислить краткое представление вида Иванов И.И. Или 
		|<i>%Вычислить(ОбщийМодульСервер.ПолучитьЗадолженностьКоготоНаДату(ТекущаяДата(), Стр.Контрагент))%</i> (пример вымышленный), позволит вызывать любую функцию из общего модуля, которая что-то подсчитает и вставит вместо себя по контрагенту. 
		|Так же может быть использовано для вставки каких то вычислений типа задолженности, заработной платы и т.д. (рекомендуется использовать только знающим людям)");
	
	// Установка доступных типов
	МассивТипов		= Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	ПараметрыСтроки = Новый КвалификаторыСтроки(100);
	
	Если Найти(ИмяКонфигурации(), "УправлениеТорговлей") > 0 Тогда
		
		// УТ 10.3
		
		МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
		МассивТипов.Добавить(Тип("СправочникСсылка.КонтактныеЛица"));
		МассивТипов.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
		МассивТипов.Добавить(Тип("СправочникСсылка.Пользователи"));
		
	ИначеЕсли Найти(ИмяКонфигурации(), "БухгалтерияПредприятия") > 0 Тогда
		
		// БП 2.0
		
		МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
		МассивТипов.Добавить(Тип("СправочникСсылка.КонтактныеЛица"));
		МассивТипов.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
		
		КнопкиЗаполнить.Удалить(КнопкиЗаполнить.ТолькоПоПользователям);
		
	ИначеЕсли Найти(ИмяКонфигурации(), "Розница") > 0 Тогда
		
		// Розница 1.0
		
		МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
		МассивТипов.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
		
		КнопкиЗаполнить.Удалить(КнопкиЗаполнить.ТолькоПоПользователям);
		
	Иначе
		
		КнопкиЗаполнить.Удалить(КнопкиЗаполнить.Заполнить);
		КнопкиЗаполнить.Удалить(КнопкиЗаполнить.ЗаполнитьПоГруппеВКонтрагентах);
		КнопкиЗаполнить.Удалить(КнопкиЗаполнить.ТолькоПоФизическимЛицам);
		КнопкиЗаполнить.Удалить(КнопкиЗаполнить.ТолькоПоПользователям);
		КнопкиЗаполнить.Удалить(КнопкиЗаполнить.ТолькоПоКонтрагентам);
		
	КонецЕсли;
	
	// Ограничиваем тип
	ЭУ = ЭлементыФормы.ТЗ.Колонки.Контрагент.ЭлементУправления;
	ЭУ.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов,,,,ПараметрыСтроки);
	
	Разделитель = "<br>=====================================================================<br>";
	СписокПеременных.СортироватьПоЗначению();
	ТекстПеременные =
		"<html><body><p style=""font-family:Arial;font-size:10pt;"">"
		+ "<b>Описание переменных, которые можно использовать в тексте SMS</b>" 
		+ Разделитель;
	Для Каждого Элемент Из СписокПеременных Цикл
		ТекстПеременные = ТекстПеременные + "
			|" + Элемент.Значение + " - " + Элемент.Представление + Разделитель;
	КонецЦикла;
	ТекстПеременные = ТекстПеременные + "</p></body></html>";
	ЭлементыФормы.Переменные.УстановитьТекст(ТекстПеременные);
	
	ЭлементыФормы.Сервис.СписокВыбора.Добавить("sms.ru");
	ЭлементыФормы.Сервис.СписокВыбора.Добавить("smsc.ru");	
	ЭлементыФормы.Сервис.СписокВыбора.Добавить("sms4b.ru");
	//ЭлементыФормы.Сервис.СписокВыбора.Добавить("p1sms.ru");
	ЭлементыФормы.Сервис.СписокВыбора.Добавить("smsgorod.ru");
	ЭлементыФормы.Сервис.СписокВыбора.Добавить("terasms.ru");
	ЭлементыФормы.Сервис.СписокВыбора.Добавить("sms-prosto.ru");
	
	ОбновитьСписокОтправителей();
	ОбновитьВидимостьИДоступность();
	// Если логин пустой или какая то ошибка подключения
	Если ПустаяСтрока(Логин) ИЛИ ЭлементыФормы.Баланс.ЦветТекста = WebЦвета.Красный Тогда
		ЭлементыФормы.Страницы.ТекущаяСтраница = ЭлементыФормы.Страницы.Страницы.ДоступНаСайт;
	КонецЕсли;
	
	ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " Версия: " + ВерсияОбработки();
	
	GA_ЗаполнитьПараметры();
	GA_НачатьРаботу();
	мДанные = GA_Сеанс("start");
	GA_ОтправитьСведения(мДанные);
	мДанные = GA_Форма_Экран("Обработка");
	GA_ОтправитьСведения(мДанные);
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("SMS_Логин"					, Логин);
	СтруктураНастроек.Вставить("SMS_Пароль"					, Пароль);
	СтруктураНастроек.Вставить("SMS_ИмяОтправителя"			, Отправитель);
	СтруктураНастроек.Вставить("SMS_Текст"					, ШаблонТекстаСМС);
	СтруктураНастроек.Вставить("SMS_ТипСМС"					, ТипСМС);
	СтруктураНастроек.Вставить("SMS_Транслитерация"			, Транслитерация);
	СтруктураНастроек.Вставить("SMS_Автообновление"			, Автообновление);
	СтруктураНастроек.Вставить("SMS_ДатаПоследнейПроверкиОбновления", ДатаПоследнейПроверкиОбновления);
	СтруктураНастроек.Вставить("SMS_НомерКолонкиТелефона"	, НомерКолонкиТелефона);
	СтруктураНастроек.Вставить("SMS_НомерСИменемАдресата"	, НомерСИменемАдресата);
	СтруктураНастроек.Вставить("SMS_НомерПервойСтроки"		, НомерПервойСтроки);
	СтруктураНастроек.Вставить("SMS_Сервис"					, Сервис);
	СтруктураНастроек.Вставить("SMS_ИспользоватьПрокси"		, ИспользоватьПрокси);
	СтруктураНастроек.Вставить("SMS_ПроксиАдрес"			, ПроксиАдрес);
	СтруктураНастроек.Вставить("SMS_ПроксиЛогин"			, ПроксиЛогин);
	СтруктураНастроек.Вставить("SMS_ПроксиПароль"			, ПроксиПароль);
	СтруктураНастроек.Вставить("SMS_ПроксиПорт"				, ПроксиПорт);
	СтруктураНастроек.Вставить("SMS_ИспользуемыйПротокол"	, ИспользуемыйПротокол);
	СтруктураНастроек.Вставить("SMS_Отладка"				, Отладка);
	СтруктураНастроек.Вставить("SMS_РазрешитьОтправкуСтатистики", РазрешитьОтправкуСтатистики);
	СтруктураНастроек.Вставить("SMS_Канал"					, Канал);
	СтруктураНастроек.Вставить("SMS_КлючAPI"				, КлючAPI);
	
	СохранитьНастройкиФормы(СтруктураНастроек);
	
	мДанные = GA_Сеанс("end");
	GA_ОтправитьСведения(мДанные);	
	GA_ЗакончитьРаботу();
	
КонецПроцедуры

//////////////////////////////////////////////////////////////
// СОБЫТИЯ КОМАНДНЫХ ПАНЕЛЕЙ

Процедура КоманднаяПанель1УстановитьВсе(Кнопка)
	Для каждого Строки Из ТЗ Цикл
		Строки.Флаг = Истина;
	КонецЦикла;
КонецПроцедуры

Процедура КоманднаяПанель1СнятьВсе(Кнопка)
	Для каждого Строки Из ТЗ Цикл
		Строки.Флаг = Ложь;
	КонецЦикла;
КонецПроцедуры

Процедура КоманднаяПанель1Очистить(Кнопка)
	ТЗ.Очистить();
КонецПроцедуры

Процедура УдалитьДубли(Кнопка)
	
	ВременнаяТаблица = ТЗ.Выгрузить();
	ВременнаяТаблица.Колонки.Добавить("Колво");
	ВременнаяТаблица.ЗаполнитьЗначения(1, "Колво");
	ВременнаяТаблица.Свернуть("Телефон", "Колво");
	
	Для Каждого Строки Из ВременнаяТаблица Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Телефон", Строки.Телефон);
		НайденныеСтроки = ТЗ.НайтиСтроки(Отбор);
		Для Индекс = 1 По НайденныеСтроки.Количество() - 1 Цикл
			ТЗ.Удалить(НайденныеСтроки[Индекс]);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанель2ОбновитьСтатусДоставки(Кнопка)
	
	ОбновитьСтатусДоставкиНаСервере();
	
КонецПроцедуры

//////////////////////////////////////////////////////////////
// СОБЫТИЯ ШАПКИ

Процедура ОбновитьБалансНажатие(Элемент)
	
	ОбновитьБаланс();

КонецПроцедуры

Процедура ПополнитьБалансНажатие(Элемент)
	
	ОткрытьСайт(ПолучитьСсылкуСервиса(Сервис, "ПополнитьБаланс"));
	
КонецПроцедуры

Процедура НадписьРегистрацияНажатие(Элемент)
	
	ОткрытьСайт(ПолучитьСсылкуСервиса(Сервис, "Регистрация"));
		
КонецПроцедуры

Процедура НадписьЗабылиПарольНажатие(Элемент)
	
	ОткрытьСайт(ПолучитьСсылкуСервиса(Сервис, "ЗабылиПароль"));
	
КонецПроцедуры

Процедура НадписьСогласоватьНажатие(Элемент)
	
	ОткрытьСайт(ПолучитьСсылкуСервиса(Сервис, "Согласовать"));
	
КонецПроцедуры

Процедура НадписьУзнатьКлючНажатие(Элемент)
	
	ОткрытьСайт(ПолучитьСсылкуСервиса(Сервис, "КлючAPI"));
	
КонецПроцедуры

Процедура ТипСМСПриИзменении(Элемент)
	
	ОбновитьВидимостьИДоступность();
		
КонецПроцедуры

Процедура ТипСМСПерсональнаяПриИзменении(Элемент)
	
	ОбновитьВидимостьИДоступность();
		
КонецПроцедуры

Процедура ПодставитьПерсональныеСМСВсемНажатие(Элемент)
	
	ПодставитьПерсональныеСМСВсемНаСервере();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыЗаполнитьПоГруппеВКонтрагентах(Кнопка)
	
	ГруппаКонтрагентов = Справочники.Контрагенты.ПустаяСсылка();
	Если ВвестиЗначение(ГруппаКонтрагентов, "Выберите группу") Тогда
		
		МассивСправочников = Новый Массив();
		МассивСправочников.Добавить("Контрагенты");
		
		Массив = Новый Массив;
		Структура = Новый Структура();
		Структура.Вставить("ГруппаКонтрагентов", ГруппаКонтрагентов);
		Массив.Добавить(Структура);
		 
		Заполнить(МассивСправочников, 
			" И КонтактнаяИнформация.Объект В ИЕРАРХИИ(&ГруппаКонтрагентов) ", 
			Массив);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОтправитьSMS(Кнопка)
	
	Результат = ОтправитьСМСНаСервере();
	Если Результат <> Неопределено Тогда
		
		мДанные = GA_Событие("Отправка SMS", "Отправлено", Сервис, Результат);
		GA_ОтправитьСведения(мДанные);
		
		Предупреждение("ОТПРАВЛЕНО " + Строка(Результат) + " СООБЩЕНИЙ!");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыИзФайлаExcel(Кнопка)
	ФормаНастройки = ЭтотОбъект.ПолучитьФорму("ФормаЗагрузкиИзExcelОбычная");
	ФормаНастройки.НомерКолонкиТелефона = НомерКолонкиТелефона;
	ФормаНастройки.НомерСИменемАдресата = НомерСИменемАдресата;
	ФормаНастройки.НомерПервойСтроки	= НомерПервойСтроки;
    Результат = ФормаНастройки.ОткрытьМодально();
	Если Результат <> Неопределено Тогда
		
		НомерКолонкиТелефона	= Результат.НомерКолонкиТелефона;
		НомерСИменемАдресата	= Результат.НомерСИменемАдресата;
		НомерПервойСтроки		= Результат.НомерПервойСтроки;
		
		// Выбираем файл Excel		
		Если ТЗ.Количество()>0 Тогда
			Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = Вопрос("Очистить таблицу контактов перед загрузкой?", Режим, 0);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ТЗ.Очистить();
			КонецЕсли;
		КонецЕсли;		
		
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.Заголовок = "Укажите файл базы абонентов";
		Диалог.Фильтр = "Файлы Excel (*.xls;*.xlsx)|*.xls;*.xlsx|Все файлы (*.*)|*.*";
		Диалог.Расширение = "xls";
		Если Диалог.Выбрать() Тогда
			ИмяФайла = Диалог.ПолноеИмяФайла;
			ИмяПути = Диалог.Каталог;
			Попытка	
				Эксель =  Новый COMОбъект("Excel.Application"); 
			Исключение
				Сообщить(ОписаниеОшибки() + " Программа Exсel не установлена на данном компьютере!"); 
				Возврат;
			КонецПопытки; 
					
			Книга = Эксель.WorkBooks.Open(ИмяФайла); 
			Лист = Книга.WorkSheets(1); 
			КолСтрок = Лист.Cells(1,1).SpecialCells(11).Row;
			Для Ном = НомерПервойСтроки По КолСтрок Цикл 
				Телефон = Лист.Cells(Ном, НомерКолонкиТелефона).Value;
				Если Телефон <> "" И Телефон <> Неопределено Тогда
					НоваяСтрока				= ТЗ.Добавить();
					НоваяСтрока.Телефон		= СтрЗаменить(Телефон, Символы.НПП, "");
					НоваяСтрока.Контрагент	= Лист.Cells(Ном, НомерСИменемАдресата).Value;
					НоваяСтрока.Флаг		= Истина;
					НоваяСтрока.Статус		= "Не отправлено";
				КонецЕсли; 
			КонецЦикла;	
			
			Эксель.Quit();
		Иначе
			Сообщить("Файл не выбран! Чтение не произведено.");		
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьСписокКаналов(Знач ПерезаполнитьКанал = Истина)
	
	ЭлементыФормы.Канал.СписокВыбора.Очистить();
	Если НЕ ПустаяСтрока(Сервис) Тогда
		
		СЗ = КаналыОтправкиСервиса(Сервис); 
		Для Каждого Элемент Из СЗ Цикл
			ЭлементыФормы.Канал.СписокВыбора.Добавить(Элемент.Значение);
		КонецЦикла;
		
		Если ПерезаполнитьКанал = Истина Тогда
			Если ЭлементыФормы.Канал.СписокВыбора.НайтиПоЗначению(Канал) = Неопределено Тогда
				Канал = ПервыйКаналОтправкиСервиса(Сервис);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСписокОтправителей()
	
	ЭлементыФормы.Отправитель.СписокВыбора.Очистить();
	
	Если НЕ ПустаяСтрока(Логин) И НЕ ПустаяСтрока(Пароль) Тогда
		
		СЗ = Неопределено;
		Если Сервис = "smsc.ru" Тогда
			
			СЗ = _SMSCRU_СписокОтправителей();
			
		ИначеЕсли Сервис = "sms.ru" Тогда
			
			СЗ = _SMSRU_СписокОтправителей();
			
		ИначеЕсли Сервис = "p1sms.ru" Тогда
			
			//_P1SMSRU_Баланс(Баланс, ЕстьОшибка);
			СЗ = _P1SMSRU_СписокОтправителей();
			
		ИначеЕсли Сервис = "smsgorod.ru" Тогда
			
			СЗ = _SMSGORODRU_СписокОтправителей();
					
		КонецЕсли;
		
		Если СЗ <> Неопределено Тогда		
			Если ТипЗнч(СЗ) = Тип("Строка") Тогда
				// Это ошибка, ее можно вывести, но мы ее просто игнорируем
				Возврат;
			Иначе
				Для Каждого Элемент Из СЗ Цикл
					ЭлементыФормы.Отправитель.СписокВыбора.Добавить(Элемент.Значение);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыФормы.Отправитель.КнопкаСпискаВыбора = ЭлементыФормы.Отправитель.СписокВыбора.Количество() > 0;
	Если ЭлементыФормы.Отправитель.СписокВыбора.Количество() > 0 Тогда
		
		Для Каждого Элемент Из ЭлементыФормы.Отправитель.СписокВыбора Цикл
			Если Элемент.Значение = Отправитель Тогда
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
		Отправитель = ЭлементыФормы.Отправитель.СписокВыбора.Получить(0).Значение;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СервисПриИзменении(Элемент)
	
	ОбновитьСписокКаналов();
	ОбновитьСписокОтправителей();
	ОбновитьВидимостьИДоступность();
	GA_ЗаполнитьПараметры();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыФормаПосчитатьСтоимостьОтправки(Кнопка)
	
	Результат = ОтправитьСМСНаСервере(Истина);
	Если Результат <> Неопределено Тогда
		СтрПредупреждения = "";
		Если ТипЗнч(Результат) = Тип("Число") Тогда
			СтрПредупреждения = "Стоимость отправки выбранных сообщений " + Строка(Результат) + " руб.";
		Иначе
			СтрПредупреждения = Строка(Результат);
		КонецЕсли;
		Предупреждение(СтрПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИспользоватьПроксиПриИзменении(Элемент)
	
	ОбновитьВидимостьИДоступность();
	
КонецПроцедуры

Процедура НадписьТарифыНажатие(Элемент)
	
	ОткрытьСайт(ПолучитьСсылкуСервиса(Сервис, "Тарифы"));
	
КонецПроцедуры

Процедура ОсновныеДействияФормыДобавитьСписокНомеров(Кнопка)
	
	Текст = "";
	Подсказка = "Введите номера по одному на каждой строке";
	Если ВвестиСтроку(Текст, Подсказка, 0, Истина) Тогда
		
		Для Индекс = 1 По СтрЧислоСтрок(Текст) Цикл
			
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.Флаг = Истина;
			НоваяСтрока.Телефон = СтрПолучитьСтроку(Текст, Индекс);
			НоваяСтрока.Статус = "Не отправлено";
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОтладкаПриИзменении(Элемент)
	
	ОбновитьВидимостьИДоступность();
	
КонецПроцедуры

Процедура СайтАвтораНажатие(Элемент)
	
	ОткрытьСайт("https://softonit.ru/?utm_campaign=multisms&utm_source=1c&utm_medium=from_form&utm_content=" 
		+ ВерсияОбработки());
	
КонецПроцедуры

Процедура ТЗКонтрагентПриИзменении(Элемент)
	
	Если ЭлементыФормы.ТЗ.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы.ТЗ.ТекущиеДанные.Телефон = ПолучитьТелефоныПоЭлементу(ЭлементыФормы.ТЗ.ТекущиеДанные.Контрагент);
	
КонецПроцедуры

Процедура НадписьПроверитьОбновлениеНажатие(Элемент)
	
	Обновление(Истина);
	
КонецПроцедуры

Процедура ТЗПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Элемент.ТекущиеДанные <> Неопределено Тогда
		Элемент.ТекущиеДанные.Флаг = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправлятьВУказанноеВремяПриИзменении(Элемент)
	
	ОбновитьВидимостьИДоступность();
	Если ОтправлятьВУказанноеВремя Тогда
		ДатаИВремяОтправки = КонецЧаса(ТекущаяДата()) + 1;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыТолькоПоФизическимЛицам(Кнопка)
	                             
	МассивСправочников = Новый Массив();
	МассивСправочников.Добавить("ФизическиеЛица");
	Заполнить(МассивСправочников);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыТолькоПоПользователям(Кнопка)

	МассивСправочников = Новый Массив();
	МассивСправочников.Добавить("Пользователи");
	Заполнить(МассивСправочников);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыТолькоПоКонтрагентам(Кнопка)
	
	МассивСправочников = Новый Массив();
	МассивСправочников.Добавить("Контрагенты");
	Заполнить(МассивСправочников);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыЗаполнить(Кнопка)
	
	МассивСправочников = Новый Массив();
	Если Найти(ИмяКонфигурации(), "УправлениеТорговлей") > 0 Тогда
		МассивСправочников.Добавить("Контрагенты");
		МассивСправочников.Добавить("КонтактныеЛица");
		МассивСправочников.Добавить("ФизическиеЛица");
		МассивСправочников.Добавить("Пользователи");
	ИначеЕсли Найти(ИмяКонфигурации(), "БухгалтерияПредприятия") > 0 Тогда
		МассивСправочников.Добавить("Контрагенты");
		МассивСправочников.Добавить("КонтактныеЛица");
		МассивСправочников.Добавить("ФизическиеЛица");
	ИначеЕсли Найти(ИмяКонфигурации(), "Розница") > 0 Тогда
		МассивСправочников.Добавить("Контрагенты");
		МассивСправочников.Добавить("ФизическиеЛица");
	КонецЕсли;
	
	Заполнить(МассивСправочников);
	
КонецПроцедуры

Процедура ЛогинПриИзменении(Элемент)
	
	ОбновитьСписокОтправителей();
	GA_ЗаполнитьПараметры();
	
КонецПроцедуры

Процедура ПарольПриИзменении(Элемент)
	
	ОбновитьСписокОтправителей();
	
КонецПроцедуры

Процедура КаналПриИзменении(Элемент)
	
	ОбновитьСписокОтправителей();
	GA_ЗаполнитьПараметры();	
	
КонецПроцедуры

Функция ВерсияОбработки()
	
	Возврат ПолучитьТекущуюВерсию();
	
КонецФункции

Процедура КлючAPIПриИзменении(Элемент)
	
	ОбновитьБаланс();
	ОбновитьСписокОтправителей();
	GA_ЗаполнитьПараметры();	
	
КонецПроцедуры
