//////////////////////////////////////////////////////////////
// ПОДДЕРЖИВАЕМЫЕ КОНФИГУРАЦИИ НА УПРАВЛЯЕМЫХ ФОРМАХ
//	- УТ 11
//	- БП 3.0
//	- ЗУП 3.0
//	- УНФ 1.5, 1.6
//	- Розница 2.0, 2.1, 2.2
//	- Документоборот ПРОФ/КОРП 2.0
//	- КА 2.0
//  - ФитнесКлуб_ПРОФ
//  - ФитнесКлуб_КОРП
//	- Автосервис
//	- Остальные конфигурации на управляемых формах, но без функции автоматического заполнения
//	  телефонных номеров по справочникам.	

&НаКлиенте
Перем м_HTTPСоединение;

//////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ОбновитьВидимостьИДоступность()
	
	ДоступностьПрокси										= Объект.Сервис <> "sms4b.ru";
	ДоступностьОтладки										= Объект.Сервис = "smsc.ru" ИЛИ Объект.Сервис = "sms.ru" 
		ИЛИ Объект.Сервис = "smsgorod.ru" ИЛИ Объект.Сервис = "p1sms.ru";
	ДоступностьПротокола									= Объект.Сервис <> "sms4b.ru" И Объект.Сервис <> "smsgorod.ru"; 
	ДоступностьПодсчетаСтоимостиОтправления					= Объект.Сервис = "smsc.ru" ИЛИ Объект.Сервис = "sms.ru";
	ДоступностьОтправкиВУказанноеВремя						= Объект.Сервис <> "sms4b.ru";
	ДоступностьКлючAPI										= Объект.Сервис = "smsgorod.ru" ИЛИ Объект.Сервис = "p1sms.ru";
	ОтправительРежимВыбораИзСписка							= Объект.Сервис <> "smsgorod.ru";
	
	Элементы.ТЗТекстСМС.Видимость							= (Объект.ТипСМС <> 0);
	Элементы.ТекстSMS.Заголовок								= ?(Объект.ТипСМС <> 0, "Шаблон SMS", "Текст SMS");
	Элементы.ОписаниеПеременных.Видимость					= (Объект.ТипСМС <> 0);
	Элементы.ПодставитьПерсональныеСМСВсем.Видимость		= (Объект.ТипСМС <> 0);
	
	ТекстПодсказки = ?(Объект.ТипСМС <> 0, 
		"Шаблон SMS. Например: ""Уважаемый %Контрагент%! Ваша задолженность составляет %Задолженность%!""", "Текст SMS. Например: ""Уважаемый клиент! В нашем магазине скидки 20% на все до конца этой недели! Спешите!""");
	Попытка
		Элементы.ШаблонТекстаСМС.ПодсказкаВвода = ТекстПодсказки;
		Элементы.ШаблонТекстаСМС.Подсказка = ТекстПодсказки;
	Исключение
		Элементы.ШаблонТекстаСМС.Подсказка = ТекстПодсказки;
	КонецПопытки;
	Элементы.ГруппаПрокси.Доступность = Объект.ИспользоватьПрокси;
	
	Элементы.Отладка.Видимость								= ДоступностьОтладки;
	Элементы.ИспользуемыйПротокол.Видимость					= ДоступностьПротокола;	
	Элементы.ПроксиСервер.Видимость							= ДоступностьПрокси;	
	Элементы.ТЗИДСообщения.Видимость						= Объект.Отладка;
	Элементы.КлючAPI.Видимость								= ДоступностьКлючAPI;
	Элементы.ДекорацияКлючAPI.Видимость						= ДоступностьКлючAPI;
	Элементы.ДекорацияУзнатьКлюч.Видимость		 			= ДоступностьКлючAPI;
	Элементы.Отправитель.РежимВыбораИзСписка				= НЕ ОтправительРежимВыбораИзСписка;
	
	Элементы.ФормаПосчитатьСтоимостьОтправки.Видимость		= ДоступностьПодсчетаСтоимостиОтправления;
	Элементы.ДатаИВремяОтправки.Доступность					= Объект.ОтправлятьВУказанноеВремя И ДоступностьОтправкиВУказанноеВремя;
	Элементы.ГруппаОтправкаВУказанноеВремя.Доступность		= ДоступностьОтправкиВУказанноеВремя;
	
	Если Объект.Сервис = "sms.ru" Тогда 
		Объект.СсылкаНаСайт = "https://sys1c.sms.ru/?panel=register";
		Объект.СсылкаНаСайтПредставление = "sms.ru";
	ИначеЕсли Объект.Сервис = "smsc.ru" Тогда 
		Объект.СсылкаНаСайт = "https://smsc.ru/reg/?";	
		Объект.СсылкаНаСайтПредставление = "smsc.ru";
	ИначеЕсли Объект.Сервис = "sms4b.ru" Тогда 
		Объект.СсылкаНаСайт = "https://www.sms4b.ru/regform.php";
		Объект.СсылкаНаСайтПредставление = "sms4b.ru";
	ИначеЕсли Объект.Сервис = "p1sms.ru" Тогда 
		Объект.СсылкаНаСайт = "https://admin.p1sms.ru/ru-ru/registration.html?utm_term=&utm_source=&utm_campaign=&utm_ref_id=&utm_refer_site=&utm_start_url=https%3A%2F%2Fp1sms.ru%2F";	
		Объект.СсылкаНаСайтПредставление = "p1sms.ru";
	ИначеЕсли Объект.Сервис = "smsgorod.ru" Тогда 
		Объект.СсылкаНаСайт = "https://new.smsgorod.ru/ru-ru/registration.html?utm_term=&utm_source=&utm_campaign=&utm_ref_id=&utm_refer_site=&utm_start_url=https%3A%2F%2Fsmsgorod.ru%2F";	
		Объект.СсылкаНаСайтПредставление = "smsgorod.ru";
	ИначеЕсли Объект.Сервис = "terasms.ru" Тогда 
		Объект.СсылкаНаСайт = "terasms.ru";	
		Объект.СсылкаНаСайтПредставление = "terasms.ru";
	ИначеЕсли Объект.Сервис = "sms-prosto.ru" Тогда 
		Объект.СсылкаНаСайт = "https://sms-prosto.ru/tseny/";	
		Объект.СсылкаНаСайтПредставление = "sms-prosto.ru";

	КонецЕсли;
		
КонецПроцедуры

// Возвращает имя конфигурации
&НаСервере
Функция ИмяКонфигурации()
	
	Возврат Метаданные.Имя;
	
КонецФункции

// Функция выполняет транслитерацию переданного текста и возвращает результат
//этого преобразования.Для транслитерации используется последовательность GSM3.38.
// 
// Параметры:
//  Сообщение (строка) - Содержит текст для транслитерации
//
// Возвращаемое значение (строка):
//  Преобразованный в транслит текст.
&НаСервереБезКонтекста
Функция Транслитерация(Текст) Экспорт
	
	// Заполняем список соответствий
	СписокСоответствийТранслитерации = Новый СписокЗначений;
	СписокСоответствийТранслитерации.Добавить("а", "a");
	СписокСоответствийТранслитерации.Добавить("б", "b");
	СписокСоответствийТранслитерации.Добавить("в", "v");
	СписокСоответствийТранслитерации.Добавить("г", "g");
	СписокСоответствийТранслитерации.Добавить("д", "d");
	СписокСоответствийТранслитерации.Добавить("е", "e");
	СписокСоответствийТранслитерации.Добавить("ё", "yo");
	СписокСоответствийТранслитерации.Добавить("ж", "zh");
	СписокСоответствийТранслитерации.Добавить("з", "z");
	СписокСоответствийТранслитерации.Добавить("и", "i");
	СписокСоответствийТранслитерации.Добавить("й", "j");
	СписокСоответствийТранслитерации.Добавить("к", "k");
	СписокСоответствийТранслитерации.Добавить("л", "l");
	СписокСоответствийТранслитерации.Добавить("м", "m");
	СписокСоответствийТранслитерации.Добавить("н", "n");
	СписокСоответствийТранслитерации.Добавить("о", "o");
	СписокСоответствийТранслитерации.Добавить("п", "p");
	СписокСоответствийТранслитерации.Добавить("р", "r");
	СписокСоответствийТранслитерации.Добавить("с", "s");
	СписокСоответствийТранслитерации.Добавить("т", "t");
	СписокСоответствийТранслитерации.Добавить("у", "u");
	СписокСоответствийТранслитерации.Добавить("ф", "f");
	СписокСоответствийТранслитерации.Добавить("х", "x"); 
	СписокСоответствийТранслитерации.Добавить("ц", "c"); 
	СписокСоответствийТранслитерации.Добавить("ч", "ch");
	СписокСоответствийТранслитерации.Добавить("ш", "sh");
	СписокСоответствийТранслитерации.Добавить("щ", "shh"); 
	СписокСоответствийТранслитерации.Добавить("ъ", "''");
	СписокСоответствийТранслитерации.Добавить("Ъ", "''");
	СписокСоответствийТранслитерации.Добавить("ы", "y");
	СписокСоответствийТранслитерации.Добавить("Ы", "Y");
	СписокСоответствийТранслитерации.Добавить("ь", "'");
	СписокСоответствийТранслитерации.Добавить("Ь", "'");
	СписокСоответствийТранслитерации.Добавить("э", "e");
	СписокСоответствийТранслитерации.Добавить("ю", "yu");
	СписокСоответствийТранслитерации.Добавить("я", "ya");
	СписокСоответствийТранслитерации.Добавить("А", "A");
	СписокСоответствийТранслитерации.Добавить("Б", "B");
	СписокСоответствийТранслитерации.Добавить("В", "V");
	СписокСоответствийТранслитерации.Добавить("Г", "G");
	СписокСоответствийТранслитерации.Добавить("Д", "D");
	СписокСоответствийТранслитерации.Добавить("Е", "E");
	СписокСоответствийТранслитерации.Добавить("Ё", "Yo");
	СписокСоответствийТранслитерации.Добавить("Ж", "Zh");
	СписокСоответствийТранслитерации.Добавить("З", "Z");
	СписокСоответствийТранслитерации.Добавить("И", "I");
	СписокСоответствийТранслитерации.Добавить("Й", "J");
	СписокСоответствийТранслитерации.Добавить("К", "K");
	СписокСоответствийТранслитерации.Добавить("Л", "L");
	СписокСоответствийТранслитерации.Добавить("М", "M");
	СписокСоответствийТранслитерации.Добавить("Н", "N");
	СписокСоответствийТранслитерации.Добавить("О", "O");
	СписокСоответствийТранслитерации.Добавить("П", "P");
	СписокСоответствийТранслитерации.Добавить("Р", "R");
	СписокСоответствийТранслитерации.Добавить("С", "S");
	СписокСоответствийТранслитерации.Добавить("Т", "T");
	СписокСоответствийТранслитерации.Добавить("У", "U");
	СписокСоответствийТранслитерации.Добавить("Ф", "F");
	СписокСоответствийТранслитерации.Добавить("Х", "X");
	СписокСоответствийТранслитерации.Добавить("Ц", "C");
	СписокСоответствийТранслитерации.Добавить("Ч", "Ch");
	СписокСоответствийТранслитерации.Добавить("Ш", "Sh");
	СписокСоответствийТранслитерации.Добавить("Щ", "Shh");
	СписокСоответствийТранслитерации.Добавить("Э", "E");
	СписокСоответствийТранслитерации.Добавить("Ю", "Yu");
	СписокСоответствийТранслитерации.Добавить("Я", "Ya");
	СписокСоответствийТранслитерации.Добавить("«", "<");
	СписокСоответствийТранслитерации.Добавить("»", ">");
	СписокСоответствийТранслитерации.Добавить("№", "N");
	СписокСоответствийТранслитерации.Добавить("{", "(");
	СписокСоответствийТранслитерации.Добавить("[", "(");
	СписокСоответствийТранслитерации.Добавить("}", ")");
	СписокСоответствийТранслитерации.Добавить("]", ")");
	СписокСоответствийТранслитерации.Добавить("\", "/");
	СписокСоответствийТранслитерации.Добавить("|", "I");
	СписокСоответствийТранслитерации.Добавить("^", "'");
	СписокСоответствийТранслитерации.Добавить("_", "-");
	СписокСоответствийТранслитерации.Добавить("~", "-");
	СписокСоответствийТранслитерации.Добавить("`", "'");
	СписокСоответствийТранслитерации.Добавить(Символы.НПП, " ");
	
	СписокСоответствийСимовлы = Новый СписокЗначений;
	СписокСоответствийСимовлы.Добавить(91,"(");
	СписокСоответствийСимовлы.Добавить(92,"/");
	СписокСоответствийСимовлы.Добавить(93,")");
	СписокСоответствийСимовлы.Добавить(94,"'");
	СписокСоответствийСимовлы.Добавить(95,"-");
	СписокСоответствийСимовлы.Добавить(96,"'");
	СписокСоответствийСимовлы.Добавить(123,"(");
	СписокСоответствийСимовлы.Добавить(124,"!");
	СписокСоответствийСимовлы.Добавить(125,")");
	СписокСоответствийСимовлы.Добавить(126,"-");
	СписокСоответствийСимовлы.Добавить(127," ");
	СписокСоответствийСимовлы.Добавить(130,",");
	СписокСоответствийСимовлы.Добавить(132,"""");
	СписокСоответствийСимовлы.Добавить(133,"...");
	СписокСоответствийСимовлы.Добавить(136,"'");
	СписокСоответствийСимовлы.Добавить(137,"%");
	СписокСоответствийСимовлы.Добавить(139,"<");
	СписокСоответствийСимовлы.Добавить(145,"'");
	СписокСоответствийСимовлы.Добавить(146,"'");
	СписокСоответствийСимовлы.Добавить(147,"""");
	СписокСоответствийСимовлы.Добавить(148,"""");
	СписокСоответствийСимовлы.Добавить(149,"-");
	СписокСоответствийСимовлы.Добавить(150,"-");
	СписокСоответствийСимовлы.Добавить(151,"-");
	СписокСоответствийСимовлы.Добавить(152,"-");
	СписокСоответствийСимовлы.Добавить(155,">");
	СписокСоответствийСимовлы.Добавить(160," ");
	СписокСоответствийСимовлы.Добавить(161,"!");
	СписокСоответствийСимовлы.Добавить(166,"!");
	СписокСоответствийСимовлы.Добавить(168,"""");
	СписокСоответствийСимовлы.Добавить(169,"(C)");
	СписокСоответствийСимовлы.Добавить(171,"<");
	СписокСоответствийСимовлы.Добавить(172,"");
	СписокСоответствийСимовлы.Добавить(173,"-");
	СписокСоответствийСимовлы.Добавить(174,"(R)");
	СписокСоответствийСимовлы.Добавить(175,"-");
	СписокСоответствийСимовлы.Добавить(176,"'");
	СписокСоответствийСимовлы.Добавить(180,"'");
	СписокСоответствийСимовлы.Добавить(183,"-");
	СписокСоответствийСимовлы.Добавить(185,"N");
	СписокСоответствийСимовлы.Добавить(187,">");
	СписокСоответствийСимовлы.Добавить(8218,",");
	СписокСоответствийСимовлы.Добавить(8222,"""");
	СписокСоответствийСимовлы.Добавить(8230,"...");
	СписокСоответствийСимовлы.Добавить(8265,"'");
	СписокСоответствийСимовлы.Добавить(8240,"%");
	СписокСоответствийСимовлы.Добавить(8249,"<");
	СписокСоответствийСимовлы.Добавить(8216,"'");
	СписокСоответствийСимовлы.Добавить(8217,"'");
	СписокСоответствийСимовлы.Добавить(8220,"""");
	СписокСоответствийСимовлы.Добавить(8221,"""");
	СписокСоответствийСимовлы.Добавить(8208,"-");
	СписокСоответствийСимовлы.Добавить(8209,"-");
	СписокСоответствийСимовлы.Добавить(8210,"-");
	СписокСоответствийСимовлы.Добавить(8211,"-");
	СписокСоответствийСимовлы.Добавить(8212,"-");
	СписокСоответствийСимовлы.Добавить(8213,"-");
	СписокСоответствийСимовлы.Добавить(732,"-");
	СписокСоответствийСимовлы.Добавить(8250,">");
	СписокСоответствийСимовлы.Добавить(8232," ");
	СписокСоответствийСимовлы.Добавить(8254,"-");
	СписокСоответствийСимовлы.Добавить(8226,"-");
	СписокСоответствийСимовлы.Добавить(8470,"N");
	СписокСоответствийСимовлы.Добавить(8219,"'");
	СписокСоответствийСимовлы.Добавить(8223,"""");
	СписокСоответствийСимовлы.Добавить(8228,".");
	СписокСоответствийСимовлы.Добавить(8231,"-");
	СписокСоответствийСимовлы.Добавить(8263,"-");
	СписокСоответствийСимовлы.Добавить(8259,"-");
	СписокСоответствийСимовлы.Добавить(8260,"/");
	СписокСоответствийСимовлы.Добавить(8962," ");
	

	РезультирующийТекст = "";
	// Общая длина текста
	ДлинаТекста = СтрДлина(Текст);
	// Транслитирируем
	Для Сч = 1 По ДлинаТекста Цикл
		// Получаем код текущего символа
		КодСимвола = КодСимвола(Текст, Сч);
		// Проверяем что текущий символ заглавная буква
		РусскаяЗаглавная = Ложь;
		Если (КодСимвола > 1039 И КодСимвола < 1072) ИЛИ (КодСимвола = 1025) Тогда
			РусскаяЗаглавная = Истина;
		КонецЕсли;
		Символ = Сред(Текст, Сч, 1);
		// Ищем в таблице соответствие
		Соответствие = СписокСоответствийТранслитерации.НайтиПоЗначению(Символ);
		// Если нашли
		Если НЕ (Соответствие = Неопределено) Тогда
			// Меняем символ
			Символ = Соответствие.Представление;
			Если РусскаяЗаглавная Тогда
				ПервыйСимвол = Сред(Символ, 1, 1);
				Символ = СтрЗаменить(Символ, ПервыйСимвол, ВРег(ПервыйСимвол));
			КонецЕсли;
		Иначе
			Соответствие = СписокСоответствийСимовлы.НайтиПоЗначению(КодСимвола);
			
			Если НЕ Соответствие = Неопределено Тогда
				Символ = Соответствие.Представление;
			Иначе
				// Остальные симоволы остаются без изменений 
				Если НЕ Найти(" !@#$%&'""()*+,-./0123456789:;<=>?ABCDEFGIKLMNJOPQRSTUVWXYZHabcdefgiklmnjopqrstuvwxyzh"
					+ Символы.ПС + Символы.Таб + Символы.ВК, Символ) Тогда
					Символ = "?"; // Меняем неизвестный символ на "?"
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		// Результат транслитерации
		РезультирующийТекст = РезультирующийТекст + Символ;
		
	КонецЦикла;
	
	Возврат РезультирующийТекст;
	
КонецФункции // Транслитерация()	

// В зависимости от версии 1С 8.2 или 8.3 выводится Предупреждение
&НаКлиенте
Процедура ПредупреждениеСообщение(ОписаниеОповещенияОЗавершении, ТекстПредупрежденияСообщения, Таймаут = 0, Заголовок = "")
	
	Попытка
		Если Объект.ПараметрыСеансаОбработки.РежимИспользованияМодальности = "Использовать" Тогда
			Предупреждение(ТекстПредупрежденияСообщения, Таймаут, Заголовок);
		Иначе
			Выполнить("ПоказатьПредупреждение(ОписаниеОповещенияОЗавершении, ТекстПредупрежденияСообщения, Таймаут, Заголовок)");
		КонецЕслИ;
	Исключение
		Сообщить(ТекстПредупрежденияСообщения);
	КонецПопытки;
		
КонецПроцедуры

&НаСервере
Функция ОбработкаОбъект()
	
	Возврат РеквизитФормыВЗначение("Объект");
	
КонецФункции

&НаСервере                            
Функция ЭтоКлиентСервер()
	
	Возврат ОбработкаОбъект().ЭтоКлиентСервер();
	
КонецФункции

// Отркывает сайт в зависимости от версии 1С 8.2 или 8.3
&НаКлиенте
Процедура ОткрытьСайт(ИмяСайта)
	
	Попытка
		Если Объект.ПараметрыСеансаОбработки.РежимИспользованияМодальности = "Использовать" Тогда
			ЗапуститьПриложение(ИмяСайта);
		Иначе
			Выполнить("НачатьЗапускПриложения(,ИмяСайта)");
		КонецЕсли;
	Исключение
		ЗапуститьПриложение(ИмяСайта);
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы.
//
//  Параметры
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  КлючДанных                 - ЛюбаяСсылка - на объект информационной базы.
//                               Ссылка на объект информационной базы, к которому это сообщение относится,
//                               или ключ записи.
//  Поле                       - Строка - наименование реквизита формы
//  ПутьКДанным                - Строка - путь к данным (путь к реквизиту формы)
//  Отказ                      - Булево - Выходной параметр
//                               Всегда устанавливается в значение Истина
//
//	Примеры использования:
//
//	1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ПолеВРеквизитеФормыОбъект",
//		"Объект");
//
//	Альтернативный вариант использования в форме объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"Объект.ПолеВРеквизитеФормыОбъект");
//
//	2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ИмяРеквизитаФормы");
//
//	3. Для вывода сообщения связанного с объектом информационной базы
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ОбъектИнформационнойБазы, "Ответственный",,Отказ);
//
// 4. Для вывода сообщения по ссылке на объект информационной базы
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), Ссылка, , , Отказ);
//
// Случаи некорректного использования:
//  1. Передача одновременно параметров КлючДанных и ПутьКДанным
//  2. Передача в параметре КлючДанных значения типа отличного от допустимых
//  3. Установка ссылки без установки поля (и/или пути к данным)
//
Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	ЭтоОбъект = Ложь;
	
#Если НЕ ТонкийКлиент И НЕ ВебКлиент Тогда
	Если КлючДанных <> Неопределено
	   И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = Найти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Реализация функции Вопрос() в 8.3 БЕЗ ИСПОЛЬЗОВАНИЯ РЕЖИМА МОДАЛЬНОСТИ.
Процедура Вопрос83(ТекстВопроса, ТаймаутВопроса, ОбработкаОповещения)
	Перем ПараметрыВопроса, Кнопки;
	
	ПараметрыВопроса = ПараметрыВопросаПользователю();
	ПараметрыВопроса.Таймаут = ТаймаутВопроса;
	
	Кнопки = РежимДиалогаВопрос.ДаНет;
	ПараметрыВопроса.КнопкаПоУмолчанию = КодВозвратаДиалога.Нет;
	ПараметрыВопроса.КнопкаТаймаута = КодВозвратаДиалога.Нет;
	
	ПоказатьВопросПользователю(ОбработкаОповещения, ТекстВопроса, Кнопки, ПараметрыВопроса);

КонецПроцедуры
	
// Возвращает новую структуру дополнительных параметров для процедуры ПоказатьВопросПользователю.
//
// Возвращаемое значение:
//   Структура   - параметры процедуры ПоказатьВопросПользователю:
//     КнопкаПоУмолчанию             - Произвольный       - определяет кнопку по умолчанию по типу кнопки или по связанному с ней значению. 
//     Таймаут                       - Число              - интервал времени в секундах до автоматического закрытия окна вопроса. 
//     КнопкаТаймаута                - Произвольный       - кнопка (по типу кнопки или по связанному с ней значению), 
//                                                          на которой отображается количество секунд, оставшихся до истечения таймаута. 
//     Заголовок                     - Строка             - заголовок вопроса. 
//     ПредлагатьБольшеНеЗадаватьЭтотВопрос - Булево      - если Истина, то в окне вопроса будет доступен одноименный флажок.
//     БольшеНеЗадаватьЭтотВопрос    - Булево             - принимает значение, выбранное пользователем в соответствующем флажке.
//
&НаКлиенте
Функция ПараметрыВопросаПользователю()
	Перем Параметры, Заголовок;
	
	Параметры = Новый Структура;
	Параметры.Вставить("КнопкаПоУмолчанию", Неопределено);
	Параметры.Вставить("Таймаут", 0);
	Параметры.Вставить("КнопкаТаймаута", Неопределено);
	//Попытка
	//	Выполнить("Заголовок = ПолучитьЗаголовокКлиентскогоПриложения()");
	//Исключение
	//	Выполнить("Заголовок = ПолучитьЗаголовокПриложения()");
	//КонецПопытки;
	Заголовок = "";
	Параметры.Вставить("Заголовок", Заголовок);
	Параметры.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", Ложь);
	Параметры.Вставить("БольшеНеЗадаватьЭтотВопрос", Истина);
	Параметры.Вставить("БлокироватьВесьИнтерфейс", Истина);
	Параметры.Вставить("Картинка", Неопределено);
	
	Возврат Параметры;
	
КонецФункции	

// Показать форму вопроса.
//
// Параметры:
//   ОписаниеОповещенияОЗавершении - ОписаниеОповещения - описание процедуры, которая будет вызвана после закрытия окна вопроса
//                                                        со следующими параметрами: 
//                                                          РезультатВопроса - Структура - структура со свойствами:
//                                                            Значение - результат выбора пользователя: значение системного перечисления или значение, 
//                                                              связанное с нажатой кнопкой. В случае закрытия диалога по истечении времени - значение Таймаут.
//                                                            БольшеНеЗадаватьЭтотВопрос - Булево - результат выбора пользователя в одноименном флажке.
//                                                          ДополнительныеПараметры - Структура 
//   ТекстВопроса                  - Строка             - текст задаваемого вопроса. 
//   Кнопки                        - РежимДиалогаВопрос, СписокЗначений - может быть задан список значений, в котором
//                                       Значение - содержит значение, связанное с 
//                                                  кнопкой и возвращаемое при выборе кнопки. В качестве значения может использоваться значение 
//                                                  перечисления КодВозвратаДиалога, а также другие значения, поддерживающее XDTO-сериализацию.
//                                       Представление - задает текст кнопки.
//
//   ДополнительныеПараметры       - Структура          - дополнительные параметры, см. описание к ПараметрыВопросаПользователю.
//
// Возвращаемое значение:
//   Результат выбора пользователя будет передан в метод, описанный параметром ОписаниеОповещенияОЗавершении. 
//
&НаКлиенте
Процедура ПоказатьВопросПользователю(ОбработкаОповещения, ТекстВопроса, Кнопки, 
	ДополнительныеПараметры = Неопределено)
	
	Перем Параметры;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Параметры = ДополнительныеПараметры;
	Иначе	
		Параметры = ПараметрыВопросаПользователю();
	КонецЕсли;
	
	Если ТипЗнч(Кнопки) = Тип("РежимДиалогаВопрос") Тогда
		Если      Кнопки = РежимДиалогаВопрос.ДаНет Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ДаНет";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ДаНетОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ДаНетОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ОК Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ОК";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ОКОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ОКОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ПовторитьОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ПовторитьОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ПрерватьПовторитьПропустить Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ПрерватьПовторитьПропустить";
		КонецЕсли;
	Иначе
		КнопкиПараметр = Кнопки;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.КнопкаПоУмолчанию) = Тип("КодВозвратаДиалога") Тогда
		КнопкаПоУмолчаниюПараметр = КодВозвратаДиалогаВСтроку(Параметры.КнопкаПоУмолчанию);
	Иначе
		КнопкаПоУмолчаниюПараметр = Параметры.КнопкаПоУмолчанию;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.КнопкаТаймаута) = Тип("КодВозвратаДиалога") Тогда
		КнопкаТаймаутаПараметр = КодВозвратаДиалогаВСтроку(Параметры.КнопкаТаймаута);
	Иначе
		КнопкаТаймаутаПараметр = Параметры.КнопкаТаймаута;
	КонецЕсли;
	
	Параметры.Вставить("Кнопки",            КнопкиПараметр);
	Параметры.Вставить("Таймаут",           Параметры.Таймаут);
	Параметры.Вставить("КнопкаПоУмолчанию", КнопкаПоУмолчаниюПараметр);
	Параметры.Вставить("Заголовок",         Параметры.Заголовок);
	Параметры.Вставить("КнопкаТаймаута",    КнопкаТаймаутаПараметр);
	Параметры.Вставить("ТекстСообщения",    ТекстВопроса);
	Параметры.Вставить("Картинка",          Параметры.Картинка);
	Параметры.Вставить("БлокироватьВесьИнтерфейс", Параметры.БлокироватьВесьИнтерфейс);
	Параметры.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", Параметры.ПредлагатьБольшеНеЗадаватьЭтотВопрос);
	
	Выполнить("ОткрытьФорму(Объект.ПараметрыСеансаОбработки.ИмяФормыВопрос, Параметры, , , , , ОбработкаОповещения)");
	
КонецПроцедуры

// Возвращает строковое представление значения типа КодВозвратаДиалога
&НаКлиенте
Функция КодВозвратаДиалогаВСтроку(Значение)
	Перем Результат;
	
	Результат = "КодВозвратаДиалога." + Строка(Значение);
	
	Если Значение = КодВозвратаДиалога.Да Тогда
		Результат = "КодВозвратаДиалога.Да";
	ИначеЕсли Значение = КодВозвратаДиалога.Нет Тогда
		Результат = "КодВозвратаДиалога.Нет";
	ИначеЕсли Значение = КодВозвратаДиалога.ОК Тогда
		Результат = "КодВозвратаДиалога.ОК";
	ИначеЕсли Значение = КодВозвратаДиалога.Отмена Тогда
		Результат = "КодВозвратаДиалога.Отмена";
	ИначеЕсли Значение = КодВозвратаДиалога.Повторить Тогда
		Результат = "КодВозвратаДиалога.Повторить";
	ИначеЕсли Значение = КодВозвратаДиалога.Прервать Тогда
		Результат = "КодВозвратаДиалога.Прервать";
	ИначеЕсли Значение = КодВозвратаДиалога.Пропустить Тогда
		Результат = "КодВозвратаДиалога.Пропустить";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьКодВозвратаДиалога(Ответ)
	Перем ЗначениеОтвета;
	
	Если ТипЗнч(Ответ) = Тип("Структура") Тогда
		ЗначениеОтвета = Ответ.Значение;
	Иначе
		ЗначениеОтвета = Ответ;
	КонецЕсли;
	
	Возврат ЗначениеОтвета;
	
КонецФункции

&НаСервере
Функция ПолучитьСсылкуСервиса(Сервис, Значение)
	
	Возврат ОбработкаОбъект().ПолучитьСсылкуСервиса(Сервис, Значение);
	
КонецФункции

//////////////////////////////////////////////////////////////
// РАБОТА С НАСТРОЙКАМИ

&НаСервере
// Загружает настройки формы. 
Процедура ЗагрузитьНастройкиФормы()
	
    УстановитьПривилегированныйРежим(Истина);
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить(ИмяФормы, "SMS_Настройки");
	УстановитьПривилегированныйРежим(Ложь);
	    
	Если Настройки <> Неопределено Тогда
		
		Попытка	Объект.Логин 				= Настройки.SMS_Логин; Исключение КонецПопытки;
		Попытка	Объект.Пароль 				= Настройки.SMS_Пароль; Исключение КонецПопытки;
		Попытка	Объект.ШаблонТекстаСМС		= Настройки.SMS_Текст; Исключение КонецПопытки;
		Попытка	Объект.Отправитель 			= Настройки.SMS_ИмяОтправителя; Исключение КонецПопытки;
		Попытка	Объект.ТипСМС				= Настройки.SMS_ТипСМС; Исключение КонецПопытки;
		Попытка	Объект.Транслитерация		= Настройки.SMS_Транслитерация; Исключение КонецПопытки;
		Попытка	Объект.Автообновление 		= Настройки.SMS_Автообновление; Исключение  КонецПопытки;
		Попытка	
			Объект.ДатаПоследнейПроверкиОбновления = Настройки.SMS_ДатаПоследнейПроверкиОбновления; 
		Исключение 
			Объект.ДатаПоследнейПроверкиОбновления = Дата(1, 1, 1); 
		КонецПопытки;
		
		Попытка	Объект.НомерКолонкиТелефона = Настройки.SMS_НомерКолонкиТелефона; Исключение КонецПопытки;
		Попытка	Объект.НомерСИменемАдресата = Настройки.SMS_НомерСИменемАдресата; Исключение КонецПопытки;
		Попытка	Объект.НомерПервойСтроки	= Настройки.SMS_НомерПервойСтроки; Исключение КонецПопытки;
		Попытка	Объект.Сервис 				= Настройки.SMS_Сервис; Исключение КонецПопытки;
		
		Попытка	Объект.ИспользоватьПрокси	= Настройки.SMS_ИспользоватьПрокси; Исключение КонецПопытки;
		Попытка	Объект.ПроксиАдрес			= Настройки.SMS_ПроксиАдрес; Исключение КонецПопытки;
		Попытка	Объект.ПроксиЛогин			= Настройки.SMS_ПроксиЛогин; Исключение КонецПопытки;
		Попытка	Объект.ПроксиПароль			= Настройки.SMS_ПроксиПароль; Исключение КонецПопытки;
		Попытка	Объект.ПроксиПорт			= Настройки.SMS_ПроксиПорт; Исключение КонецПопытки;		
		Попытка	Объект.ИспользуемыйПротокол	= Настройки.SMS_ИспользуемыйПротокол; Исключение КонецПопытки;
		Попытка	Объект.Отладка				= Настройки.SMS_Отладка; Исключение КонецПопытки;
		Попытка	
			Объект.РазрешитьОтправкуСтатистики = Настройки.SMS_РазрешитьОтправкуСтатистики; 
		Исключение 
			Объект.РазрешитьОтправкуСтатистики = Истина; 
		КонецПопытки;
		Попытка	Объект.КлючAPI				= Настройки.SMS_КлючAPI; Исключение КонецПопытки;
		Попытка	Объект.Канал				= Настройки.SMS_Канал; Исключение КонецПопытки;
		
	Иначе
		Объект.Автообновление	= Истина;
		Объект.ДатаПоследнейПроверкиОбновления = Дата(1, 1, 1);
		Объект.Сервис = "smsc.ru";
		Объект.РазрешитьОтправкуСтатистики = Истина;
	КонецЕсли;
	
	Если Объект.НомерКолонкиТелефона = 0 Тогда
		Объект.НомерКолонкиТелефона = 2;
	КонецЕсли;
	Если Объект.НомерСИменемАдресата = 0 Тогда
		Объект.НомерСИменемАдресата = 1;
	КонецЕсли;
	Если Объект.НомерПервойСтроки = 0 Тогда
		Объект.НомерПервойСтроки = 1;
	КонецЕсли;
	Если ПустаяСтрока(Объект.Сервис) Тогда
		Объект.Сервис = "sms.ru";
	КонецЕсли;
	Если ПустаяСтрока(Объект.Канал) Тогда
		Объект.Канал = ОбработкаОбъект().ПервыйКаналОтправкиСервиса(Объект.Сервис);
	КонецЕсли;	
	ОбновитьСписокКаналов();
		        
КонецПроцедуры // ЗагрузитьНастройкиФормы()

&НаСервере
// Процедура сохраняет настройки формы.
//
Процедура СохранитьНастройкиФормы(СтруктураНастроек)
	
	УстановитьПривилегированныйРежим(Истина);
	ХранилищеНастроекДанныхФорм.Сохранить(ИмяФормы, "SMS_Настройки", СтруктураНастроек);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // СохранитьНастройкиФормы()

//////////////////////////////////////////////////////////////
// ФОРМУЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Получает задолженность контрагента из таблицы задолженностей
&НаСервере
Функция ПолучитьЗадолженность(Контрагент)
	
	ТЗСуммы = Новый ТаблицаЗначений;
	ТЗСуммы.Колонки.Добавить("Сумма");
	ТЗСуммы.Колонки.Добавить("Валюта");
	
	Для Каждого Стр Из ТЗЗадолженности Цикл
		
		Если Найти(ИмяКонфигурации(), "УправлениеТорговлей") > 0 Тогда
			Если Стр.Контрагент = Контрагент Тогда
				НоваяСтрока		   	= ТЗСуммы.Добавить();
				НоваяСтрока.Сумма  	= Стр.Сумма;
				НоваяСтрока.Валюта	= Стр.Валюта;		
			ИначеЕсли ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				Если Стр.Контрагент = Контрагент.Партнер Тогда
					НоваяСтрока		   	= ТЗСуммы.Добавить();
					НоваяСтрока.Сумма  	= Стр.Сумма;
					НоваяСтрока.Валюта	= Стр.Валюта;
				КонецЕсли;
			ИначеЕсли ТипЗнч(Контрагент) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				Если Стр.Контрагент = Контрагент.Владелец Тогда
					НоваяСтрока		   	= ТЗСуммы.Добавить();
					НоваяСтрока.Сумма  	= Стр.Сумма;
					НоваяСтрока.Валюта	= Стр.Валюта;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли  Найти(ИмяКонфигурации(), "БухгалтерияПредприятия") > 0 Тогда
			Если Стр.Контрагент = Контрагент Тогда
				НоваяСтрока		   	= ТЗСуммы.Добавить();
				НоваяСтрока.Сумма  	= Стр.Сумма;
				НоваяСтрока.Валюта	= Стр.Валюта;		
			ИначеЕсли ТипЗнч(Контрагент) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
				Если Стр.Контрагент = Контрагент.ОбъектВладелец Тогда
					НоваяСтрока		   	= ТЗСуммы.Добавить();
					НоваяСтрока.Сумма  	= Стр.Сумма;
					НоваяСтрока.Валюта	= Стр.Валюта;
				КонецЕсли;
			КонецЕсли;			
		КонецЕсли;
		
	КонецЦикла;
	
	ТЗСуммы.Свернуть("Валюта", "Сумма");
	ТЗСуммы.Сортировать("Валюта");
	
	Результат = "";
	Для Каждого Стр Из ТЗСуммы Цикл
		Если НЕ ПустаяСтрока(Результат) Тогда
			Результат = Результат + ";";
		КонецЕсли;
		Результат = Результат + Формат(Стр.Сумма, "ЧДЦ=2; ЧРД=; ЧРГ=; ЧН=0,00; ЧГ=") + " " + Строка(Стр.Валюта);
	КонецЦикла;
	
	Если ПустаяСтрока(Результат) Тогда
		Результат = "0 руб.";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//////////////////////////////////////////////////////////////
// >> РАБОТА С УТ 11

Процедура ПолучитьОбщуюЗадолженностьУТ()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Сегменты.Партнер КАК Партнер,
		|	ИСТИНА КАК ИспользуетсяОтборПоСегментуПартнеров
		|ПОМЕСТИТЬ ОтборПоСегментуПартнеров
		|{ВЫБРАТЬ
		|	Партнер.*}
		|ИЗ
		|	РегистрСведений.ПартнерыСегмента КАК Сегменты
		|{ГДЕ
		|	Сегменты.Сегмент.* КАК СегментПартнеров,
		|	Сегменты.Партнер.* КАК Партнер}
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сегменты.Партнер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	0 КАК ТипРасчетов,
		|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам,
		|	РегистрАналитикаУчетаПоПартнерам.Организация,
		|	РегистрАналитикаУчетаПоПартнерам.Партнер,
		|	РегистрАналитикаУчетаПоПартнерам.Контрагент,
		|	РасчетыСКлиентами.Валюта КАК ВалютаВзаиморасчетов,
		|	РасчетыСКлиентами.ЗаказКлиента КАК Заказ,
		|	РасчетыСКлиентами.ЗаказКлиента.Соглашение КАК Соглашение,
		|	РасчетыСКлиентами.ЗаказКлиента.Соглашение.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
		|	ВЫБОР
		|		КОГДА РасчетыСКлиентами.ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов
		|			ТОГДА РасчетыСКлиентами.ЗаказКлиента
		|		ИНАЧЕ РасчетыСКлиентами.ЗаказКлиента.Договор
		|	КОНЕЦ КАК Договор,
		|	ВЫБОР
		|		КОГДА РасчетыСКлиентами.Регистратор = НЕОПРЕДЕЛЕНО
		|			ТОГДА NULL
		|		ИНАЧЕ РасчетыСКлиентами.Регистратор
		|	КОНЕЦ КАК Регистратор,
		|	РасчетыСКлиентами.ПериодСекунда КАК ПериодСекунда,
		|	РасчетыСКлиентами.ПериодДень КАК ПериодДень,
		|	РасчетыСКлиентами.ПериодНеделя КАК ПериодНеделя,
		|	РасчетыСКлиентами.ПериодДекада КАК ПериодДекада,
		|	РасчетыСКлиентами.ПериодМесяц КАК ПериодМесяц,
		|	РасчетыСКлиентами.ПериодКвартал КАК ПериодКвартал,
		|	РасчетыСКлиентами.ПериодПолугодие КАК ПериодПолугодие,
		|	РасчетыСКлиентами.ПериодГод КАК ПериодГод,
		|	ВЫБОР
		|		КОГДА РасчетыСКлиентами.СуммаНачальныйОстаток > 0
		|			ТОГДА РасчетыСКлиентами.СуммаНачальныйОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ДолгПартнераНачальныйОстаток,
		|	ВЫБОР
		|		КОГДА РасчетыСКлиентами.СуммаНачальныйОстаток < 0
		|			ТОГДА -РасчетыСКлиентами.СуммаНачальныйОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НашДолгНачальныйОстаток,
		|	РасчетыСКлиентами.СуммаНачальныйОстаток КАК ДолгНачальныйОстаток,
		|	РасчетыСКлиентами.СуммаПриход КАК ДолгУвеличение,
		|	РасчетыСКлиентами.СуммаРасход КАК ДолгУменьшение,
		|	РасчетыСКлиентами.СуммаКонечныйОстаток КАК ДолгКонечныйОстаток,
		|	ВЫБОР
		|		КОГДА РасчетыСКлиентами.СуммаКонечныйОстаток > 0
		|			ТОГДА РасчетыСКлиентами.СуммаКонечныйОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ДолгПартнераКонечныйОстаток,
		|	ВЫБОР
		|		КОГДА РасчетыСКлиентами.СуммаКонечныйОстаток < 0
		|			ТОГДА -РасчетыСКлиентами.СуммаКонечныйОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НашДолгКонечныйОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(, , Авто, , ) КАК РасчетыСКлиентами
		|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
		|		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики}
		|ГДЕ
		|	РегистрАналитикаУчетаПоПартнерам.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|	И &ДанныеПоРасчетам = 1
		|{ГДЕ
		|	(РегистрАналитикаУчетаПоПартнерам.Партнер В
		|			(ВЫБРАТЬ
		|				ОтборПоСегментуПартнеров.Партнер
		|			ИЗ
		|				ОтборПоСегментуПартнеров
		|			ГДЕ
		|				ОтборПоСегментуПартнеров.ИспользуетсяОтборПоСегментуПартнеров = &ИспользуетсяОтборПоСегментуПартнеров)) КАК Поле2}
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам,
		|	РегистрАналитикаУчетаПоПартнерам.Организация,
		|	РегистрАналитикаУчетаПоПартнерам.Партнер,
		|	РегистрАналитикаУчетаПоПартнерам.Контрагент,
		|	РасчетыСКлиентами.Валюта,
		|	РасчетыСКлиентами.ЗаказКлиента,
		|	РасчетыСКлиентами.ЗаказКлиента.Соглашение,
		|	РасчетыСКлиентами.ЗаказКлиента.Соглашение.ГруппаФинансовогоУчета,
		|	ВЫБОР
		|		КОГДА РасчетыСКлиентами.ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов
		|			ТОГДА РасчетыСКлиентами.ЗаказКлиента
		|		ИНАЧЕ РасчетыСКлиентами.ЗаказКлиента.Договор
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РасчетыСКлиентами.Регистратор = НЕОПРЕДЕЛЕНО
		|			ТОГДА NULL
		|		ИНАЧЕ РасчетыСКлиентами.Регистратор
		|	КОНЕЦ,
		|	РасчетыСКлиентами.ПериодСекунда,
		|	РасчетыСКлиентами.ПериодДень,
		|	РасчетыСКлиентами.ПериодНеделя,
		|	РасчетыСКлиентами.ПериодДекада,
		|	РасчетыСКлиентами.ПериодМесяц,
		|	РасчетыСКлиентами.ПериодКвартал,
		|	РасчетыСКлиентами.ПериодПолугодие,
		|	РасчетыСКлиентами.ПериодГод,
		|	ВЫБОР
		|		КОГДА &ДанныеПоРасчетам = 2
		|			ТОГДА ВЫБОР
		|					КОГДА РасчетыСКлиентами.ДолгУпрНачальныйОстаток + РасчетыСКлиентами.ПредоплатаУпрНачальныйОстаток > 0
		|						ТОГДА РасчетыСКлиентами.ДолгУпрНачальныйОстаток + РасчетыСКлиентами.ПредоплатаУпрНачальныйОстаток
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РасчетыСКлиентами.ДолгРеглНачальныйОстаток + РасчетыСКлиентами.ПредоплатаРеглНачальныйОстаток > 0
		|					ТОГДА РасчетыСКлиентами.ДолгРеглНачальныйОстаток + РасчетыСКлиентами.ПредоплатаРеглНачальныйОстаток
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &ДанныеПоРасчетам = 2
		|			ТОГДА ВЫБОР
		|					КОГДА РасчетыСКлиентами.ДолгУпрНачальныйОстаток + РасчетыСКлиентами.ПредоплатаУпрНачальныйОстаток < 0
		|						ТОГДА -(РасчетыСКлиентами.ДолгУпрНачальныйОстаток + РасчетыСКлиентами.ПредоплатаУпрНачальныйОстаток)
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РасчетыСКлиентами.ДолгРеглНачальныйОстаток + РасчетыСКлиентами.ПредоплатаРеглНачальныйОстаток < 0
		|					ТОГДА -(РасчетыСКлиентами.ДолгРеглНачальныйОстаток + РасчетыСКлиентами.ПредоплатаРеглНачальныйОстаток)
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &ДанныеПоРасчетам = 2
		|			ТОГДА РасчетыСКлиентами.ДолгУпрНачальныйОстаток + РасчетыСКлиентами.ПредоплатаУпрНачальныйОстаток
		|		ИНАЧЕ РасчетыСКлиентами.ДолгРеглНачальныйОстаток + РасчетыСКлиентами.ПредоплатаРеглНачальныйОстаток
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &ДанныеПоРасчетам = 2
		|			ТОГДА РасчетыСКлиентами.ДолгУпрПриход + РасчетыСКлиентами.ПредоплатаУпрПриход
		|		ИНАЧЕ РасчетыСКлиентами.ДолгРеглПриход + РасчетыСКлиентами.ПредоплатаРеглПриход
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &ДанныеПоРасчетам = 2
		|			ТОГДА РасчетыСКлиентами.ДолгУпрРасход + РасчетыСКлиентами.ПредоплатаУпрРасход
		|		ИНАЧЕ РасчетыСКлиентами.ДолгРеглРасход + РасчетыСКлиентами.ПредоплатаРеглРасход
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &ДанныеПоРасчетам = 2
		|			ТОГДА РасчетыСКлиентами.ДолгУпрКонечныйОстаток + РасчетыСКлиентами.ПредоплатаУпрКонечныйОстаток
		|		ИНАЧЕ РасчетыСКлиентами.ДолгРеглКонечныйОстаток + РасчетыСКлиентами.ПредоплатаРеглКонечныйОстаток
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &ДанныеПоРасчетам = 2
		|			ТОГДА ВЫБОР
		|					КОГДА РасчетыСКлиентами.ДолгУпрКонечныйОстаток + РасчетыСКлиентами.ПредоплатаУпрКонечныйОстаток > 0
		|						ТОГДА РасчетыСКлиентами.ДолгУпрКонечныйОстаток + РасчетыСКлиентами.ПредоплатаУпрКонечныйОстаток
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РасчетыСКлиентами.ДолгРеглКонечныйОстаток + РасчетыСКлиентами.ПредоплатаРеглКонечныйОстаток > 0
		|					ТОГДА РасчетыСКлиентами.ДолгРеглКонечныйОстаток + РасчетыСКлиентами.ПредоплатаРеглКонечныйОстаток
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &ДанныеПоРасчетам = 2
		|			ТОГДА ВЫБОР
		|					КОГДА РасчетыСКлиентами.ДолгУпрКонечныйОстаток + РасчетыСКлиентами.ПредоплатаУпрКонечныйОстаток < 0
		|						ТОГДА -(РасчетыСКлиентами.ДолгУпрКонечныйОстаток + РасчетыСКлиентами.ПредоплатаУпрКонечныйОстаток)
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РасчетыСКлиентами.ДолгРеглКонечныйОстаток + РасчетыСКлиентами.ПредоплатаРеглКонечныйОстаток < 0
		|					ТОГДА -(РасчетыСКлиентами.ДолгРеглКонечныйОстаток + РасчетыСКлиентами.ПредоплатаРеглКонечныйОстаток)
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоДокументам.ОстаткиИОбороты(, , Авто, , ) КАК РасчетыСКлиентами
		|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
		|		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики}
		|ГДЕ
		|	РегистрАналитикаУчетаПоПартнерам.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|	И &ДанныеПоРасчетам В (2, 3)
		|{ГДЕ
		|	(РегистрАналитикаУчетаПоПартнерам.Партнер В
		|			(ВЫБРАТЬ
		|				ОтборПоСегментуПартнеров.Партнер
		|			ИЗ
		|				ОтборПоСегментуПартнеров
		|			ГДЕ
		|				ОтборПоСегментуПартнеров.ИспользуетсяОтборПоСегментуПартнеров = &ИспользуетсяОтборПоСегментуПартнеров)) КАК Поле2}"
	);
	
	Запрос.УстановитьПараметр("ДанныеПоРасчетам", 1);
	
	Таблица = ДанныеФормыВЗначение(ТЗЗадолженности, Тип("ТаблицаЗначений"));
	
	Таблица.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Строки				= Таблица.Добавить();
		Строки.Контрагент	= Выборка.Партнер;
		Строки.Валюта		= Выборка.ВалютаВзаиморасчетов;
		Строки.Сумма 		= Выборка.ДолгКонечныйОстаток;
		
	КонецЦикла;
	
	Таблица.Свернуть("Контрагент,Валюта", "Сумма");
	Таблица.Сортировать("Контрагент,Валюта");
	ЗначениеВДанныеФормы(Таблица, ТЗЗадолженности);
		
КонецПроцедуры

// << УТ 11

//////////////////////////////////////////////////////////////
// >> РАБОТА С РОЗНИЦА

&НаСервере
Функция БонусыРозница(Контрагент)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(БонусныеБаллыОстатки.НачисленоОстаток, 0) КАК ОстатокБаллов
		|ИЗ
		|	РегистрНакопления.БонусныеБаллы.Остатки КАК БонусныеБаллыОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		|		ПО БонусныеБаллыОстатки.ДисконтнаяКарта = ИнформационныеКарты.Ссылка
		|ГДЕ
		|	ИнформационныеКарты.ВладелецКарты = &Контрагент";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ОстатокБаллов;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции
	 
// << РОЗНИЦА

//////////////////////////////////////////////////////////////
// >> РАБОТА С БП 3.0

Процедура ПолучитьОбщуюЗадолженностьБП()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СчетаКонтрагентов.Ссылка КАК Счет
		|ПОМЕСТИТЬ СчетаКД
		|ИЗ
		|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК СчетаКонтрагентов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ХозрасчетныйВидыСубконто.Ссылка КАК Ссылка
		|		ИЗ
		|			ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|		ГДЕ
		|			ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)) КАК СчетаДоговоров
		|		ПО СчетаКонтрагентов.Ссылка = СчетаДоговоров.Ссылка
		|ГДЕ
		|	СчетаКонтрагентов.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
		|	И НЕ СчетаКонтрагентов.Ссылка.Забалансовый
		|	И НЕ СчетаКонтрагентов.Ссылка В ИЕРАРХИИ (&ИсключенныеСчета)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты) КАК Субконто1,
		|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.ДоговорыКонтрагентов) КАК Субконто2,
		|	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
		|	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт,
		|	ХозрасчетныйОбороты.Организация КАК Организация,
		|	ХозрасчетныйОбороты.Подразделение КАК Подразделение,
		|	ХозрасчетныйОбороты.КорСубконто1 КАК КорСубконто1,
		|	ХозрасчетныйОбороты.КорСубконто2 КАК КорСубконто2,
		|	ХозрасчетныйОбороты.Счет
		|ПОМЕСТИТЬ Обороты
		|{ВЫБРАТЬ
		|	Субконто1.* КАК Контрагент,
		|	Субконто2.* КАК Договор,
		|	Организация.*,
		|	Подразделение.*}
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			{(&НачалоПериода)},
		|			{(&КонецПериода)},
		|			,
		|			Счет В
		|				(ВЫБРАТЬ
		|					СчетаКД.Счет
		|				ИЗ
		|					СчетаКД КАК СчетаКД),
		|			&ВидыСубконтоКД,
		|			ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку)) {(Подразделение).*, (Организация).*, (Субконто1).* КАК Контрагент, (Субконто2).* КАК Договор},
		|			,
		|			) КАК ХозрасчетныйОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Субконто1,
		|	Субконто2,
		|	КорСубконто1,
		|	КорСубконто2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Обороты.Субконто1 КАК Субконто1,
		|	Обороты.Субконто2 КАК Субконто2,
		|	Обороты.СуммаОборотДт,
		|	Обороты.СуммаОборотКт,
		|	0 КАК Поле1,
		|	0 КАК Поле2,
		|	0 КАК Поле3,
		|	0 КАК Поле4,
		|	Обороты.Организация КАК Организация,
		|	Обороты.Подразделение КАК Подразделение,
		|	Обороты.Счет КАК Счет
		|ПОМЕСТИТЬ ОборотыБезВнутреннихОборотов
		|ИЗ
		|	Обороты КАК Обороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Обороты.Субконто1,
		|	Обороты.Субконто2,
		|	-Обороты.СуммаОборотДт,
		|	-Обороты.СуммаОборотКт,
		|	0,
		|	0,
		|	0,
		|	0,
		|	Обороты.Организация,
		|	Обороты.Подразделение,
		|	Обороты.Счет
		|ИЗ
		|	Обороты КАК Обороты
		|ГДЕ
		|	Обороты.Субконто1 = Обороты.КорСубконто1
		|	И Обороты.Субконто2 = Обороты.КорСубконто2
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет,
		|	Подразделение,
		|	Организация,
		|	Субконто1,
		|	Субконто2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫРАЗИТЬ(НачальныеОстатки.Субконто1 КАК Справочник.Контрагенты) КАК Контрагент,
		|	ВЫРАЗИТЬ(НачальныеОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов) КАК Договор,
		|	0 КАК УвеличениеДолга,
		|	0 КАК ПогашениеДолга,
		|	НачальныеОстатки.СуммаРазвернутыйОстатокДт КАК ДолгНаНачало,
		|	НачальныеОстатки.СуммаРазвернутыйОстатокКт КАК АвансНаНачало,
		|	0 КАК ДолгНаКонец,
		|	0 КАК АвансНаКонец,
		|	НачальныеОстатки.Организация КАК Организация,
		|	НачальныеОстатки.Подразделение КАК Подразделение,
		|	НачальныеОстатки.Счет КАК Счет
		|{ВЫБРАТЬ
		|	Контрагент.*,
		|	Договор.*,
		|	УвеличениеДолга,
		|	ПогашениеДолга,
		|	ДолгНаНачало,
		|	АвансНаНачало,
		|	ДолгНаКонец,
		|	АвансНаКонец,
		|	Организация.*,
		|	Подразделение.*,
		|	Счет}
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			{(&НачалоПериодаОстатки)},
		|			Счет В
		|				(ВЫБРАТЬ
		|					СчетаКД.Счет
		|				ИЗ
		|					СчетаКД КАК СчетаКД),
		|			&ВидыСубконтоКД,
		|			ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку)) {(Субконто1).* КАК Контрагент, (Субконто2).* КАК Договор, (Организация).*, (Подразделение).*}) КАК НачальныеОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(КонечныеОстатки.Субконто1 КАК Справочник.Контрагенты),
		|	ВЫРАЗИТЬ(КонечныеОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов),
		|	0,
		|	0,
		|	0,
		|	0,
		|	КонечныеОстатки.СуммаРазвернутыйОстатокДт,
		|	КонечныеОстатки.СуммаРазвернутыйОстатокКт,
		|	КонечныеОстатки.Организация,
		|	КонечныеОстатки.Подразделение,
		|	КонечныеОстатки.Счет
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			{(&КонецПериодаОстатки)},
		|			Счет В
		|				(ВЫБРАТЬ
		|					СчетаКД.Счет
		|				ИЗ
		|					СчетаКД КАК СчетаКД),
		|			&ВидыСубконтоКД,
		|			ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку)) {(Подразделение).*, (Организация).*, (Субконто1).* КАК Контрагент, (Субконто2).* КАК Договор}) КАК КонечныеОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОборотыБезВнутреннихОборотов.Субконто1,
		|	ОборотыБезВнутреннихОборотов.Субконто2,
		|	ОборотыБезВнутреннихОборотов.СуммаОборотДт,
		|	ОборотыБезВнутреннихОборотов.СуммаОборотКт,
		|	0,
		|	0,
		|	0,
		|	0,
		|	ОборотыБезВнутреннихОборотов.Организация,
		|	ОборотыБезВнутреннихОборотов.Подразделение,
		|	ОборотыБезВнутреннихОборотов.Счет
		|ИЗ
		|	ОборотыБезВнутреннихОборотов КАК ОборотыБезВнутреннихОборотов";
	
	Запрос.УстановитьПараметр("ИсключенныеСчета", Новый Массив);
	Попытка
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		СписокЗначений.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
		Запрос.УстановитьПараметр("ВидыСубконтоКД", СписокЗначений);
	Исключение
	КонецПопытки;
	
	Таблица = ДанныеФормыВЗначение(ТЗЗадолженности, Тип("ТаблицаЗначений"));
	
	Таблица.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Строки				= Таблица.Добавить();
		Строки.Контрагент	= Выборка.Контрагент;
		Строки.Валюта		= "руб.";
		Строки.Сумма 		= Выборка.ДолгНаКонец;
		
	КонецЦикла;
	
	Таблица.Свернуть("Контрагент,Валюта", "Сумма");
	Таблица.Сортировать("Контрагент,Валюта");
	ЗначениеВДанныеФормы(Таблица, ТЗЗадолженности);
		
КонецПроцедуры

// << БП 3.0

//////////////////////////////////////////////////////////////
// ОТПРАВКА СОБЫТИЙ СТАТИСТИКИ

&НаСервере
Функция ВычислитьНаСервере(Знач Стр)
	
	Возврат Вычислить(Стр);
	
КонецФункции

&НаКлиенте
Процедура GA_ЗаполнитьПараметры()
	
	СистемнаяИнформация 			= Новый СистемнаяИнформация();
	Объект.ВерсияОС 				= СистемнаяИнформация.ВерсияОС;
	Объект.ВерсияПлатформы 			= СистемнаяИнформация.ВерсияПриложения;
	Объект.НаименованиеКонфигурации	= ВычислитьНаСервере("?(ПустаяСтрока(Метаданные.Синоним), Метаданные.Имя, Метаданные.Синоним)");
	Объект.ВерсияКонфигурации		= ВычислитьНаСервере("Метаданные.Версия");
	Объект.ИдентификаторПриложения	= "UA-123616100-1";                        
	Объект.ИдентификаторСеанса		= ВычислитьХешСтрокиПоАлгоритмуMD5НаСервере(Объект.Логин);
	
КонецПроцедуры

&НаСервере
Функция ВычислитьХешСтрокиПоАлгоритмуMD5НаСервере(Знач Стр)
	
	Возврат ОбработкаОбъект().ВычислитьХешСтрокиПоАлгоритмуMD5(Стр);
	
КонецФункции

&НаКлиенте
Функция GA_Сеанс(сСеансИнфо, мДанные = Неопределено) Экспорт
	Перем стДанные;
	
	Если ТипЗнч(сСеансИнфо) <> Тип("Строка") ИЛИ ПустаяСтрока(сСеансИнфо) Тогда
		Возврат мДанные;
	КонецЕсли;
	
	стДанные = Новый Структура();
	GA_ОбязательныеПараметры(стДанные);
	
	стДанные.Вставить("t", "event");
	стДанные.Вставить("sc", сСеансИнфо);
	стДанные.Вставить("ec", "Сервисное событие");
	стДанные.Вставить("ea", "Информация о сеансе");
	
	Если ТипЗнч(мДанные) <> Тип("Массив") Тогда
		мДанные = Новый Массив();
	КонецЕсли;
	мДанные.Добавить(стДанные);
	
	Возврат мДанные;
КонецФункции

&НаКлиенте
Функция GA_Форма_Экран(сФормаНаименование, мДанные = Неопределено) Экспорт
	
	Перем стДанные;
	
	Если ТипЗнч(сФормаНаименование) <> Тип("Строка") ИЛИ ПустаяСтрока(сФормаНаименование) Тогда
		Возврат мДанные;
	КонецЕсли;
	
	стДанные = Новый Структура();
	GA_ОбязательныеПараметры(стДанные);
	
	стДанные.Вставить("t", "screenview");
	стДанные.Вставить("cd", Лев(СокрЛП(сФормаНаименование),1000));
	
	Если ТипЗнч(мДанные) <> Тип("Массив") Тогда
		мДанные = Новый Массив();
	КонецЕсли;
	мДанные.Добавить(стДанные);
	
	Возврат мДанные;	
	
КонецФункции

&НаКлиенте
Функция GA_Ошибка(сОшибкаОписание, Знач бОшибкаФатальная, мДанные = Неопределено) Экспорт
	
	Перем стДанные;
	
	Если ТипЗнч(сОшибкаОписание) <> Тип("Строка") ИЛИ ПустаяСтрока(сОшибкаОписание) Тогда
		Возврат мДанные;
	КонецЕсли;
	Если ТипЗнч(бОшибкаФатальная) <> Тип("Булево") Тогда
		бОшибкаФатальная = Ложь;
	КонецЕсли;
	
	стДанные = Новый Структура();
	GA_ОбязательныеПараметры(стДанные);
	
	стДанные.Вставить("t", "exception");
	стДанные.Вставить("exd", Лев(СокрЛП(сОшибкаОписание),70));
	стДанные.Вставить("exf", ?(бОшибкаФатальная,"1", "0"));
	
	Если ТипЗнч(мДанные) <> Тип("Массив") Тогда
		мДанные = Новый Массив();
	КонецЕсли;
	мДанные.Добавить(стДанные);
	
	Возврат мДанные;
	
КонецФункции

&НаКлиенте
Процедура GA_ОбязательныеПараметры(стДанные)
	
	Если ТипЗнч(стДанные) <> Тип("Структура") Тогда
		стДанные = Новый Структура();
	КонецЕсли;
	
	стДанные.Вставить("v",   "1");
	стДанные.Вставить("tid", Объект.ИдентификаторПриложения);
	стДанные.Вставить("cid", Объект.ИдентификаторСеанса);
	стДанные.Вставить("uid", Объект.ИдентификаторСеанса);
	
	стДанные.Вставить("an",  "Мульти рассылка SMS");
	стДанные.Вставить("av",  ВерсияОбработки());
	стДанные.Вставить("cd1", Объект.ВерсияПлатформы);
	стДанные.Вставить("cd2", Объект.ВерсияОС);
	стДанные.Вставить("cd3", Объект.НаименованиеКонфигурации);
	стДанные.Вставить("cd4", Объект.ВерсияКонфигурации);
	стДанные.Вставить("cd5", Объект.Сервис);
	
КонецПроцедуры

&НаКлиенте
Функция GA_НачатьРаботу() Экспорт
	
	Перем бВыполненоБезОшибок, сТекстОшибки;
	
	бВыполненоБезОшибок = Ложь;
	
	м_сСобытиеЖР = "Отправка статистики";
	
	Если ПустаяСтрока(Объект.ИдентификаторПриложения) Тогда
		сТекстОшибки = "Не установлен идентификатор приложения. Начало работы с GA невозможно.
		|  Функция: GA_НачатьРаботу";
		ЗаписьЖурналаРегистрацииНаСервере(м_сСобытиеЖР,"УровеньЖурналаРегистрации.Ошибка",,,сТекстОшибки);
		Возврат бВыполненоБезОшибок;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.ИдентификаторСеанса) Тогда
		сТекстОшибки = "Не установлен идентификатор клиента. Начало работы с GA невозможно.
		|  Функция: GA_НачатьРаботу";
		ЗаписьЖурналаРегистрацииНаСервере(м_сСобытиеЖР,"УровеньЖурналаРегистрации.Ошибка",,,сТекстОшибки);
		Возврат бВыполненоБезОшибок;
	КонецЕсли;
	
	Если НЕ УстановитьHTTPСоединение() Тогда
		сТекстОшибки = "Не установлено HTTP соединение. Начало работы с GA невозможно.
		|  Функция: GA_НачатьРаботу";
		ЗаписьЖурналаРегистрацииНаСервере(м_сСобытиеЖР,"УровеньЖурналаРегистрации.Ошибка",,,сТекстОшибки);
		Возврат бВыполненоБезОшибок;
	КонецЕсли; 
	
	бВыполненоБезОшибок = Истина;
	Возврат бВыполненоБезОшибок;
КонецФункции

&НаКлиенте
Процедура GA_ЗакончитьРаботу() Экспорт
	
	м_HTTPСоединение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Функция GA_Событие(сСобытиеКатегория, сСобытиеНаименование, Знач сЭлемент=Неопределено, Знач чКоличество=Неопределено, 
	мДанные=Неопределено) Экспорт
	
	Перем стДанные;
	
	Если ТипЗнч(сСобытиеКатегория) <> Тип("Строка") ИЛИ ПустаяСтрока(сСобытиеКатегория) Тогда
		Возврат мДанные;
	КонецЕсли;
	Если ТипЗнч(сСобытиеНаименование) <> Тип("Строка") ИЛИ ПустаяСтрока(сСобытиеНаименование) Тогда
		Возврат мДанные;
	КонецЕсли;
	Если ТипЗнч(сЭлемент) <> Тип("Строка") ИЛИ ПустаяСтрока(сСобытиеНаименование) Тогда
		сЭлемент = Неопределено;
	КонецЕсли;
	Если ТипЗнч(чКоличество) <> Тип("Число") Тогда
		чКоличество = Неопределено;
	КонецЕсли;
	
	стДанные = Новый Структура();
	GA_ОбязательныеПараметры(стДанные);
	
	стДанные.Вставить("t", "event");
	стДанные.Вставить("ec", Лев(СокрЛП(сСобытиеКатегория),70));
	стДанные.Вставить("ea", Лев(СокрЛП(сСобытиеНаименование),250));
	Если сЭлемент <> Неопределено Тогда
		стДанные.Вставить("el", Лев(СокрЛП(сЭлемент),250));
	КонецЕсли;
	Если чКоличество <> Неопределено Тогда
		стДанные.Вставить("ev", Лев(Строка(чКоличество),20));
	КонецЕсли;
	
	Если ТипЗнч(мДанные) <> Тип("Массив") Тогда
		мДанные = Новый Массив();
	КонецЕсли;
	мДанные.Добавить(стДанные);
	
	Возврат мДанные;
	
КонецФункции

&НаКлиенте
Процедура GA_ОтправитьСведения(мДанные) Экспорт
	
	Перем сТекстОшибки, сАдресРесурса, HTTPЗапрос, HTTPОтвет, сТелоЗапроса; 
	Перем ПереносСтроки, стДанные, индекс;
	
	м_сСобытиеЖР = "Отправка статистики";
	
	Если НЕ Объект.РазрешитьОтправкуСтатистики Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Объект.ИдентификаторПриложения) <> Тип("Строка") ИЛИ ПустаяСтрока(Объект.ИдентификаторПриложения) Тогда
		сТекстОшибки = "Не установлен обязательный параметр ""Идентификатор приложения""
			|  Функция: ОтправитьСведенияВGA";
		ЗаписьЖурналаРегистрацииНаСервере(м_сСобытиеЖР, "УровеньЖурналаРегистрации.Ошибка",,,сТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(мДанные) <> Тип("Массив") ИЛИ мДанные.Количество() = 0 Тогда
		сТекстОшибки = "Не верный формат данных для отправки. Нужен массив структур.
		|  Функция: ОтправитьСведенияВGA";
		ЗаписьЖурналаРегистрацииНаСервере(м_сСобытиеЖР, "УровеньЖурналаРегистрации.Ошибка",,,сТекстОшибки);
		Возврат;		
	КонецЕсли;
	
	Если ТипЗнч(м_HTTPСоединение) <> Тип("HTTPСоединение") Тогда
		сТекстОшибки = "Не установлено соединение с GA
		|  Функция: ОтправитьСведенияВGA";
		ЗаписьЖурналаРегистрацииНаСервере(м_сСобытиеЖР, "УровеньЖурналаРегистрации.Ошибка",,,сТекстОшибки);
		Возврат;		
	КонецЕсли;
	
	HTTPЗапрос = Новый HTTPЗапрос();
	Если мДанные.Количество() = 1 Тогда
		сАдресРесурса = ?(Объект.Отладка, "/debug/collect", "/collect");
		ПереносСтроки = "";
	Иначе
		сАдресРесурса = ?(Объект.Отладка, "/debug/batch", "/batch");
		ПереносСтроки = Символы.ПС;
	КонецЕсли;
	HTTPЗапрос.АдресРесурса = сАдресРесурса;
	
	сТелоЗапроса = "";
	Для индекс = 0 По мДанные.Количество() - 1 Цикл
		стДанные = мДанные[индекс];
		сТелоЗапроса = сТелоЗапроса + ?(индекс = 0,"",ПереносСтроки) + СтруктуруВСтрокуСРазделителем(стДанные);
	КонецЦикла;
	
	Если ПустаяСтрока(сТелоЗапроса) Тогда
		сТекстОшибки = "Не сформировано тело запроса. Пустая строка ""сТелоЗапроса""
		|  Функция: ОтправитьСведенияВGA";
		ЗаписьЖурналаРегистрацииНаСервере(м_сСобытиеЖР, "УровеньЖурналаРегистрации.Ошибка",,,сТекстОшибки);
		Возврат;		
	КонецЕсли;
	
	Попытка
		HTTPЗапрос.УстановитьТелоИзСтроки(КодироватьСтрокуURL(сТелоЗапроса));
		HTTPОтвет = м_HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		Если Объект.Отладка Тогда
			сТекстОшибки = 
				"___ОТЛАДОЧНАЯ ИНФОРМАЦИЯ___
				|  Режим отладки включен
				|  Адрес ресурса: " + сАдресРесурса + " 
				|  Тело запроса:  " + сТелоЗапроса + "
				|  Код ответа:    " + Строка(HTTPОтвет.КодСостояния) + "
				|  Тело ответа:   " + HTTPОтвет.ПолучитьТелоКакСтроку();			
			ЗаписьЖурналаРегистрацииНаСервере(м_сСобытиеЖР, "УровеньЖурналаРегистрации.Информация",,,сТекстОшибки);
		КонецЕсли;		
	Исключение
		сТекстОшибки = 
			"Ошибка при отправке данных на на сервер GA.
			|  Функция: ОтправитьСведенияВGA
			|  Содержимое: " + сТелоЗапроса + "  
			|  Описание ошибки: " + ОписаниеОшибки();
		ЗаписьЖурналаРегистрацииНаСервере(м_сСобытиеЖР, "УровеньЖурналаРегистрации.Ошибка",,,сТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция УстановитьHTTPСоединение()
	Перем бВыполненоБезОшибок, сТекстОшибки, ТипСоединения;
	
	бВыполненоБезОшибок = Истина;
	
	м_сСобытиеЖР = "Отправка статистики";
	
	Если ТипЗнч(м_HTTPСоединение)=Тип("HTTPСоединение") Тогда
		Возврат бВыполненоБезОшибок;
	КонецЕсли;
	
	Попытка
		Выполнить(
			"ТипСоединения = Новый ЗащищенноеСоединениеOpenSSL(Неопределено,Неопределено);
			|м_HTTPСоединение = Новый HTTPСоединение(""www.google-analytics.com"",,,,,,ТипСоединения);"
		);
		Возврат бВыполненоБезОшибок;
	Исключение			
	КонецПопытки;
	
	Попытка
		м_HTTPСоединение = Новый HTTPСоединение("www.google-analytics.com");
		Возврат бВыполненоБезОшибок;
	Исключение			
		сТекстОшибки = "Не удалось установить HTTP соединение с www.google-analytics.com
			|  Функция: УстановитьСоединение";
		ЗаписьЖурналаРегистрацииНаСервере(м_сСобытиеЖР, "УровеньЖурналаРегистрации.Предупреждение",,,сТекстОшибки);
		бВыполненоБезОшибок = Ложь;
	КонецПопытки;
	
	Возврат бВыполненоБезОшибок;
	
КонецФункции

&НаСервере
Функция КодироватьСтрокуURL(сСтрока)
	Попытка
		Возврат Вычислить("КодироватьСтроку(сСтрока, СпособКодированияСтроки.URLВКодировкеURL)");
	Исключение
	КонецПопытки;
	
	Попытка
		Возврат Вычислить("URLEncode(сСтрока)");
	Исключение
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция СтруктуруВСтрокуСРазделителем(стДанные)
	Перем сРезультат, элемент, бПервыйЭлемент;
	Перем РАЗДЕЛИТЕЛЬ;
	
	// КОНСТАНТЫ
	РАЗДЕЛИТЕЛЬ = "&";
	
	Если ТипЗнч(стДанные) <> Тип("Структура") ИЛИ стДанные.Количество() = 0 Тогда
		Возврат сРезультат;
	КонецЕсли;
	
	сРезультат = "";
	бПервыйЭлемент = Истина;
	Для каждого элемент Из стДанные Цикл
		сРезультат = сРезультат + ?(бПервыйЭлемент, "", РАЗДЕЛИТЕЛЬ) + элемент.Ключ + "=" + элемент.Значение;
		бПервыйЭлемент = Ложь;
	КонецЦикла;
	
	Возврат сРезультат;
КонецФункции

&НаСервере
Процедура ЗаписьЖурналаРегистрацииНаСервере(ИмяСобытия, Уровень, ОбъектМетаданных = Неопределено, Данные = Неопределено, 
	Комментарий = "", РежимТранзакции = Неопределено)
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, Вычислить(Уровень), ОбъектМетаданных, Данные, Комментарий, РежимТранзакции);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////
// СОБЫТИЯ СЕРВЕРА

&НаСервере
Функция ПолучитьТелефоныПоЭлементу(ЭлементСправочника)
	
	Если НЕ ЗначениеЗаполнено(ЭлементСправочника) ИЛИ ТипЗнч(ЭлементСправочника) = Тип("Строка") Тогда
		Возврат "";
	КонецЕсли;
	
	// Добавляем первый попавшийся контакт
	Элемент = "";
	Результат = "";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		Элемент = ЭлементСправочника.Метаданные().Имя;		
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Спр.Представление КАК Телефон
			|ИЗ
			|	Справочник." + Элемент + ".КонтактнаяИнформация КАК Спр
			|ГДЕ Спр.Ссылка = &ЭлементСправочника
			|	И Спр.НомерТелефона <> """"";
		
		Запрос.УстановитьПараметр("ЭлементСправочника", ЭлементСправочника);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СЗ = ОбработкаОбъект().ПолучитьСписокПривденныхНомеров(Выборка.Телефон);
			Если СЗ.Количество() > 0 Тогда
				Результат = СЗ.Получить(0).Значение;
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		Возврат Результат;
	КонецПопытки;
			
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьБалансНаСервре()
	
	БалансЧисло = 0;
	ЕстьОшибка	= Ложь;
	
	Если Объект.Сервис = "sms4b.ru" Тогда
		
		ОбработкаОбъект()._SMS4BRU_Баланс(Баланс, ЕстьОшибка);
		
	ИначеЕсли Объект.Сервис = "smsc.ru" Тогда
		
		ОбработкаОбъект()._SMSCRU_Баланс(Баланс, ЕстьОшибка);
		
	ИначеЕсли Объект.Сервис = "sms.ru" Тогда
		
		ОбработкаОбъект()._SMSRU_Баланс(Баланс, ЕстьОшибка);
						
	ИначеЕсли Объект.Сервис = "p1sms.ru" Тогда
		
		ОбработкаОбъект()._P1SMSRU_Баланс(Баланс, ЕстьОшибка);
		
	ИначеЕсли Объект.Сервис = "smsgorod.ru" Тогда
		
		ОбработкаОбъект()._SMSGORODRU_Баланс(Баланс, ЕстьОшибка);
		
	ИначеЕсли Объект.Сервис = "terasms.ru" Тогда
		
		ОбработкаОбъект()._TERASMSRU_Баланс(Баланс, ЕстьОшибка);
		
	ИначеЕсли Объект.Сервис = "sms-prosto.ru" Тогда
		
		ОбработкаОбъект()._PROSTOSMS_Баланс(Баланс, ЕстьОшибка)
		
	КонецЕсли;
	
	Если ЕстьОшибка Тогда
		Элементы.Баланс.ЦветТекста = WebЦвета.Красный;
	Иначе
		Элементы.Баланс.ЦветТекста = Новый Цвет(51, 102, 255);
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиПоЗапросу(Элемент, ТекстЗапроса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(ТекстЗапроса);

	Запрос.УстановитьПараметр("ТипЗначенияОбъекта", Метаданные.Справочники[Элемент].Синоним);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Контрагент = Выборка.Контрагент;
		Телефоны = СокрЛП(Выборка.Телефон);
				
		Если НЕ ПустаяСтрока(Телефоны) Тогда
			
			СЗ = ОбработкаОбъект().ПолучитьСписокПривденныхНомеров(Телефоны);
			
			Для Индекс = 0 По СЗ.Количество() - 1 Цикл
				Если СтрДлина(СЗ.Получить(Индекс)) = 11 Тогда // Вид 89531168040
					НоваяСтрока = Объект.ТЗ.Добавить();
					НоваяСтрока.Флаг		= Истина;
					НоваяСтрока.ТипЗначенияОбъекта = Выборка.ТипЗначенияОбъекта;
					НоваяСтрока.Контрагент	= Контрагент;
					НоваяСтрока.Телефон		= СЗ.Получить(Индекс);
					НоваяСтрока.Статус		= "Не отправлено";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура Заполнить(МассивСправочников)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Объект.ТЗ.Очистить();
	
	Для Каждого Элемент Из МассивСправочников Цикл
		
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ИСТИНА КАК Флаг,
			|	Спр.Ссылка КАК Контрагент,
			|	&ТипЗначенияОбъекта КАК ТипЗначенияОбъекта,
			|	Спр.Представление КАК Телефон
			|ИЗ
			|	Справочник." + Элемент + ".КонтактнаяИнформация КАК Спр
			|ГДЕ
			|	Спр.НомерТелефона <> """"";
		
		ЗаполнитьСтрокиПоЗапросу(Элемент, ТекстЗапроса);
		
	КонецЦикла;
	
	Объект.ТЗ.Сортировать("Контрагент");
	УдалитьДублиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоТаблицеСсылок(ТипЗначения, АдресТаблицы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Объект.ТЗ.Очистить();
	
	Таблица = ПолучитьИзВременногоХранилища(АдресТаблицы);
		
	МассивСправочников = Новый Массив();
	МассивСправочников.Добавить(ТипЗначения);
	Заполнить(МассивСправочников);
			
	Индекс = Объект.ТЗ.Количество() - 1;
	Пока Индекс >= 0 Цикл
		
		Найдено = Ложь;
		Для Каждого Строка Из Таблица Цикл			
			Если Строка.Ссылка = Объект.ТЗ[Индекс].Контрагент Тогда
				Найдено = Истина;
			КонецЕсли;		
		КонецЦикла;
		
		Если НЕ Найдено Тогда
			Объект.ТЗ.Удалить(Индекс);
		КонецЕсли;
		
		Индекс = Индекс - 1;
		
	КонецЦикла;
	
	Объект.ТЗ.Сортировать("Контрагент");
	УдалитьДублиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоСотрудникам(Очищать = Истина)
	
	Если Очищать Тогда
		Объект.ТЗ.Очистить();
	КонецЕсли;
		
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ИСТИНА КАК Флаг,
		|	Сотрудники.Ссылка КАК Контрагент,
		|	&ТипЗначенияОбъекта КАК ТипЗначенияОбъекта,
		|	Спр.Представление КАК Телефон
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК Спр
		|		ПО Сотрудники.ФизическоеЛицо = Спр.Ссылка
		|ГДЕ
		|	Спр.НомерТелефона <> """"";
		
	ЗаполнитьСтрокиПоЗапросу("Сотрудники", ТекстЗапроса);
	
	Объект.ТЗ.Сортировать("Контрагент");
	УдалитьДублиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПодставитьПерсональныеСМСВсемНаСервере()
	
	// Вычисление общих переменных
	Пользователь 		= ПользователиИнформационнойБазы.ТекущийПользователь();
	ТекущийПользователь = ?(ПустаяСтрока(Пользователь.ПолноеИмя), Пользователь.Имя, Пользователь.ПолноеИмя);
	ТекДата				= Формат(ТекущаяДата(), "ДФ=dd.MM.yy");
	ТекВремя			= Формат(ТекущаяДата(), "ДЛФ=T");
	
	// Выполнение запросов для данных в общем
	Если Найти(ВРег(Объект.ШаблонТекстаСМС), ВРег("%Задолженность%")) > 0 Тогда 
		Если Найти(ИмяКонфигурации(), "УправлениеТорговлей") > 0 Тогда
			ПолучитьОбщуюЗадолженностьУТ();
		ИначеЕсли Найти(ИмяКонфигурации(), "БухгалтерияПредприятия") > 0 Тогда
			ПолучитьОбщуюЗадолженностьБП();
		КонецЕсли;
	КонецЕсли;
		
	
	// Выводим сообщения для каждого абонента
	Для каждого Стр Из Объект.ТЗ Цикл
		
		Если Стр.Флаг Тогда
			
			Текст = Объект.ШаблонТекстаСМС;
			
			// ВЫЧИСЛЯЕМ ПЕРЕМЕННЫЕ В ТЕКСТЕ
			Для Каждого Элемент Из СписокПеременных Цикл
				
				// В тексте нет больше переменных
				Если Найти(Текст,"%") = 0 Тогда
					Прервать;
				КонецЕсли;
				
				// Вычисляем каждую переменную
				П = ВРег(Элемент.Значение);				
				Индекс = Найти(ВРег(Текст), П);
				Если Индекс > 0 Тогда
					
					ВычисленнаяПеременная = "";
					Если П = ВРег("%Задолженность%") Тогда
						ВычисленнаяПеременная = ПолучитьЗадолженность(Стр.Контрагент);
					ИначеЕсли П = ВРег("%Контрагент%") Тогда
						ВычисленнаяПеременная = Строка(Стр.Контрагент);
					ИначеЕсли П = ВРег("%Телефон%") Тогда
						ВычисленнаяПеременная = Стр.Телефон;
					ИначеЕсли П = ВРег("%ТекущийПользователь%") Тогда
						ВычисленнаяПеременная = ТекущийПользователь;
					ИначеЕсли П = ВРег("%ТекущаяДата%") Тогда
						ВычисленнаяПеременная = ТекДата;
					ИначеЕсли П = ВРег("%ТекущееВремя%") Тогда
						ВычисленнаяПеременная = ТекВремя;
					ИначеЕсли П = ВРег("%ФИО_Фамилия%") Тогда						
						Структура = ОбработкаОбъект().ФамилияИмяОтчество(Строка(Стр.Контрагент));
						ВычисленнаяПеременная = Структура.Фамилия;
					ИначеЕсли П = ВРег("%ФИО_Имя%") Тогда
						Структура = ОбработкаОбъект().ФамилияИмяОтчество(Строка(Стр.Контрагент));
						ВычисленнаяПеременная = Структура.Имя;
					ИначеЕсли П = ВРег("%ФИО_Отчество%") Тогда
						Структура = ОбработкаОбъект().ФамилияИмяОтчество(Строка(Стр.Контрагент));
						ВычисленнаяПеременная = Структура.Отчество;
					ИначеЕсли П = ВРег("%Бонусы%") Тогда
						ВычисленнаяПеременная = БонусыРозница(Стр.Контрагент);
					КонецЕсли;
					
					// Замена строки "Текст1 %Переменная% Текст2" на "Текст1 ВычисленнаяПеременная Текст2", 
					// где ВычисленнаяПеременная - вычесленная переменная приведенная к строке
					Текст = Лев(Текст, Индекс - 1) + ВычисленнаяПеременная + Сред(Текст, Индекс + СтрДлина(П));
					
				КонецЕсли;
			КонецЦикла;			
			
			// Если есть %Вычислить(...)% вычисляем
			Попытка
				Пока Найти(ВРег(Текст), ВРег("%Вычислить(")) > 0 Цикл
				
					П = ВРег("%Вычислить(");
					Индекс1 = Найти(ВРег(Текст), П);
					Индекс2 = Найти(ВРег(Текст), ")%");
					СтрокаВычисления = Сред(Текст, Индекс1 + СтрДлина(П), Индекс2 - (Индекс1 + СтрДлина(П)));
					ВычисленнаяПеременная = Вычислить(СтрокаВычисления);
					
					Текст = Лев(Текст, Индекс1 - 1) + ВычисленнаяПеременная + Сред(Текст, Индекс2 + 2);
				КонецЦикла;
			Исключение
			КонецПопытки;
			
			Стр.ТекстСМС = Текст;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОтправитьСМСНаСервере(ПосчитатьСтоимость = Ложь)
	
	Если ПустаяСтрока(Объект.Логин) Тогда
		СообщитьПользователю("Не заполнен логин доступа к сайту для отправки SMS. Щелкните на кнопку ""Регистрация"", а затем после регистрации введите логин и пароль.",,"Логин");
		Возврат Неопределено;
	КонецЕсли;
	
	Если Объект.ТипСМС = 0 И ПустаяСтрока(Объект.ШаблонТекстаСМС) Тогда
		СообщитьПользователю("Не заполнено сообщение, которое будет отправлено всем контрагентам",,"ШаблонТекстаСМС");
		Возврат Неопределено;
	КонецЕсли;
	
	// Не выбранно ни одного адресата
	ЕстьВыбранныеНомера = Ложь;
	Для каждого Стр Из Объект.ТЗ Цикл
		Если Стр.Флаг Тогда
			ЕстьВыбранныеНомера = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ЕстьВыбранныеНомера Тогда
		СообщитьПользователю("Установите галочки в тех строках, куда вы хотите отправить SMS (можно установить сразу все вверху таблицы)",,"Объект.ТЗ");
		Возврат Неопределено;		
	КонецЕсли;
	
	Если Объект.ТипСМС = 1 Тогда
		
		// Проверим, что все SMS с пустым текстом (надо ввести текст и заполнить персональные SMS)
		ВсеСМСПустые = Истина;
		Для каждого Стр Из Объект.ТЗ Цикл
			Если Стр.Флаг И НЕ ПустаяСтрока(Стр.ТекстСМС) Тогда
				ВсеСМСПустые = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;		
		Если ВсеСМСПустые Тогда
			СообщитьПользователю("Введите текст SMS и нажмите на кнопку ""Подставить персональные SMS в таблицу"" для формирования персональных SMS каждому адресату",,"ШаблонТекстаСМС");
			Возврат Неопределено;		
		КонецЕсли;
		
		// Проверим, что у кого-то не заполнен персональный шаблон
		ЕстьОшибка = Ложь;		
		Для каждого Стр Из Объект.ТЗ Цикл
			Если Стр.Флаг И ПустаяСтрока(Стр.ТекстСМС) Тогда
				СообщитьПользователю("На номер " + Стр.Телефон + " не введена персональная SMS",,"Объект.ТЗ");
				ЕстьОшибка = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьОшибка Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Таблица = Объект.ТЗ.Выгрузить();

	КоличествоОтправленных = 0;
	Если Объект.Сервис = "sms4b.ru" Тогда
		КоличествоОтправленных = ОбработкаОбъект()._SMS4BRU_ОтправитьSMS(Таблица);
	ИначеЕсли Объект.Сервис = "smsc.ru" Тогда
		КоличествоОтправленных = ОбработкаОбъект()._SMSCRU_ОтправитьSMS(Таблица, ПосчитатьСтоимость);
	ИначеЕсли Объект.Сервис = "sms.ru" Тогда
		КоличествоОтправленных = ОбработкаОбъект()._SMSRU_ОтправитьSMS(Таблица, ПосчитатьСтоимость);
	ИначеЕсли Объект.Сервис = "p1sms.ru" Тогда
		КоличествоОтправленных = ОбработкаОбъект()._P1SMSRU_ОтправитьSMS(Таблица, ПосчитатьСтоимость);
	ИначеЕсли Объект.Сервис = "smsgorod.ru" Тогда
		КоличествоОтправленных = ОбработкаОбъект()._SMSGORODRU_ОтправитьSMS(Таблица, ПосчитатьСтоимость);
	ИначеЕсли Объект.Сервис = "terasms.ru" Тогда
		КоличествоОтправленных = ОбработкаОбъект()._TERASMSRU_ОтправитьSMS(Таблица, ПосчитатьСтоимость);
	ИначеЕсли Объект.Сервис = "sms-prosto.ru" Тогда
		КоличествоОтправленных = ОбработкаОбъект()._PROSTOSMS_ОтправитьSMS(Таблица, ПосчитатьСтоимость);
		
	КонецЕсли;
	
	Объект.ТЗ.Загрузить(Таблица);
	
	Возврат КоличествоОтправленных;
	
КонецФункции

&НаСервере
Процедура ОбновитьСтатусДоставкиНаСервере()
	
	Таблица = Объект.ТЗ.Выгрузить();
	Логин	= "";
	
	Если Объект.Сервис = "sms4b.ru" Тогда
		ОбработкаОбъект()._SMS4BRU_ОбновитьСтатусДоставки(Таблица);
	ИначеЕсли Объект.Сервис = "smsc.ru" Тогда
		ОбработкаОбъект()._SMSCRU_ОбновитьСтатусДоставки(Таблица);
	ИначеЕсли Объект.Сервис = "sms.ru" Тогда
		ОбработкаОбъект()._SMSRU_ОбновитьСтатусДоставки(Таблица);
	ИначеЕсли Объект.Сервис = "p1sms.ru" Тогда
		ОбработкаОбъект()._P1SMSRU_ОбновитьСтатусДоставки(Таблица);
	ИначеЕсли Объект.Сервис = "smsgorod.ru" Тогда
		ОбработкаОбъект()._SMSGORODRU_ОбновитьСтатусДоставки(Таблица);
	ИначеЕсли Объект.Сервис = "terasms.ru" Тогда
		ОбработкаОбъект()._TERASMSRU_ОбновитьСтатусДоставки(Таблица);
	ИначеЕсли Объект.Сервис = "sms-prosto.ru" Тогда
		ОбработкаОбъект()._TERASMSRU_ОбновитьСтатусДоставки(Таблица);
	КонецЕсли;
	
	Объект.ТЗ.Загрузить(Таблица);
		
	ОбновитьБалансНаСервре();
	
КонецПроцедуры

&НаСервере
Функция НеобходимоОбновить(Принудительно = Ложь)
		
	// Проверяем обновления
	Попытка
		Результат = ОбработкаОбъект().ПроверитьОбновлениеИУстановить(Объект.Автообновление, Объект.ДатаПоследнейПроверкиОбновления, Принудительно);
	
		Возврат Результат;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура Обновление(Принудительно = Ложь)
	
	Структура = НеобходимоОбновить(Принудительно);
	Если Структура <> Неопределено Тогда
		Объект.ДатаПоследнейПроверкиОбновления = ТекущаяДата();
		мИмяФормы = Объект.ПараметрыСеансаОбработки.ИмяФормаОбновление + "УФ";
		Если Структура.НеобходимоОбновление Тогда
			Попытка
				Выполнить("ОткрытьФорму(мИмяФормы, Структура, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)");
			Исключение
				Попытка
					ОткрытьФормуМодально(мИмяФормы, Структура, ЭтаФорма);
				Исключение
					ОткрытьФорму(мИмяФормы, Структура, ЭтаФорма);
				КонецПопытки;
			КонецПопытки;
		ИначеЕсли Принудительно Тогда
			ПредупреждениеСообщение(,"Обновление не требуется!
				|Установлена самая последняя версия.");		
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

//////////////////////////////////////////////////////////////
// ПОДДЕРЖКА EXCEL

&НаКлиенте
Процедура ВыполнитьЗагрузкуExcel(Результат, ПараметрыИсточника) Экспорт
	
	Перем Оповещение;
	
	Если Результат <> Неопределено Тогда
		
		Объект.НомерКолонкиТелефона = Результат.НомерКолонкиТелефона;
		Объект.НомерПервойСтроки	= Результат.НомерПервойСтроки;
		Объект.НомерСИменемАдресата = Результат.НомерСИменемАдресата;
		
		Выполнить("Оповещение = Новый ОписаниеОповещения(""ОбработатьВыборXLS"", ЭтотОбъект)");
		Выполнить("НачатьПомещениеФайла(Оповещение, , , Истина, УникальныйИдентификатор)");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборXLS(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ВыбранноеИмяФайла);
	
	ЗаполнитьПоТаблицеExcel(Адрес, Файл.Расширение);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоТаблицеExcel(Адрес, Расширение)
	
	ИмяФайла = ПолучитьИмяВременногоФайла(Расширение);
		
	ДД = ПолучитьИзВременногоХранилища(Адрес);
	ДД.Записать(ИмяФайла);
	
	НомерКолонкиТелефона	= Объект.НомерКолонкиТелефона;
	НомерСИменемАдресата	= Объект.НомерСИменемАдресата;
	НомерПервойСтроки		= Объект.НомерПервойСтроки;
	
	Попытка	
		Эксель =  Новый COMОбъект("Excel.Application"); 
	Исключение
		Сообщить(ОписаниеОшибки() + " Программа Exсel не установлена на данном компьютере!"); 
		Возврат;
	КонецПопытки; 
	
	Объект.ТЗ.Очистить();
	
	Книга = Эксель.WorkBooks.Open(ИмяФайла); 
	Лист = Книга.WorkSheets(1); 
	КолСтрок = Лист.Cells(1,1).SpecialCells(11).Row;
	Для Ном = НомерПервойСтроки По КолСтрок Цикл 
		Телефон = Лист.Cells(Ном, НомерКолонкиТелефона).Value;
		Если Телефон <> "" И Телефон <> Неопределено Тогда
			НоваяСтрока				= Объект.ТЗ.Добавить();
			НоваяСтрока.Телефон		= СтрЗаменить(Телефон, Символы.НПП, "");
			НоваяСтрока.Контрагент	= Лист.Cells(Ном, НомерСИменемАдресата).Value;
			НоваяСтрока.Флаг		= Истина;
			НоваяСтрока.Статус		= "Не отправлено";
		КонецЕсли; 
	КонецЦикла;	
	
	Эксель.Quit();
			
КонецПроцедуры

//////////////////////////////////////////////////////////////
// СОБЫТИЯ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗагрузитьНастройкиФормы();
	Если НЕ ПустаяСтрока(Объект.Логин) Тогда
		ОбновитьБалансНаСервре();
	КонецЕсли;
	
	ОбработкаОбъект = ОбработкаОбъект();
		
	Объект.ВерсияБСП = ОбработкаОбъект.ПолучитьВерсиюБСП();
	
	Объект.ПараметрыСеансаОбработки	= ОбработкаОбъект.ОбработкаПолучитьПараметрыСеанса(ЭтаФорма);	
	
	Объект.ПутьКФормам = "";
	Если Объект.ПараметрыСеансаОбработки.ТекущийРежимЗапуска = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		Объект.ПутьКФормам = ОбработкаОбъект.Метаданные().ПолноеИмя() + ".Форма";
	Иначе
		Объект.ПутьКФормам = "Обработка." + ОбработкаОбъект.Метаданные().Имя + ".Форма";
	КонецЕсли;
	
	Попытка
		Элементы.Сервис.КнопкаВыпадающегоСписка = Истина;
	Исключение
	КонецПопытки;
	Попытка
		Элементы.Канал.КнопкаВыпадающегоСписка = Истина;
	Исключение
	КонецПопытки;
	Попытка
		Элементы.Логин.КнопкаОчистки = Истина;
		Элементы.Пароль.КнопкаОчистки = Истина;
		Элементы.КлючAPI.КнопкаОчистки = Истина;
	Исключение
	КонецПопытки;	
	
	// Видимость быстрого заполнения
	Элементы.ФормаТолькоПоКонтрагентамИИхКонтактныхЛицам.Видимость	= Ложь;
	Элементы.ФормаТолькоПоФизическимЛицам.Видимость					= Ложь;
	Элементы.ФормаТолькоПоПартнерам.Видимость						= Ложь;
	Элементы.ФормаТолькоПоМагазинамРозница.Видимость				= Ложь;
	Элементы.ФормаТолькоПоПользователям.Видимость					= Ложь;
	Элементы.ФормаТолькоПоКонтактнымЛицам.Видимость					= Ложь;
	Элементы.ФормаТолькоПоСотрудникам.Видимость						= Ложь;
	Элементы.ФормаТолькоПоЛичнымАдресатам.Видимость					= Ложь;
	
	СписокПеременных.Очистить();
	// Список общих переменных и их описание
	СписокПеременных.Добавить("%Контрагент%"			, "Наименование контрагента, как оно задано в таблице в колонке ""Контрагент"" (приводится к строке)");
	СписокПеременных.Добавить("%ФИО_Фамилия%"			, "Если указано ФИО, то содержит фамилию, если указано не ФИО то возвращает 1-ое слово поля ""Контрагент"", или пусто если слов меньше");
	СписокПеременных.Добавить("%ФИО_Имя%"				, "Если указано ФИО, то содержит имя, если указано не ФИО то возвращает 2-ое слово поля ""Контрагент"", или пусто если слов меньше");
	СписокПеременных.Добавить("%ФИО_Отчество%"			, "Если указано ФИО, то содержит отчество, если указано не ФИО то возвращает 3-ое слово поля ""Контрагент"", или пусто если слов меньше");
	СписокПеременных.Добавить("%Телефон%"				, "Номер телефона контрагента, которому отправляется SMS");
	СписокПеременных.Добавить("%ТекущийПользователь%"	, "Текущий пользователь, который делает рассылку SMS");
	СписокПеременных.Добавить("%ТекущаяДата%"			, "Текущая дата (время по серверу)");
	СписокПеременных.Добавить("%ТекущееВремя%"			, "Текущее время (время по серверу)");
	СписокПеременных.Добавить("%Вычислить(...)%"		, "Позволяет вставлять в текст вычисляемые переменные. Например, можно ипользовать: 
		|<i>%Вычислить(ФизическиеЛицаКлиентСервер.ФамилияИнициалыФизЛица(Строка(Стр.Контрагент)))%</i> для вставки кода, который вычислить краткое представление вида Иванов И.И. Или 
		|<i>%Вычислить(ОбщийМодульСервер.ПолучитьЗадолженностьКоготоНаДату(ТекущаяДата(), Стр.Контрагент))%</i> (пример вымышленный), позволит вызывать любую функцию из общего модуля, которая что-то подсчитает и вставит вместо себя по контрагенту. 
		|Так же может быть использовано для вставки каких то вычислений типа задолженности, заработной платы и т.д. (рекомендуется использовать только знающим людям)");
	
	// Установка доступных типов
	МассивТипов		= Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	ПараметрыСтроки = Новый КвалификаторыСтроки(100);
	
	// Ниже перебор поддерживаемых конфигураций
	// Если есть необходость можете добавить переменные
	
	Если Найти(ИмяКонфигурации(), "УправлениеТорговлей") > 0 Тогда
		// УТ 11
		
		// Контрагенты, Партнеры, Строка, КонтактныеЛицаПартнеров, ФизическиеЛица, Пользователи		
		ДобавитьВМассивСправочник(МассивТипов, "Контрагенты");
		ДобавитьВМассивСправочник(МассивТипов, "Партнеры");
		ДобавитьВМассивСправочник(МассивТипов, "КонтактныеЛицаПартнеров");
		ДобавитьВМассивСправочник(МассивТипов, "ФизическиеЛица");
		ДобавитьВМассивСправочник(МассивТипов, "Пользователи");
		
		// Видиомсть
		Элементы.ФормаТолькоПоКонтрагентамИИхКонтактныхЛицам.Видимость	= Истина;
		Элементы.ФормаТолькоПоФизическимЛицам.Видимость					= Истина;
		Элементы.ФормаТолькоПоПартнерам.Видимость						= Истина;
		Элементы.ФормаТолькоПоПользователям.Видимость					= Истина;
		
		СписокПеременных.Добавить("%Задолженность%", "Задолженность контрагента (мы должны ""-"", или нам должны ""+"")");
		
	ИначеЕсли Найти(ИмяКонфигурации(), "БухгалтерияПредприятия") > 0 Тогда
		// БП 3.0
		
		// Контрагенты, Строка, КонтактныеЛица, ФизическиеЛица, Пользователи
		ДобавитьВМассивСправочник(МассивТипов, "Контрагенты");
		ДобавитьВМассивСправочник(МассивТипов, "КонтактныеЛица");
		ДобавитьВМассивСправочник(МассивТипов, "ФизическиеЛица");
		ДобавитьВМассивСправочник(МассивТипов, "Пользователи");
		
		// Видиомсть
		Элементы.ФормаТолькоПоКонтрагентамИИхКонтактныхЛицам.Видимость	= Истина;
		Элементы.ФормаТолькоПоФизическимЛицам.Видимость					= Истина;
		Элементы.ФормаТолькоПоПользователям.Видимость					= Истина;
		Элементы.ФормаТолькоПоКонтактнымЛицам.Видимость					= Истина;
		
		СписокПеременных.Добавить("%Задолженность%", "Задолженность контрагента (мы должны ""-"", или нам должны ""+"")");
		
	ИначеЕсли Найти(ИмяКонфигурации(), "Розница") > 0 Тогда
		// Розница и конфигурации на базе розницы (РозницаЮвелирныйМагазин, ...)
		
		
		// Контрагенты, Магазины, ФизическиеЛица, Пользователи
		ДобавитьВМассивСправочник(МассивТипов, "Контрагенты");
		ДобавитьВМассивСправочник(МассивТипов, "Магазины");
		ДобавитьВМассивСправочник(МассивТипов, "ФизическиеЛица");
		ДобавитьВМассивСправочник(МассивТипов, "Пользователи");
		
		// Видиомсть
		Элементы.ФормаТолькоПоКонтрагентамИИхКонтактныхЛицам.Видимость	= Истина;
		Элементы.ФормаТолькоПоФизическимЛицам.Видимость					= Истина;
		Элементы.ФормаТолькоПоМагазинамРозница.Видимость				= Истина;
		Элементы.ФормаТолькоПоПользователям.Видимость					= Истина;
		
		СписокПеременных.Добавить("%Бонусы%","Вычисляет бонусы по Контрагенту");
		
	ИначеЕсли Найти(ИмяКонфигурации(), "ЗарплатаИУправлениеПерсоналом") > 0 Тогда
		// ЗУП 3.0
		
		ДобавитьВМассивСправочник(МассивТипов, "ФизическиеЛица");
		ДобавитьВМассивСправочник(МассивТипов, "Пользователи");
		ДобавитьВМассивСправочник(МассивТипов, "Сотрудники");
		
		// Видимость
		Элементы.ФормаТолькоПоФизическимЛицам.Видимость					= Истина;
		Элементы.ФормаТолькоПоПользователям.Видимость					= Истина;
		Элементы.ФормаТолькоПоСотрудникам.Видимость						= Истина;
		
	ИначеЕсли Найти(ИмяКонфигурации(), "УправлениеНебольшойФирмой") > 0 
		ИЛИ Найти(ИмяКонфигурации(), "УправлениеНашейФирмой") > 0 Тогда
		// УНФ 1.5, 1.6
				
		ДобавитьВМассивСправочник(МассивТипов, "ФизическиеЛица");
		ДобавитьВМассивСправочник(МассивТипов, "Пользователи");
		ДобавитьВМассивСправочник(МассивТипов, "Контрагенты");
		ДобавитьВМассивСправочник(МассивТипов, "КонтактныеЛица");
		
		// Видимость		
		Элементы.ФормаТолькоПоКонтрагентамИИхКонтактныхЛицам.Видимость	= Истина;
		Элементы.ФормаТолькоПоФизическимЛицам.Видимость					= Истина;
		Элементы.ФормаТолькоПоКонтактнымЛицам.Видимость					= Истина;
		Элементы.ФормаТолькоПоПользователям.Видимость					= Истина;
		
	ИначеЕсли Найти(ИмяКонфигурации(), "КомплекснаяАвтоматизация") > 0 Тогда
		// КА 2
				
		ДобавитьВМассивСправочник(МассивТипов, "ФизическиеЛица");
		ДобавитьВМассивСправочник(МассивТипов, "Пользователи");
		ДобавитьВМассивСправочник(МассивТипов, "Контрагенты");
		ДобавитьВМассивСправочник(МассивТипов, "Партнеры");
		ДобавитьВМассивСправочник(МассивТипов, "КонтактныеЛицаПартнеров");
		
		// Видимость		
		Элементы.ФормаТолькоПоКонтрагентамИИхКонтактныхЛицам.Видимость	= Истина;
		Элементы.ФормаТолькоПоФизическимЛицам.Видимость					= Истина;
		Элементы.ФормаТолькоПоПользователям.Видимость					= Истина;
		Элементы.ФормаТолькоПоПартнерам.Видимость						= Истина;
		
	ИначеЕсли Найти(ИмяКонфигурации(), "ДокументооборотПРОФ") > 0 Тогда
		// ДокументооборотПРОФ 2.0
		
		ДобавитьВМассивСправочник(МассивТипов, "ФизическиеЛица");
		ДобавитьВМассивСправочник(МассивТипов, "Пользователи");
		ДобавитьВМассивСправочник(МассивТипов, "Корреспонденты");
		ДобавитьВМассивСправочник(МассивТипов, "КонтактныеЛица");
		
		// Видимость		
		Элементы.ФормаТолькоПоФизическимЛицам.Видимость					= Истина;
		Элементы.ФормаТолькоПоКонтактнымЛицам.Видимость					= Истина;
		Элементы.ФормаТолькоПоПользователям.Видимость					= Истина;
		Элементы.ФормаТолькоПоКонтрагентамИИхКонтактныхЛицам.Видимость	= Истина;
		
		Элементы.ФормаТолькоПоКонтрагентамИИхКонтактныхЛицам.Заголовок =
			"Только по корреспондентам и их контактных лицам";
		
	ИначеЕсли Найти(ИмяКонфигурации(), "ДокументооборотКОРП") > 0 Тогда
		// ДокументооборотКОРП 2.0
		
		ДобавитьВМассивСправочник(МассивТипов, "ГруппыКонтактовПользователей");
		ДобавитьВМассивСправочник(МассивТипов, "ФизическиеЛица");
		ДобавитьВМассивСправочник(МассивТипов, "ЛичныеАдресаты");
		ДобавитьВМассивСправочник(МассивТипов, "Пользователи");
		ДобавитьВМассивСправочник(МассивТипов, "Контрагенты");
		ДобавитьВМассивСправочник(МассивТипов, "КонтактныеЛица");
		
		// Видимость		
		Элементы.ФормаТолькоПоФизическимЛицам.Видимость					= Истина;
		Элементы.ФормаТолькоПоКонтактнымЛицам.Видимость					= Истина;
		Элементы.ФормаТолькоПоПользователям.Видимость					= Истина;
		Элементы.ФормаТолькоПоКонтрагентамИИхКонтактныхЛицам.Видимость	= Истина;
		Элементы.ФормаТолькоПоЛичнымАдресатам.Видимость					= Истина;
		
	ИначеЕсли Найти(ИмяКонфигурации(), "ФитнесКлуб") > 0 Тогда
		// Фитнес клуб
				
		ДобавитьВМассивСправочник(МассивТипов, "Контрагенты");		
		
		// Видимость
		Элементы.ФормаТолькоПоКонтрагентамИИхКонтактныхЛицам.Видимость	= Истина;
		
	ИначеЕсли Найти(ИмяКонфигурации(), "Автосервис") > 0 Тогда
		// 
				
		ДобавитьВМассивСправочник(МассивТипов, "Контрагенты");
		ДобавитьВМассивСправочник(МассивТипов, "КонтактныеЛица");
		ДобавитьВМассивСправочник(МассивТипов, "ФизическиеЛица");
		ДобавитьВМассивСправочник(МассивТипов, "Пользователи");
		
		// Видимость
		Элементы.ФормаТолькоПоФизическимЛицам.Видимость					= Истина;
		Элементы.ФормаТолькоПоКонтактнымЛицам.Видимость					= Истина;
		Элементы.ФормаТолькоПоПользователям.Видимость					= Истина;
		Элементы.ФормаТолькоПоКонтрагентамИИхКонтактныхЛицам.Видимость	= Истина;
		Элементы.ФормаТолькоПоЛичнымАдресатам.Видимость					= Истина;
		
	КонецЕсли;
	
	Элементы.ТЗКонтрагент.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов,,,,ПараметрыСтроки);
	
	// Заполнение переменных.
	Разделитель = "<br>=====================================================================<br>";
	СписокПеременных.СортироватьПоЗначению();
	ТекстПеременные =
		"<html><body><p style=""font-family:Arial;font-size:10pt;"">"
		+ "<b>Описание переменных, которые можно использовать в тексте SMS</b>" 
		+ Разделитель;
	Для Каждого Элемент Из СписокПеременных Цикл
		ТекстПеременные = ТекстПеременные + "
			|" + Элемент.Значение + " - " + Элемент.Представление + Разделитель;
	КонецЦикла;
	ТекстПеременные = ТекстПеременные + "</p></body></html>";
	Переменные.УстановитьHTML(ТекстПеременные, Новый Структура);
	
	ОбновитьВидимостьИДоступность();
	// Адаптация под новые платформы.
	Попытка
		Выполнить("Элементы.ТипСМС.ВидПереключателя = ВидПереключателя.Тумблер");
		Выполнить("Элементы.ИспользуемыйПротокол.ВидПереключателя = ВидПереключателя.Тумблер");
		Выполнить("Элементы.ШаблонТекстаСМС.АвтоМаксимальнаяШирина = Ложь;");
		Выполнить("Элементы.ШаблонТекстаСМС.АвтоМаксимальнаяВысота = Ложь;");
		Выполнить("Элементы.Баланс.АвтоМаксимальнаяШирина = Ложь;");
		Выполнить("Элементы.ДекорацияНадписьСтатистика.АвтоМаксимальнаяШирина = Ложь;");
	Исключение
	КонецПопытки;
	
	// Если логин пустой или какая то ошибка подключения.
	Если ПустаяСтрока(Объект.Логин) ИЛИ Элементы.Баланс.ЦветТекста = WebЦвета.Красный Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ДоступНаСайт;
	КонецЕсли;
		
	ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " Версия: " + ВерсияОбработки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Проверка на обновление
	Перем ТекстВопроса, Ответ, ОписаниеОповещенияОЗавершении, ПараметрыИсточника;
	
	Если Объект.Отладка Тогда
		Объект.ДатаПоследнейПроверкиОбновления = Дата(1, 1, 1);
	КонецЕсли;
	
	Обновление(Ложь);
	ОбновитьСписокОтправителей();
	ОбновитьСписокКаналов();
	
	GA_ЗаполнитьПараметры();
	GA_НачатьРаботу();
	мДанные = GA_Сеанс("start");
	GA_ОтправитьСведения(мДанные);
	мДанные = GA_Форма_Экран("Обработка");
	GA_ОтправитьСведения(мДанные);	
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОтборСМС" Тогда
		ЗаполнитьПоТаблицеСсылок(Параметр.ТипЗначения, Параметр.Таблица);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("SMS_Логин"					, Объект.Логин);
	СтруктураНастроек.Вставить("SMS_Пароль"					, Объект.Пароль);
	СтруктураНастроек.Вставить("SMS_ИмяОтправителя"			, Объект.Отправитель);
	СтруктураНастроек.Вставить("SMS_Текст"					, Объект.ШаблонТекстаСМС);
	СтруктураНастроек.Вставить("SMS_ТипСМС"					, Объект.ТипСМС);
	СтруктураНастроек.Вставить("SMS_Транслитерация"			, Объект.Транслитерация);
	СтруктураНастроек.Вставить("SMS_Автообновление"			, Объект.Автообновление);
	СтруктураНастроек.Вставить("SMS_ДатаПоследнейПроверкиОбновления", Объект.ДатаПоследнейПроверкиОбновления);
	СтруктураНастроек.Вставить("SMS_НомерКолонкиТелефона"	, Объект.НомерКолонкиТелефона);
	СтруктураНастроек.Вставить("SMS_НомерСИменемАдресата"	, Объект.НомерСИменемАдресата);
	СтруктураНастроек.Вставить("SMS_НомерПервойСтроки"		, Объект.НомерПервойСтроки);	
	СтруктураНастроек.Вставить("SMS_Сервис"					, Объект.Сервис);
	СтруктураНастроек.Вставить("SMS_ИспользоватьПрокси"		, Объект.ИспользоватьПрокси);
	СтруктураНастроек.Вставить("SMS_ПроксиАдрес"			, Объект.ПроксиАдрес);
	СтруктураНастроек.Вставить("SMS_ПроксиЛогин"			, Объект.ПроксиЛогин);
	СтруктураНастроек.Вставить("SMS_ПроксиПароль"			, Объект.ПроксиПароль);
	СтруктураНастроек.Вставить("SMS_ПроксиПорт"				, Объект.ПроксиПорт);
	СтруктураНастроек.Вставить("SMS_ИспользуемыйПротокол"	, Объект.ИспользуемыйПротокол);
	СтруктураНастроек.Вставить("SMS_Отладка"				, Объект.Отладка);
	СтруктураНастроек.Вставить("SMS_РазрешитьОтправкуСтатистики", Объект.РазрешитьОтправкуСтатистики);
	СтруктураНастроек.Вставить("SMS_КлючAPI"				, Объект.КлючAPI);
	СтруктураНастроек.Вставить("SMS_Канал"					, Объект.Канал);
	
	Попытка
		СохранитьНастройкиФормы(СтруктураНастроек);
		
		мДанные = GA_Сеанс("end");
		GA_ОтправитьСведения(мДанные);	
		GA_ЗакончитьРаботу();	
		
	Исключение
	КонецПопытки;
		
КонецПроцедуры

//////////////////////////////////////////////////////////////
// ПЕРЕХОДЫ НА САЙТЫ

&НаКлиенте
Процедура ДекорацияЗабылиПарольНажатие(Элемент)
	
	ОткрытьСайт(ПолучитьСсылкуСервиса(Объект.Сервис, "ЗабылиПароль"));	
	                 
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРегистрацияНажатие(Элемент)
	
	ОткрытьСайт(ПолучитьСсылкуСервиса(Объект.Сервис, "Регистрация"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСогласоватьНажатие(Элемент)
	
	ОткрытьСайт(ПолучитьСсылкуСервиса(Объект.Сервис, "Согласовать"));

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУзнатьКлючНажатие(Элемент)
	
	ОткрытьСайт(ПолучитьСсылкуСервиса(Объект.Сервис, "КлючAPI"));
	
КонецПроцедуры

//////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЯ НА КЛИЕНТЕ

&НаКлиенте
Процедура ПоВсемКонтактнымДанным(Команда)	
	
	МассивСправочников = Новый Массив();
	Если Найти(ИмяКонфигурации(), "УправлениеТорговлей") > 0 Тогда
		МассивСправочников.Добавить("Партнеры");
		МассивСправочников.Добавить("Контрагенты");
		МассивСправочников.Добавить("КонтактныеЛицаПартнеров");
		МассивСправочников.Добавить("ФизическиеЛица");
		МассивСправочников.Добавить("Пользователи");
	ИначеЕсли Найти(ИмяКонфигурации(), "БухгалтерияПредприятия") > 0 Тогда
		МассивСправочников.Добавить("Контрагенты");
		МассивСправочников.Добавить("КонтактныеЛица");
		МассивСправочников.Добавить("ФизическиеЛица");
		МассивСправочников.Добавить("Пользователи");
	ИначеЕсли Найти(ИмяКонфигурации(), "Розница") > 0 Тогда
		МассивСправочников.Добавить("Контрагенты");
		МассивСправочников.Добавить("Магазины");
		МассивСправочников.Добавить("ФизическиеЛица");
		МассивСправочников.Добавить("Пользователи");
	ИначеЕсли Найти(ИмяКонфигурации(), "ЗарплатаИУправлениеПерсоналом") > 0 Тогда
		МассивСправочников.Добавить("ФизическиеЛица");
		МассивСправочников.Добавить("Пользователи");
	ИначеЕсли Найти(ИмяКонфигурации(), "УправлениеНебольшойФирмой") > 0 
		ИЛИ Найти(ИмяКонфигурации(), "УправлениеНашейФирмой") > 0 Тогда
		МассивСправочников.Добавить("ФизическиеЛица");
		МассивСправочников.Добавить("Пользователи");
		МассивСправочников.Добавить("Контрагенты");
		МассивСправочников.Добавить("КонтактныеЛица");
	ИначеЕсли Найти(ИмяКонфигурации(), "КомплекснаяАвтоматизация") > 0 Тогда
		МассивСправочников.Добавить("ФизическиеЛица");
		МассивСправочников.Добавить("Пользователи");
		МассивСправочников.Добавить("Контрагенты");
		МассивСправочников.Добавить("Партнеры");
		МассивСправочников.Добавить("КонтактныеЛицаПартнеров");
	ИначеЕсли Найти(ИмяКонфигурации(), "ДокументооборотПРОФ") > 0 Тогда
		МассивСправочников.Добавить("ФизическиеЛица");
		МассивСправочников.Добавить("Пользователи");
		МассивСправочников.Добавить("Корреспонденты");
		МассивСправочников.Добавить("КонтактныеЛица");
	ИначеЕсли Найти(ИмяКонфигурации(), "ДокументооборотКОРП") > 0 Тогда
		МассивСправочников.Добавить("ФизическиеЛица");
		МассивСправочников.Добавить("Пользователи");
		МассивСправочников.Добавить("Контрагенты");
		МассивСправочников.Добавить("КонтактныеЛица");
		МассивСправочников.Добавить("ЛичныеАдресаты");
	ИначеЕсли Найти(ИмяКонфигурации(), "ФитнесКлуб") > 0 Тогда
		МассивСправочников.Добавить("Контрагенты");
	ИначеЕсли Найти(ИмяКонфигурации(), "Автосервис") > 0 Тогда
		МассивСправочников.Добавить("ФизическиеЛица");
		МассивСправочников.Добавить("Пользователи");
		МассивСправочников.Добавить("Контрагенты");
		МассивСправочников.Добавить("КонтактныеЛица");
	КонецЕсли;
	Заполнить(МассивСправочников);
	
	Если Найти(ИмяКонфигурации(), "ЗарплатаИУправлениеПерсоналом") > 0 Тогда
		ЗаполнитьПоСотрудникам(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоПоКонтрагентам(Команда)
	
	МассивСправочников = Новый Массив();
	
	Если Найти(ИмяКонфигурации(), "ДокументооборотПРОФ") > 0 Тогда
		
		МассивСправочников.Добавить("Корреспонденты");
		МассивСправочников.Добавить("КонтактныеЛица");
		
	ИначеЕсли Найти(ИмяКонфигурации(), "ДокументооборотКОРП") > 0 Тогда
		
		МассивСправочников.Добавить("Контрагенты");
		МассивСправочников.Добавить("КонтактныеЛица");
		
	Иначе
		
		МассивСправочников.Добавить("Контрагенты");
		Если Найти(ИмяКонфигурации(), "УправлениеТорговлей") > 0 Тогда
			МассивСправочников.Добавить("КонтактныеЛицаПартнеров");
		ИначеЕсли Найти(ИмяКонфигурации(), "КомплекснаяАвтоматизация") > 0 Тогда
			МассивСправочников.Добавить("КонтактныеЛицаПартнеров");
		ИначеЕсли Найти(ИмяКонфигурации(), "УправлениеНебольшойФирмой") > 0
			ИЛИ Найти(ИмяКонфигурации(), "УправлениеНашейФирмой") > 0 Тогда
			МассивСправочников.Добавить("КонтактныеЛица");
		КонецЕсли;
		
	КонецЕсли;	
	
	Заполнить(МассивСправочников);
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоПоПартнерам(Команда)
	
	МассивСправочников = Новый Массив();
	МассивСправочников.Добавить("Партнеры");
	Заполнить(МассивСправочников);
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоПоФизическимЛицам(Команда)
	
	МассивСправочников = Новый Массив();
	МассивСправочников.Добавить("ФизическиеЛица");
	Заполнить(МассивСправочников);
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоПоМагазинамРозница(Команда)

	МассивСправочников = Новый Массив();
	МассивСправочников.Добавить("Магазины");
	Заполнить(МассивСправочников);
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоПоПользователям(Команда)

	МассивСправочников = Новый Массив();
	МассивСправочников.Добавить("Пользователи");
	Заполнить(МассивСправочников);
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоПоСотрудникам(Команда)
	
	ЗаполнитьПоСотрудникам();
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоПоЛичнымАдресатам(Команда)
	
	МассивСправочников = Новый Массив();
	МассивСправочников.Добавить("ЛичныеАдресаты");
	Заполнить(МассивСправочников);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоКонтактнымЛицам(Команда)
	
	МассивСправочников = Новый Массив();
	МассивСправочников.Добавить("КонтактныеЛица");
	Заполнить(МассивСправочников);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////
// КОМАНДЫ

&НаСервере
Функция ПолучитьСписокОтправителей()
	
	СЗ = Неопределено;
	Если Объект.Сервис = "smsc.ru" Тогда
		
		СЗ = ОбработкаОбъект()._SMSCRU_СписокОтправителей();
		
	ИначеЕсли Объект.Сервис = "sms.ru" Тогда
		
		СЗ = ОбработкаОбъект()._SMSRU_СписокОтправителей();
		
	ИначеЕсли Объект.Сервис = "p1sms.ru" Тогда
		
		СЗ = ОбработкаОбъект()._P1SMSRU_СписокОтправителей();
		
	ИначеЕсли Объект.Сервис = "smsgorod.ru" Тогда
		
		СЗ = ОбработкаОбъект()._SMSGORODRU_СписокОтправителей();
			
	КонецЕсли;
	
	Возврат СЗ;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСписокОтправителей()
	
	Элементы.Отправитель.СписокВыбора.Очистить();
	
	Если НЕ ПустаяСтрока(Объект.Логин) И НЕ ПустаяСтрока(Объект.Пароль) Тогда
		
		СЗ = ПолучитьСписокОтправителей();
		
		Если СЗ <> Неопределено Тогда		
			Если ТипЗнч(СЗ) = Тип("Строка") Тогда
				// Это ошибка, ее можно вывести, но мы ее просто игнорируем
				Возврат;
			Иначе
				Для Каждого Элемент Из СЗ Цикл
					Элементы.Отправитель.СписокВыбора.Добавить(Элемент.Значение);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Попытка 
		Элементы.Отправитель.КнопкаСпискаВыбора = Элементы.Отправитель.СписокВыбора.Количество() > 0; 
	Исключение 
	КонецПопытки;
	Попытка 
		Элементы.Отправитель.КнопкаВыпадающегоСписка = Элементы.Отправитель.СписокВыбора.Количество() > 0; 
	Исключение 
	КонецПопытки;
	
	Если Элементы.Отправитель.СписокВыбора.Количество() > 0 Тогда
		
		Для Каждого Элемент Из Элементы.Отправитель.СписокВыбора Цикл
			Если Элемент.Значение = Объект.Отправитель Тогда
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
		Объект.Отправитель = Элементы.Отправитель.СписокВыбора.Получить(0).Значение;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокКаналов(Знач ПерезаполнитьКанал = Истина)
	
	Элементы.Канал.СписокВыбора.Очистить();
	Если НЕ ПустаяСтрока(Объект.Сервис) Тогда
		
		СЗ = ОбработкаОбъект().КаналыОтправкиСервиса(Объект.Сервис); 
		Для Каждого Элемент Из СЗ Цикл
			Элементы.Канал.СписокВыбора.Добавить(Элемент.Значение);
		КонецЦикла;
		
		Если ПерезаполнитьКанал = Истина Тогда
			Если Элементы.Канал.СписокВыбора.НайтиПоЗначению(Объект.Канал) = Неопределено Тогда
				Канал = ОбработкаОбъект().ПервыйКаналОтправкиСервиса(Объект.Сервис);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПополнитьБаланс(Команда)
		
	ОткрытьСайт(ПолучитьСсылкуСервиса(Объект.Сервис, "ПополнитьБаланс"));
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
	Объект.ТЗ.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзФайлаExcel(Команда)
	
	ИмяФормаЗагрузкиИзExcel = Объект.ПараметрыСеансаОбработки.ИмяФормаЗагрузкиИзExcel;
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ФайлExcel", );
	ПараметрыФормы.Вставить("НомерКолонкиТелефона", Объект.НомерКолонкиТелефона);
	ПараметрыФормы.Вставить("НомерСИменемАдресата", Объект.НомерСИменемАдресата);
	ПараметрыФормы.Вставить("НомерПервойСтроки", Объект.НомерПервойСтроки);
	
	ПараметрыИсточника = Новый Структура;
	ПараметрыИсточника.Вставить("ФормаИлиОбработчик", ЭтаФорма);
	
	ФормаЗагрузкиИзExcel = ПолучитьФорму(ИмяФормаЗагрузкиИзExcel, ПараметрыФормы, ЭтаФорма);
	Попытка
		// Стандартно в модальном режиме (8.2/8.3).
		ФормаЗагрузкиИзExcel.НомерКолонкиТелефона = Объект.НомерКолонкиТелефона;
		ФормаЗагрузкиИзExcel.НомерПервойСтроки	  = Объект.НомерПервойСтроки;
		ФормаЗагрузкиИзExcel.НомерСИменемАдресата = Объект.НомерСИменемАдресата;
		Результат = ФормаЗагрузкиИзExcel.ОткрытьМодально();
		ВыполнитьЗагрузкуExcel(Результат, ПараметрыИсточника);
	Исключение
		Попытка
			// Стандартно в немодальном режиме (8.3).
			Выполнить("ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(""ВыполнитьЗагрузкуExcel"", ЭтотОбъект, ПараметрыИсточника)");
			Выполнить("ФормаЗагрузкиИзExcel.ОписаниеОповещенияОЗакрытии = ОписаниеОповещенияОЗакрытии");
			ФормаЗагрузкиИзExcel.НомерКолонкиТелефона = Объект.НомерКолонкиТелефона;
			ФормаЗагрузкиИзExcel.НомерПервойСтроки	  = Объект.НомерПервойСтроки;
			ФормаЗагрузкиИзExcel.НомерСИменемАдресата = Объект.НомерСИменемАдресата;
			ФормаЗагрузкиИзExcel.Открыть();
		Исключение
			ПредупреждениеСообщение(, "НЕ УДАЛОСЬ ОТКРЫТЬ ФОРМУ ЗАГРУЗКИ ИЗ EXCEL.");
		КонецПопытки;
	КонецПопытки;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////
// СОБЫТИЯ ШАПКИ

&НаКлиенте
Процедура ТипСМСПриИзменении(Элемент)
	
	ОбновитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодставитьПерсональныеСМСВсем(Команда)
	
	ПодставитьПерсональныеСМСВсемНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьБаланс(Команда)
	
	ОбновитьБалансНаСервре();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусДоставки(Команда)
	
	ОбновитьСтатусДоставкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсе(Команда)
	Для Каждого Строки ИЗ Объект.ТЗ Цикл
		Строки.Флаг = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	Для Каждого Строки ИЗ Объект.ТЗ Цикл
		Строки.Флаг = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьSMS(Команда)
	
	Результат = ОтправитьСМСНаСервере();
	Если Результат <> Неопределено Тогда
		
		мДанные = GA_Событие("Отправка SMS", "Отправлено", Объект.Сервис, Результат);
		GA_ОтправитьСведения(мДанные);
		
		ПредупреждениеСообщение(, "Отправлено " + Строка(Результат) + " сообщений!");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПроксиПриИзменении(Элемент)
	
	ОбновитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СервисПриИзменении(Элемент)
	
	ОбновитьСписокКаналов();
	ОбновитьСписокОтправителей();
	ОбновитьВидимостьИДоступность();
	GA_ЗаполнитьПараметры();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнструкцияНажатие(Элемент)
		
	ОткрытьСайт(ПолучитьСсылкуСервиса(Объект.Сервис, "Тарифы"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПосчитатьСтоимостьОтправки(Команда)
	
	Результат = ОтправитьСМСНаСервере(Истина);
	Если Результат <> Неопределено Тогда
		ПредупреждениеСообщение(, "Стоимость отправки выбранных сообщений " + Строка(Результат) + " руб.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтладкаПриИзменении(Элемент)
	
	ОбновитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СайтАвтораНажатие(Элемент)
	
	ОткрытьСайт("https://softonit.ru/?utm_campaign=multisms&utm_source=1c&utm_medium=from_form&utm_content=" 
		+ ВерсияОбработки());
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДублиНаСервере()
	
	ВременнаяТаблица = Объект.ТЗ.Выгрузить();
	ВременнаяТаблица.Колонки.Добавить("Колво");
	ВременнаяТаблица.ЗаполнитьЗначения(1, "Колво");
	ВременнаяТаблица.Свернуть("Телефон", "Колво");
	
	Для Каждого Строки Из ВременнаяТаблица Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Телефон", Строки.Телефон);
		НайденныеСтроки = Объект.ТЗ.НайтиСтроки(Отбор);
		Для Индекс = 1 По НайденныеСтроки.Количество() - 1 Цикл
			Объект.ТЗ.Удалить(НайденныеСтроки[Индекс]);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДубли(Команда)
	
	УдалитьДублиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСписокНомеров(Команда)
	
	Текст = "";
	Подсказка = "Введите номера по одному на каждой строке";
	Попытка
		
		Если Объект.ПараметрыСеансаОбработки.РежимИспользованияМодальности = "Использовать" Тогда
			
			Если ВвестиСтроку(Текст, Подсказка, 0, Истина) Тогда				
				ПослеВводаСпискаНомеров(Текст, Неопределено);
			КонецЕсли; 
			
		Иначе
			           
			Оповещение = Вычислить("Новый ОписаниеОповещения(""ПослеВводаСпискаНомеров"", ЭтотОбъект, Неопределено)");
			Выполнить("ПоказатьВводСтроки(Оповещение, """", Подсказка, 0, Истина)");
			
		КонецЕслИ;
	Исключение
		Сообщить("Не удалось выполнить загрузку номеров по тексту");
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаСпискаНомеров(Текст, Параметры) Экспорт
	
    Если НЕ Текст = Неопределено Тогда
		Для Индекс = 1 По СтрЧислоСтрок(Текст) Цикл					
			НоваяСтрока 		= Объект.ТЗ.Добавить();
			НоваяСтрока.Флаг 	= Истина;
			НоваяСтрока.Телефон = СтрПолучитьСтроку(Текст, Индекс);
			НоваяСтрока.Статус 	= "Не отправлено";					
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗКонтрагентПриИзменении(Элемент)
	
	Если Элементы.ТЗ.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ТЗ.ТекущиеДанные.Телефон = ПолучитьТелефоныПоЭлементу(Элементы.ТЗ.ТекущиеДанные.Контрагент);
	Элементы.ТЗ.ТекущиеДанные.ТипЗначенияОбъекта = Строка(ТипЗнч(Элементы.ТЗ.ТекущиеДанные.Контрагент));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОбновлениеНажатие(Элемент)
	
	Обновление(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Флаг = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьВУказанноеВремяПриИзменении(Элемент)
	
	ОбновитьВидимостьИДоступность();
	Если Объект.ОтправлятьВУказанноеВремя Тогда
		Объект.ДатаИВремяОтправки = КонецЧаса(ТекущаяДата()) + 1;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЛогинПриИзменении(Элемент)
	
	Объект.Пользователь = Объект.Логин;
	ОбновитьСписокОтправителей();
	GA_ЗаполнитьПараметры();
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	
	ОбновитьСписокОтправителей();
	
КонецПроцедуры

&НаСервере
Функция ВерсияОбработки()
	
	Возврат ОбработкаОбъект().ПолучитьТекущуюВерсию();
	
КонецФункции

&НаСервере
Функция ДобавитьВМассивСправочник(МассивТипов, ТипСтрокой)
	
	Если Метаданные.Справочники.Найти(ТипСтрокой) <> Неопределено Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка." + ТипСтрокой));
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура Отбор(Команда)
	
	Структура = Новый Структура;
	Структура.Вставить("Типы", Элементы.ТЗКонтрагент.ОграничениеТипа);
	мИмяФормы = Объект.ПараметрыСеансаОбработки.ИмяФормаОтбор + "УФ";
	Попытка
		Выполнить("ОткрытьФорму(мИмяФормы, Структура, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)");
	Исключение
		Попытка
			ОткрытьФормуМодально(мИмяФормы, Структура, ЭтаФорма);
		Исключение
			ОткрытьФорму(мИмяФормы, Структура, ЭтаФорма);
		КонецПопытки;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
// Преобразовать строку в UTF-8
Функция ПреобразоватьСтрокуВУТФ8(Стр) Экспорт
	
    Длина=СтрДлина(Стр);
    Итог="";
	
    Для Н=1 По Длина Цикл
        Знак=Сред(Стр,Н,1);
        Код=КодСимвола(Знак);
        Если Код<128 Тогда
            Итог=Итог+Знак;
        Иначе
            Если (Код>=КодСимвола("А"))И(Код<=КодСимвола("п")) Тогда
                Итог=Итог+Символ(208)+Символ(144+Код-КодСимвола("А"));
            ИначеЕсли (Код>=КодСимвола("р"))И(Код<=КодСимвола("я")) Тогда
                Итог=Итог+Символ(209)+Символ(128+Код-КодСимвола("р"));
            ИначеЕсли (Знак="ё") Тогда
                Итог=Итог+Символ(209)+Символ(145);
            ИначеЕсли (Знак="Ё") Тогда
                Итог=Итог+Символ(208)+Символ(129);
            КонецЕсли;
        КонецЕсли;
	КонецЦикла;
	
    Возврат Итог;
	
КонецФункции

&НаКлиенте
Процедура КлючAPIПриИзменении(Элемент)
	
	ОбновитьСписокОтправителей();
	ОбновитьБалансНаСервре();
	GA_ЗаполнитьПараметры();
	
КонецПроцедуры

&НаКлиенте
Процедура БалансТадам(Команда)
	ОбновитьБалансНаСервреТадам();
КонецПроцедуры

&НаСервере
Процедура ОбновитьБалансНаСервреТадам()
	
	БалансЧисло = 0;
	ЕстьОшибка	= Ложь;
		
	ОбработкаОбъект().ПолучитьБалансАккаунтаSMS(ЕстьОшибка);
			
КонецПроцедуры

